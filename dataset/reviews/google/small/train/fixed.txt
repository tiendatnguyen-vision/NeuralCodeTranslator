public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 user = METHOD_2 ( STRING_1 ) ; METHOD_3 ( STRING_2 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_3 ( VAR_3 , user ) ; } 
protected void run ( ) throws java.lang.Exception { VAR_1 . query ( TYPE_1 . METHOD_4 ( query , STRING_1 ) ) ; } 
private void METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { VAR_2 . METHOD_1 ( VAR_3 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( ) ) ; } } 
public void onSuccess ( final TYPE_1 result ) { METHOD_1 ( VAR_1 , VAR_2 , line , file ) ; } 
protected TYPE_1 . Result METHOD_1 ( ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , git ) ; return VAR_1 . to ( STRING_1 ) ; } 
public java.util.List < TYPE_1 . ChangeInfo > METHOD_1 ( ) throws TYPE_4 { throw new TYPE_5 ( ) ; } 
TYPE_1 create ( java.lang.String VAR_1 , java.lang.String VAR_2 ) ; 
private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_2 . PatchSet ps ) { TYPE_3 . METHOD_2 ( r , STRING_1 , ps . getRevision ( ) ) ; } 
private static int METHOD_3 ( final TYPE_1 VAR_1 , final TYPE_2 cfg , final java.lang.String name , final int VAR_2 ) { return cfg . METHOD_3 ( STRING_1 , VAR_1 . getName ( ) , name , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , cfg ) ; VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_1 d = METHOD_2 ( c , ps ) ; VAR_1 = ps . getId ( ) . equals ( c . currentPatchSetId ( ) ) ; return d ; } 
public java.lang.String format ( java.lang.String projectName , TYPE_1 cfg , java.lang.String VAR_1 ) { return ( STRING_1 + ( TYPE_2 . METHOD_1 ( VAR_1 ) ) ) + STRING_2 ; } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( TYPE_1 < ? > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_1 ( repo , branch , STRING_1 ) ; } 
public abstract TYPE_1 . Result METHOD_1 ( TYPE_2 index ) ; 
public org.eclipse.jgit.lib.ObjectId apply ( TYPE_1 ref ) { if ( ( ref . METHOD_1 ( ) ) != null ) { return ref . METHOD_1 ( ) ; } return ref . METHOD_2 ( ) ; } 
public TYPE_1 . Id getId ( ) { return key ; } 
void METHOD_1 ( ) { int VAR_2 = METHOD_3 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; VAR_5 . METHOD_5 ( VAR_4 ) ; } 
public static TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( ) . METHOD_4 ( false ) . METHOD_5 ( false ) . METHOD_6 ( null ) ; } 
public void METHOD_1 ( final org.eclipse.jgit.lib.ObjectId id ) { VAR_1 . add ( id ) ; } 
public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_1 ( ) ; TYPE_3 . METHOD_1 ( ) ; TYPE_4 . METHOD_1 ( ) ; } 
public void METHOD_1 ( TYPE_1 . ReceiveCommand cmd ) throws java.io.IOException { METHOD_2 ( ) ; commands . add ( cmd ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_1 , false ) ; METHOD_3 ( VAR_2 ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_1 ( VAR_1 . getName ( ) ) ; } 
void METHOD_1 ( ) { VAR_1 . append ( log ( ( STRING_1 + ( VAR_2 . get ( ) . METHOD_2 ( ) ) ) ) ) ; METHOD_3 ( VAR_3 . get ( ) , STRING_2 , STRING_3 ) ; } 
private static java.lang.StringBuilder METHOD_1 ( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 ) { return VAR_1 . append ( VAR_2 . getName ( ) ) . append ( STRING_1 ) ; } 
protected void run ( ) { for ( TYPE_1 d : config . METHOD_1 ( VAR_1 ) ) { if ( METHOD_2 ( d . METHOD_3 ( ) . getName ( ) ) ) { METHOD_4 ( d ) ; } } } 
public void run ( ) { for ( ; ; ) { try { if ( VAR_1 . METHOD_1 ( VAR_2 , VAR_3 ) ) { return ; } } catch ( TYPE_1 e ) { } VAR_4 . METHOD_2 ( false ) ; } } 
public abstract boolean METHOD_1 ( ) ; 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.lang.String path ) throws java.lang.Exception { return METHOD_2 ( path , new TYPE_2 < java.util.Map < java.lang.String , TYPE_1 > > ( ) { } ) ; } 
void METHOD_1 ( java.lang.String name ) { this . VAR_2 = TYPE_1 . METHOD_2 ( name ) ; } 
public void METHOD_1 ( ) { if ( ( ++ ( VAR_1 ) ) == 1 ) { if ( ( VAR_2 ) == 0 ) { VAR_3 . METHOD_2 ( true ) ; } } } 
com.google.gerrit.server.query.change.ChangeData create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id id ) ; 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 , new TYPE_2 ( VAR_2 , TYPE_3 . METHOD_3 ( STRING_2 ) ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_3 ) ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < java.lang.String > p , java.util.List < ? extends TYPE_1 < java.lang.String > > VAR_2 ) { org.junit.Assert.assertEquals ( ( VAR_1 + STRING_1 ) , VAR_2 , p . METHOD_2 ( ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = parseCommit ( VAR_2 ) ; com.google.common.truth.Truth.assertThat ( commit . METHOD_2 ( ) ) . isEqualTo ( VAR_1 ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = METHOD_2 ( null ) ) { org.junit.Assert . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_1 e ) { } } 
public static void METHOD_1 ( ) { new TYPE_2 ( ) . METHOD_2 ( ) ; } 
public int METHOD_1 ( ) { return 2 ; } 
private Project . NameKey METHOD_1 ( TYPE_1 in ) throws TYPE_2 { VAR_1 . projects ( ) . create ( in ) ; return new com.google.gerrit.reviewdb.client.Project.NameKey ( in . name ) ; } 
public static native TYPE_1 create ( TYPE_3 p , TYPE_4 cfg ) ; 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , com.google.gerrit.reviewdb.client.Change . Id changeId ) { java.lang.StringBuilder r = TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 . get ( ) ) ; r . append ( changeId . get ( ) ) ; return r . toString ( ) ; } 
public void onSuccess ( TYPE_1 result ) { if ( VAR_1 . METHOD_1 ( ) ) { TYPE_2 . display ( TYPE_3 . METHOD_2 ( VAR_1 . getProject ( ) , psId ) ) ; } } 
TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_1 ( ) ) ) ; } 
private boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . contains ( VAR_2 ) ; } 
public final void insert ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_1 ( VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 . Factory VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_2 user , TYPE_3 < com.google.gerrit.server.query.change.ChangeData > changes ) throws TYPE_5 , TYPE_6 { METHOD_1 ( VAR_1 , project , user , changes , STRING_1 , VAR_3 , TYPE_7 . of ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 = true ; apply ( ) ; } 
private org.eclipse.jgit.revwalk.RevWalk METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; return VAR_1 ; } 
public java.lang.String apply ( TYPE_1 . ChangeInfo input ) { return input . changeId ; } 
private void METHOD_1 ( final java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } 
void METHOD_1 ( TYPE_1 e ) { e . METHOD_2 ( ) ; TYPE_2 . display ( TYPE_3 . METHOD_3 ( project , changeId ) ) ; } 
protected TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return METHOD_2 ( ( ) - > super . METHOD_1 ( ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String VAR_1 ) { boolean VAR_2 = true ; for ( TYPE_1 VAR_3 : METHOD_2 ( project , VAR_4 ) ) { VAR_2 &= METHOD_1 ( VAR_3 , VAR_1 ) ; } return VAR_2 ; } 
public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return METHOD_2 ( db , patchSet , null , false , true , false ) ; } 
public TYPE_3 < ? > create ( TYPE_4 VAR_1 , TYPE_5 VAR_2 ) throws TYPE_6 . OrmException { return new TYPE_7 ( VAR_1 , VAR_2 , VAR_3 ) . create ( ) ; } 
public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( true ) ; } 
protected java.lang.String getRefName ( ) { return ref ; } 
boolean METHOD_1 ( boolean VAR_1 ) { if ( TYPE_1 . equals ( VAR_2 ) ) { return VAR_3 . METHOD_2 ( ) ; } return METHOD_3 ( VAR_4 , VAR_1 ) ; } 
java.lang.String METHOD_1 ( ) { return VAR_1 ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event ) throws com.google.gwtorm.server.OrmException { METHOD_2 ( change , event ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . Status VAR_2 ) throws java.lang.Exception { return METHOD_2 ( VAR_1 , null , false , false , VAR_2 ) ; } 
public java.lang.String getName ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 ; } if ( ( VAR_2 ) != null ) { return VAR_2 ; } return com.google.gerrit.reviewdb.client.Account . getName ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; VAR_3 . projects ( ) . name ( project . get ( ) ) . branch ( STRING_2 ) . create ( new TYPE_1 ( ) ) ; } 
private void METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) throws java.lang.Exception { METHOD_2 ( commit ) . METHOD_3 ( ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 > VAR_1 ) { VAR_2 . display ( VAR_1 ) ; display ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 res = METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( new java.lang.String ( res . METHOD_3 ( ) , VAR_1 ) ) . isEqualTo ( STRING_2 ) ; } 
void METHOD_1 ( boolean VAR_1 ) { sshd = false ; } 
private static void METHOD_1 ( java.lang.String token ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( token ) ) ; } } 
public void METHOD_3 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( STRING_1 ) ) ; } 
protected void METHOD_1 ( TYPE_2 . HttpServletResponse res ) { TYPE_3 . METHOD_2 ( res ) ; } 
private static TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( STRING_2 , e ) ; } } 
public final TYPE_1 < TYPE_2 , TYPE_3 , TYPE_4 > METHOD_1 ( ) { return VAR_1 ; } 
public TYPE_1 create ( final TYPE_2 . Id id ) { return create ( VAR_1 , null , id ) ; } 
protected void METHOD_1 ( TYPE_1 result ) { METHOD_2 ( VAR_1 ) ; VAR_1 = null ; } 
public int METHOD_1 ( TYPE_1 a , TYPE_1 b ) { return METHOD_1 ( a . getName ( ) , b . getName ( ) ) ; } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return query ( TYPE_1 . METHOD_2 ( new TYPE_2 ( topic ) , TYPE_4 . METHOD_3 ( ) ) ) ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; assert ( VAR_2 ) != null ; VAR_2 . METHOD_2 ( ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( 2 ) ; VAR_1 . METHOD_4 ( INT_1 ) ; VAR_1 . METHOD_5 ( INT_2 ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_2 ( VAR_1 ) ) . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_2 ) ) ; } 
boolean METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 , false , false ) ; } 
public void METHOD_1 ( int n ) { if ( n < 0 ) { VAR_1 = INT_1 ; } else if ( n == 0 ) { VAR_1 = VAR_2 ; } else { VAR_1 = TYPE_1 . METHOD_2 ( n , VAR_2 ) ; } } 
public void METHOD_1 ( final TYPE_1 event ) { METHOD_2 ( ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException , java.io.IOException { return VAR_1 . METHOD_1 ( db , changeId ) ; } 
private static java.lang.String format ( final java.lang.String name , final java.lang.String email ) { return new TYPE_1 ( name , email ) . METHOD_1 ( ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 . HttpServletResponse res ) throws java.io.IOException { return TYPE_3 . METHOD_1 ( res . METHOD_2 ( ) , res ) ; } 
public TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( ) . METHOD_4 ( METHOD_4 ( ) ) . METHOD_5 ( METHOD_5 ( ) ) . METHOD_6 ( METHOD_6 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , int row , int VAR_2 ) { if ( ( VAR_2 != 1 ) && ( ( METHOD_2 ( row ) ) != null ) ) { METHOD_3 ( row ) ; } } 
public boolean apply ( TYPE_1 input ) { return ( input . change ) != null ; } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; modules.add ( new TYPE_3 ( new TYPE_4 ( VAR_1 ) ) ) ; return VAR_1 . METHOD_2 ( modules ) ; } 
private boolean METHOD_1 ( org.eclipse.jgit.lib.ObjectId VAR_1 ) throws java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_1 ) ; return VAR_2 . METHOD_2 ( db , repo , commit ) ; } } 
protected void add ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( ( VAR_2 != null ) && ( ( VAR_2 . METHOD_1 ( ) ) != null ) ) { add ( VAR_1 , VAR_2 . METHOD_1 ( ) ) ; } } 
public void METHOD_1 ( final java.lang.StringBuilder VAR_1 , final TYPE_2 VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; VAR_1 . append ( VAR_2 . name ( ) ) ; VAR_1 . append ( CHAR_1 ) ; } 
private void METHOD_1 ( ) { METHOD_7 ( new TYPE_4 ( VAR_3 ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( METHOD_2 ( db ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ; } 
public void set ( final TYPE_1 value ) { try { VAR_1 = TYPE_2 . get ( ) ; super . set ( value ) ; } finally { VAR_1 = null ; } } 
public static java.util.List < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( TYPE_2 ... VAR_1 ) { return TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; } 
public void delete ( com.google.gerrit.reviewdb.client.Change . Id id ) { throw new TYPE_1 ( ) ; } 
void METHOD_1 ( TYPE_1 . NameKey branch ) ; 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ? null : VAR_1 ; } 
Account . Id getAccountId ( ) { return ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) . getAccountId ( ) ; } 
public static TYPE_1 base ( ) { return new TYPE_1 ( false ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_1 ) { return TYPE_1 . METHOD_1 ( project , revision , VAR_1 , 0 ) ; } 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( ( ! ( e . getValue ( ) ) ) ) ; view . METHOD_3 ( ( ! ( e . getValue ( ) ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { } 
public TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client . AccountGroup group ) { return new TYPE_1 ( user . get ( ) , group ) ; } 
protected com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { return VAR_1 . create ( db , project , psId . getParentKey ( ) ) . patchSet ( psId ) ; } 
TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id id ) ; 
public void onSuccess ( TYPE_1 . ChangeInfo result ) { VAR_1 = true ; METHOD_1 ( ) ; TYPE_2 . display ( TYPE_3 . METHOD_2 ( project , result . METHOD_3 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = METHOD_2 ( STRING_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = STRING_1 ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . name ( name ) . create ( ) . get ( ) . name ) ; } 
public abstract void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 ; 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.reviewdb.client.PatchSet patchSet , java.lang.String VAR_1 , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ; 
private TYPE_1 METHOD_1 ( ) { return METHOD_1 ( null , null , null , null ) ; } 
public void METHOD_1 ( TYPE_1 value ) { this . value = value ; METHOD_2 ( ) . METHOD_1 ( value ) ; } 
private final native void METHOD_1 ( int line ) ; 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project project ) { if ( ( VAR_1 ) != null ) { return VAR_1 . getProject ( ) . METHOD_2 ( ) . equals ( project . METHOD_2 ( ) ) ; } else { return true ; } } 
protected java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) { return VAR_1 ; } 
protected < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > METHOD_1 ( TYPE_4 < TYPE_5 < TYPE_1 > > VAR_1 ) { return new TYPE_3 ( view ( VAR_1 , VAR_2 , STRING_1 ) ) ; } 
private java.lang.String METHOD_1 ( int VAR_1 ) { if ( VAR_1 == 0 ) { return STRING_1 ; } return java.lang.String.format ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , STRING_4 ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { for ( TYPE_2 id : VAR_1 ) { if ( id . METHOD_2 ( VAR_2 ) ) { return id . METHOD_3 ( ) ; } } return null ; } 
public static TYPE_1 METHOD_1 ( TYPE_1 . Key key , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , java.lang.String email ) { return TYPE_1 . create ( key , VAR_1 , TYPE_3 . METHOD_2 ( email ) , null ) ; } 
public void onSuccess ( TYPE_1 result ) { projects . display ( result ) ; } 
protected TYPE_1 METHOD_1 ( final TYPE_2 req , final TYPE_3 . HttpServletResponse VAR_1 ) { return new TYPE_1 ( server , schema , req , VAR_1 ) ; } 
static void reject ( final TYPE_1 . ReceiveCommand cmd , final java.lang.String VAR_1 ) { cmd . METHOD_1 ( VAR_2 , VAR_1 ) ; } 
public java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey name ) throws java.io.IOException , TYPE_1 { try ( org.eclipse.jgit.lib.Repository e = METHOD_2 ( name ) ) { return METHOD_1 ( e ) ; } } 
public static final void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . METHOD_1 ( STRING_1 , VAR_1 , null ) ; } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { return query ( TYPE_1 . METHOD_2 ( TYPE_2 . project ( project ) , TYPE_2 . commit ( VAR_1 ) ) ) ; } 
public static void METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > changes ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.query.change.ChangeData cd : changes ) { cd . patchSets ( ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , STRING_1 ) ; assertEquals ( STRING_1 , VAR_2 ) ; } 
TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { if ( ( VAR_1 != null ) && ( ( VAR_1 . length ) > 0 ) ) { METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ; } return this ; } 
private PatchSet . Id METHOD_1 ( org.eclipse.jgit.lib.ObjectId c ) throws com.google.gwtorm.server.OrmException { return getChange ( c ) . change ( ) . currentPatchSetId ( ) ; } 
public void onSuccess ( final TYPE_1 result ) { if ( submit ) { submit ( ) ; } else { VAR_1 = false ; METHOD_1 ( ) ; } } 
private static void METHOD_1 ( java.lang.String token ) { TYPE_2 . METHOD_4 ( STRING_1 , token ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 , final int VAR_3 ) { METHOD_1 ( VAR_1 , java.lang.String . METHOD_2 ( VAR_2 ) , java.lang.String . METHOD_2 ( VAR_3 ) ) ; } 
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , new TYPE_1 ( ) , null , null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = METHOD_2 ( ) ; org.junit.Assert . METHOD_3 ( VAR_1 ) ; final TYPE_1 VAR_2 = METHOD_2 ( ) ; org.junit.Assert . METHOD_3 ( VAR_2 ) ; org.junit.Assert . METHOD_4 ( VAR_1 , VAR_2 ) ; } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 < TYPE_2 < TYPE_3 > > VAR_1 ) { TYPE_3 . base ( project ) . METHOD_2 ( STRING_1 ) . get ( VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 < java.lang.String > event ) { TYPE_2 . display ( event . getValue ( ) ) ; } 
public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . METHOD_2 ( ) . isEmpty ( ) ) ) ) { VAR_1 = name . METHOD_2 ( ) ; } else { VAR_1 = null ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 refs ) throws com.google.gwtorm.server.OrmException { return new TYPE_1 ( args , change , false , refs ) . METHOD_2 ( ) ; } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { try { return VAR_1 . METHOD_1 ( name ) ; } catch ( java.io.IOException err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = STRING_1 ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( ( name + STRING_2 ) ) . get ( ) . name ) ; } 
public boolean METHOD_1 ( int b ) { return ( b == 0 ) || ( ( METHOD_2 ( ( b - 1 ) ) ) == CHAR_1 ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 , METHOD_3 ( ) ) ; } 
private static final native void METHOD_1 ( java.lang.String d , java.lang.String t , java.lang.String r , java.lang.String VAR_1 ) ; 
public java.lang.String id ( ) { return TYPE_1 . toString ( change.getId ( ) . get ( ) ) ; } 
public void run ( ) { try { TYPE_1 . METHOD_1 ( VAR_1 , new TYPE_2 ( ) ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_3 ( STRING_1 , e ) ; } } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( STRING_4 , STRING_5 ) ; } 
int METHOD_1 ( TYPE_1 edit ) { return edit . METHOD_2 ( ) ; } 
private TYPE_1 . ProjectConfig METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { return METHOD_1 ( VAR_1 , true , true ) ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) ) ; } 
public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , TYPE_1 . format ( INT_1 ) ) ; org.junit.Assert.assertEquals ( STRING_2 , TYPE_1 . format ( - INT_2 ) ) ; org.junit.Assert.assertEquals ( STRING_3 , TYPE_1 . format ( - INT_3 ) ) ; } 
public static java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id ps ) { return ( ( STRING_1 + ( ps . getParentKey ( ) ) ) + STRING_2 ) + ( ps . getId ( ) ) ; } 
public void METHOD_1 ( TYPE_1 ctx ) throws java.io.IOException { ctx . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } 
TYPE_1 METHOD_1 ( ) ; 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 = null ; } } 
public final boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return true ; } METHOD_3 ( new java.lang.Exception ( VAR_1 ) ) ; return false ; } 
private static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 ctl ) throws com.google.gwtorm.server.OrmException { return ctl . METHOD_2 ( VAR_1 . data ( ) . notes ( ) ) . METHOD_3 ( VAR_1 . patchSet ( ) , VAR_1 . data ( ) ) ; } 
private boolean METHOD_1 ( ) { return ( METHOD_2 ( VAR_1 ) ) || ( METHOD_3 ( ) ) ; } 
public < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > METHOD_1 ( TYPE_4 < TYPE_1 , TYPE_2 > VAR_1 , TYPE_5 < TYPE_1 , TYPE_2 > VAR_2 ) { return create ( VAR_1 , false ) . METHOD_1 ( VAR_2 ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { java.util.List < TYPE_1 < TYPE_2 > > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( VAR_3 ) ; if ( VAR_1 ) { VAR_2 . add ( VAR_4 ) ; } METHOD_3 ( VAR_2 ) ; } 
public void delete ( ) throws TYPE_1 { try { VAR_1 . apply ( revision , null ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
private void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( project ) ) ; METHOD_4 ( STRING_1 ) ; } 
void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_2 = true ; } else if ( ! ( VAR_1 . isEmpty ( ) ) ) { METHOD_4 ( true ) ; } } 
public TYPE_1 < ? > index ( com.google.gerrit.reviewdb.client.Change change ) { return index ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; } 
public static boolean METHOD_1 ( TYPE_1 b ) { if ( b == null ) { return false ; } return b . METHOD_2 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , java.io.IOException { return new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 . get ( ) . get ( VAR_1 , id ) ) ; } 
abstract int METHOD_1 ( TYPE_1 edit ) ; 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client . AccountGroup VAR_1 , TYPE_1 VAR_2 ) throws com.google.gwtorm.server.OrmException { return VAR_3 . METHOD_2 ( VAR_4 . get ( ) , VAR_1 . METHOD_3 ( ) , VAR_2 . METHOD_3 ( ) ) ; } 
public TYPE_1 < com.google.gerrit.reviewdb.server.ReviewDb > get ( ) { try { return new TYPE_1 ( VAR_1 , VAR_2 . ReviewDb class ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( java.lang.String query ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < > ( ) ; } VAR_1 . add ( query ) ; } 
public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String project , int id , int VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( project , id , VAR_1 ) . view ( STRING_1 ) . id ( VAR_2 ) ; } 
boolean METHOD_1 ( ) { return ( user ) != null ; } 
public static void METHOD_1 ( TYPE_1 . Factory VAR_1 , com.google.gerrit.reviewdb.client.Change change ) { VAR_1 . create ( change . METHOD_2 ( ) ) . METHOD_3 ( change ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) { return new TYPE_3 ( cd , false ) ; } 
public java.lang.String getName ( ) { return null ; } 
TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 . Key patch , TYPE_4 . Id VAR_1 ) throws TYPE_5 . OrmException ; 
public void METHOD_1 ( ) { METHOD_2 ( refs ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { return VAR_3 . METHOD_2 ( VAR_4 , args . repo , VAR_1 , args . rw , VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String ... VAR_2 ) throws java.lang.Exception { return TYPE_1 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 , VAR_1 , null , null , VAR_2 ) ; } 
protected final TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = super . METHOD_1 ( ) ; for ( TYPE_2 c : VAR_2 ) { VAR_1 . METHOD_2 ( c , c ) ; } return VAR_1 ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , java.lang.String VAR_1 , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ; 
public void close ( ) throws java.io.IOException { rw . close ( ) ; repo . close ( ) ; } 
public java.lang.String METHOD_1 ( int size ) throws TYPE_1 { VAR_2 . METHOD_2 ( size ) ; return VAR_2 . apply ( account ) . METHOD_3 ( ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) { return VAR_1 . create ( db , change ) ; } 
public java.lang.String METHOD_1 ( int size ) throws TYPE_1 { throw new TYPE_2 ( ) ; } 
Project . NameKey METHOD_1 ( ) { return project . METHOD_2 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 schema = METHOD_2 ( ) ; final int a = schema . METHOD_3 ( ) ; final int b = schema . METHOD_3 ( ) ; org.junit.Assert . METHOD_4 ( ( a != b ) ) ; } 
TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { return METHOD_3 ( VAR_1 , VAR_2 ) ; } return null ; } 
private boolean METHOD_1 ( TYPE_1 config , java.lang.String ref ) { return METHOD_2 ( config , STRING_1 , ref , true , true ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { for ( TYPE_1 VAR_2 : METHOD_2 ( VAR_1 ) ) { if ( VAR_2 . getName ( ) . METHOD_3 ( VAR_3 ) ) { return VAR_2 ; } } return null ; } 
public TYPE_1 METHOD_1 ( ) { return user ; } 
public java.lang.String METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( VAR_2 ) == null ) { METHOD_2 ( ) ; } return VAR_2 ; } 
public void run ( ) { c . close ( ) ; db = null ; } 
public final native void METHOD_1 ( int line ) ; 
void METHOD_1 ( TYPE_1 cm ) { if ( METHOD_2 ( ) ) { cm . METHOD_3 ( VAR_2 ) ; } } 
private java.lang.String url ( TYPE_1 r ) { return TYPE_2 . METHOD_1 ( project , changeId , r . id ( ) ) ; } 
public void METHOD_1 ( ) { db . close ( ) ; } 
public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; } 
public void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( ) ; } 
private void METHOD_1 ( ) { for ( final java.lang.String name : METHOD_2 ( ) ) { p . METHOD_3 ( name ) ; p . METHOD_3 ( CHAR_1 ) ; } p . METHOD_4 ( ) ; } 
public static void delete ( java.lang.String project , int id , java.lang.String path , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 . METHOD_1 ( project , id , path ) . delete ( VAR_1 ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( ( ( VAR_1 ) != null ) && ( cd . METHOD_2 ( VAR_1 ) ) ) || ( VAR_2 . METHOD_1 ( cd ) ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String branch ) { if ( branch . METHOD_2 ( VAR_1 ) ) { return branch ; } return ( VAR_2 ) + branch ; } 
public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 . METHOD_1 ( project , id ) . get ( VAR_1 ) ; } 
public void METHOD_1 ( final boolean VAR_1 ) { TYPE_1 . METHOD_2 ( this , VAR_1 ) ; super . METHOD_1 ( VAR_1 ) ; } 
private boolean METHOD_1 ( java.lang.String name ) { return ( METHOD_2 ( name , STRING_1 ) ) || ( METHOD_2 ( name , STRING_2 ) ) ; } 
public void METHOD_1 ( java.lang.String label , short value ) { approvals . put ( label , value ) ; } 
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( ( STRING_1 . METHOD_2 ( VAR_1 ) ) || ( STRING_2 . METHOD_2 ( VAR_1 ) ) ) || ( STRING_3 . METHOD_2 ( VAR_1 ) ) ; } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; return key . equals ( VAR_2 . key ) ; } return false ; } 
public java.util.List < TYPE_1 > run ( TYPE_2 . ReviewDb db ) throws TYPE_3 . OrmException { return db . METHOD_1 ( ) . METHOD_2 ( getAccountId ( ) ) . METHOD_3 ( ) ; } 
public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( TYPE_2 . METHOD_2 ( null ) , INT_1 , STRING_1 , VAR_1 ) ; } 
private void METHOD_1 ( final int row , final int VAR_1 , final java.lang.String name ) { table . METHOD_2 ( ) . METHOD_1 ( row , VAR_1 , name ) ; } 
private void METHOD_1 ( TYPE_1 t ) { VAR_1 . error ( ( STRING_1 + ( changeId ) ) , t ) ; VAR_2 . set ( false ) ; VAR_3 . update ( 1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( query ( METHOD_2 ( STRING_2 ) ) , VAR_1 . METHOD_3 ( in , 0 ) ) ; } 
public boolean isEmpty ( ) { return ( VAR_1 . isEmpty ( ) ) && ( VAR_2 . isEmpty ( ) ) ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.ObjectId VAR_1 ) throws java.lang.Exception { return new TYPE_1 ( METHOD_2 ( ) . getId ( ) , VAR_1 , walk , VAR_3 , VAR_4 ) ; } 
public TYPE_1 < ? , java.io.IOException > METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return ( VAR_1 ) != null ? submit ( new TYPE_2 ( change , false ) ) : VAR_2 < TYPE_3 , java.io.IOException > METHOD_2 ( null ) ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_2 ( ) ; } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws com.google.gwtorm.server.OrmException { return query ( TYPE_1 . commit ( id . name ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final int VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; VAR_4 . add ( VAR_3 ) ; return VAR_3 ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) throws TYPE_3 { return new TYPE_4 ( TYPE_5 . METHOD_2 ( VAR_1 ) ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) { TYPE_1 . METHOD_2 ( ( ( psId == null ) || ( psId . getParentKey ( ) . equals ( getChange ( ) . getId ( ) ) ) ) ) ; this . psId = psId ; } 
public static TYPE_1 < TYPE_2 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } return VAR_1 ; } 
public int METHOD_1 ( ) { return 1 + ( ( group ) == null ? 0 : 1 ) ; } 
void METHOD_1 ( ) { final TYPE_1 d = new TYPE_1 ( VAR_1 ) ; d . METHOD_3 ( ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException { if ( log . METHOD_2 ( ) ) { log . METHOD_3 ( STRING_1 , VAR_1 , VAR_2 , VAR_3 ) ; } } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . ChangeInfo c = event . getChange ( ) ; METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( c . project ) , VAR_1 , event . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( final TYPE_1 cm ) { VAR_2 = cm ; ( VAR_3 ) ++ ; } 
public static long METHOD_1 ( java.lang.String VAR_1 ) { if ( STRING_1 . equals ( VAR_1 ) ) { return VAR_2 ; } return TYPE_1 . METHOD_2 ( VAR_1 , INT_2 ) ; } 
protected static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( TYPE_2 . METHOD_1 ( VAR_1 ) ) || ( ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ) ; } 
public TYPE_1 file ( java.lang.String path ) { return VAR_1 . create ( VAR_2 . METHOD_1 ( revision , TYPE_3 . METHOD_2 ( path ) ) ) ; } 
protected TYPE_1 METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; return VAR_1 ; } 
public void delete ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.io.IOException ; 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { return TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) , TYPE_3 . METHOD_4 ( VAR_1 ) ) ; } 
private java.util.Map < java.lang.String , java.util.List < TYPE_1 > > METHOD_1 ( java.lang.String path ) throws java.lang.Exception { return METHOD_2 ( new TYPE_2 < java.util.Map < java.lang.String , java.util.List < TYPE_1 > > > ( ) { } , path ) ; } 
boolean METHOD_1 ( ) { return ( ( user ) instanceof TYPE_1 ) && ( ( ( TYPE_1 ) ( user ) ) . METHOD_3 ( ) ) ; } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 ) ; } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_1 , int line ) { return TYPE_1 . METHOD_2 ( STRING_1 , project , TYPE_2 . base ( ) , revision , VAR_1 , null , line ) ; } 
public TYPE_1 get ( ) { return METHOD_2 ( METHOD_3 ( VAR_2 . METHOD_1 ( ) ) ) ; } 
public void METHOD_1 ( TYPE_1 event ) { if ( event instanceof TYPE_3 ) { VAR_1 . METHOD_2 ( new TYPE_2 ( ( ( TYPE_3 ) ( event ) ) ) ) ; } } 
private void display ( final TYPE_1 result ) { projects . display ( result ) ; projects . METHOD_2 ( ) ; } 
public void METHOD_1 ( final java.lang.String name ) { this . name = name ; } 
void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; } 
protected boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_2 VAR_2 , byte [ ] VAR_3 ) { return ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( TYPE_3 . equals ( VAR_3 , METHOD_3 ( VAR_1 , VAR_2 ) ) ) ; } 
public synchronized void METHOD_1 ( ) { VAR_1 . info ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ; METHOD_3 ( false ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( ) ; } } 
public void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( ) ; } 
public void onSuccess ( java.lang.String result ) { TYPE_1 edit = new TYPE_1 ( id , result , path , VAR_2 , VAR_3 , VAR_4 ) ; edit . METHOD_1 ( ) ; } 
private void METHOD_1 ( TYPE_1 . ProjectConfig cfg ) throws java.lang.Exception { try ( TYPE_2 VAR_1 = VAR_2 . create ( project ) ) { cfg . commit ( VAR_1 ) ; } } 
private static java.lang.String METHOD_1 ( java.lang.String project ) { return project . METHOD_3 ( ( ( project . METHOD_2 ( CHAR_1 ) ) + 1 ) ) ; } 
void submit ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) ; 
TYPE_1 . Branch get ( TYPE_2 . NameKey name ) throws TYPE_3 . OrmException ; 
public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( VAR_2 . getValue ( ) ) ; } 
public TYPE_1 create ( final TYPE_2 group , final java.lang.String id ) { return new TYPE_1 ( put , TYPE_4 . METHOD_1 ( id ) ) ; } 
public TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 { return VAR_2 . create ( id . get ( ) ) ; } 
public final native boolean value ( ) ; 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; display ( ) ; METHOD_2 ( false ) ; } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) { return new TYPE_3 ( cd , false ) ; } 
protected java.lang.String METHOD_1 ( final java.lang.String query ) { return query ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( null ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_3 ( STRING_1 ) ) ; } 
public com.google.gerrit.reviewdb.client.Change change ( ) throws com.google.gwtorm.server.OrmException { if ( ( change ) == null ) { change = db . changes ( ) . get ( VAR_1 ) ; } return change ; } 
static boolean METHOD_1 ( java.lang.String s ) { return ( s != null ) && ( ( ( s . equals ( STRING_1 ) ) || ( s . METHOD_2 ( STRING_2 ) ) ) || ( TYPE_1 . METHOD_1 ( s ) ) ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { METHOD_2 ( ) ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( true ) ; } } 
static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id ) { return TYPE_2 . METHOD_2 ( TYPE_3 . getName ( ) , id . get ( ) ) ; } 
public void METHOD_1 ( ) { m . METHOD_1 ( name . value ( ) , VAR_1 ) ; } 
public Project . NameKey METHOD_1 ( ) { return name ; } 
public TYPE_1 change ( com.google.gerrit.server.query.change.ChangeData cd ) { try { return cd . METHOD_1 ( ) . METHOD_2 ( METHOD_3 ( ) ) . METHOD_4 ( cd , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return TYPE_2 . change ( STRING_1 , e ) ; } } 
public TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patch ) { return TYPE_2 . METHOD_2 ( this , repo , rw , cd , patch ) ; } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) { return new TYPE_3 ( cd , true ) ; } 
public boolean METHOD_1 ( ) { return METHOD_2 ( ) ; } 
private java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ; } 
public java.lang.String toString ( ) { return format ( ) ; } 
public void METHOD_1 ( TYPE_1 ctx ) throws java.lang.Exception { ctx . METHOD_2 ( VAR_1 . getId ( ) , VAR_2 . getId ( ) , STRING_1 ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 < TYPE_3 > > result ) { r . add ( result ) ; } 
public Change . Key METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Change . Key ( change . get ( ) . id ) ; } 
private < TYPE_1 extends TYPE_2 < ? > > TYPE_3 < TYPE_1 > METHOD_1 ( ) { if ( VAR_1 ) { return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; } return TYPE_3 . METHOD_2 ( ) . METHOD_4 ( ) ; } 
void METHOD_1 ( ) { TYPE_1 . display ( TYPE_2 . METHOD_2 ( project , changeId ) ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String id , TYPE_2 ctl ) throws TYPE_3 { if ( ctl . METHOD_2 ( ) ) { return new TYPE_1 ( ctl ) ; } throw new TYPE_3 ( id ) ; } 
public static void METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.server.ReviewDb > db , TYPE_2 < com.google.gerrit.server.query.change.ChangeData > changes ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.query.change.ChangeData cd : changes ) { cd . METHOD_2 ( ) ; } } 
static TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , null , VAR_1 , VAR_4 , VAR_5 . Collections < TYPE_2 > METHOD_2 ( ) , 0 , 0 , 0 , 0 ) ; } 
public TYPE_1 get ( final java.lang.String VAR_1 ) { final int index = METHOD_1 ( VAR_1 ) ; return 0 <= index ? VAR_2 . get ( index ) : TYPE_1 . METHOD_2 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { query = VAR_1 . METHOD_2 ( TYPE_1 . of ( VAR_2 , STRING_1 , VAR_3 , STRING_2 ) ) ; com.google.common.truth.Truth.assertThat ( query ) . METHOD_3 ( VAR_4 ) ; } 
public static < TYPE_1 > TYPE_2 < TYPE_1 > create ( TYPE_3 < TYPE_1 > VAR_1 ) { return new TYPE_2 < TYPE_1 > ( VAR_1 ) ; } 
public void close ( ) ; 
public void METHOD_1 ( TYPE_1 err ) { if ( TYPE_2 . METHOD_2 ( err ) ) { new TYPE_2 ( err . getMessage ( ) ) . METHOD_3 ( ) ; } else { super . METHOD_1 ( err ) ; } METHOD_4 ( ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; } 
private static TYPE_1 < TYPE_2 < ? > > METHOD_1 ( TYPE_1 < ? > e ) { return ( ( TYPE_1 < TYPE_2 < ? > > ) ( e ) ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 . ui ) ; bind ( VAR_3 class ) . METHOD_2 ( VAR_4 ) ; bind ( VAR_5 class ) . to ( VAR_6 class ) ; } 
protected TYPE_1 . Result METHOD_1 ( TYPE_2 git ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , git ) ; return VAR_1 . to ( STRING_1 ) ; } 
void METHOD_1 ( TYPE_1 e ) { METHOD_1 ( ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 ) ; VAR_1 . get ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) ) . METHOD_3 ( ) ; } 
public static TYPE_1 . Key < TYPE_2 > key ( final java.lang.String name ) { return TYPE_4 . key ( TYPE_4 . METHOD_1 ( name ) ) ; } 
public java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > approvals ( ) throws com.google.gwtorm.server.OrmException { return TYPE_2 . METHOD_1 ( METHOD_2 ( ) . values ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this , true ) ; super . METHOD_1 ( ) ; } 
public final native int to ( ) ; 
private TYPE_1 . Result METHOD_1 ( ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , git ) ; return VAR_1 . to ( STRING_1 ) ; } 
private int METHOD_1 ( ) { final int VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( 0 <= VAR_1 ) { return TYPE_1 . METHOD_3 ( VAR_2 . getValue ( VAR_1 ) ) ; } return getValue ( ) . VAR_2 ; } 
public static TYPE_1 METHOD_1 ( java.lang.String query ) { return TYPE_1 . METHOD_1 ( query , 0 ) ; } 
public void METHOD_1 ( int id ) { METHOD_2 ( id , false ) ; } 
private TYPE_1 METHOD_1 ( ) { final int VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( 0 <= VAR_1 ) { return TYPE_1 . METHOD_3 ( VAR_2 . getValue ( VAR_1 ) ) ; } return value . METHOD_1 ( ) ; } 
private static boolean METHOD_1 ( TYPE_1 cfg ) { return cfg . METHOD_2 ( STRING_1 , null , STRING_2 , false ) ; } 
public TYPE_1 create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , change ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException , TYPE_3 { TYPE_4 config = new TYPE_4 ( TYPE_5 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; config . METHOD_3 ( ) ; return config ; } 
public static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { return new TYPE_2 ( name ) ; } 
private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) > 0 ) { return TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( VAR_1 , STRING_1 ) ) ; } return TYPE_2 . METHOD_4 ( ) ; } 
TYPE_1 . Project get ( TYPE_2 . NameKey name ) throws TYPE_3 . OrmException ; 
public void onSuccess ( final java.util.List < TYPE_1 > result ) { VAR_1 . display ( result ) ; } 
private final native int get ( java.lang.String n , int d ) ; 
private void METHOD_1 ( TYPE_1 . Change c , TYPE_2 msg ) { METHOD_2 ( c , msg , true ) ; } 
public void METHOD_1 ( ) { final TYPE_1 p = new TYPE_1 ( null ) ; org.junit.Assert.assertEquals ( 0 , p . METHOD_2 ( ) ) ; } 
public TYPE_1 value ( ) { return value ; } 
private void METHOD_1 ( ) { approvals = TYPE_1 . of ( ) ; reviewers = TYPE_2 . of ( ) ; VAR_1 = TYPE_3 . of ( ) ; VAR_2 = TYPE_1 . of ( ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( project ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( cfg , VAR_3 , VAR_4 , STRING_1 ) ; METHOD_5 ( project , cfg ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 cm , int line ) { return METHOD_2 ( TYPE_3 . create ( path , METHOD_4 ( cm ) , ( line + 1 ) , null , null ) ) ; } 
public java.util.Set < TYPE_1 . Id > METHOD_1 ( final java.lang.String key ) { return java.util.Collections . METHOD_2 ( ) ; } 
public TYPE_1 < ? , java.io.IOException > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id id ) { return ( VAR_1 ) != null ? submit ( new TYPE_2 ( project , id ) ) : VAR_2 < TYPE_3 , java.io.IOException > METHOD_2 ( null ) ; } 
java.lang.String METHOD_1 ( ) { return METHOD_1 ( STRING_1 , STRING_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( ( ( id ( STRING_2 ) ) + STRING_3 ) ) ; } 
public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 . edit ( project , id ) . delete ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result patchSet = METHOD_2 ( ) ; METHOD_5 ( patchSet ) ; METHOD_6 ( patchSet , 1 ) ; } 
public void delete ( com.google.gerrit.reviewdb.client.Change change ) throws java.io.IOException { delete ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( STRING_4 , STRING_5 ) ; } 
void METHOD_1 ( int id ) ; 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . String class , VAR_3 class ) . METHOD_3 ( VAR_4 class ) ; } 
public java.lang.String METHOD_1 ( ) { java.lang.String s = VAR_1 . METHOD_1 ( ) ; return s == null ? STRING_1 : s ; } 
public void METHOD_1 ( TYPE_1 event ) { topic . METHOD_3 ( ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { return TYPE_3 . METHOD_2 ( TYPE_4 . create ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) , VAR_2 . Collections < java.lang.String , java.lang.String > METHOD_4 ( ) ) ; } 
public void run ( ) { try { synchronized ( VAR_1 ) { VAR_1 . add ( cmd ) ; } METHOD_1 ( ) ; } finally { synchronized ( VAR_1 ) { VAR_1 . METHOD_2 ( cmd ) ; } } } 
private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 ) + msg ) , args ) ; } } 
TYPE_1 create ( com.google.gerrit.reviewdb.client.Change . Id id ) ; 
public boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) ) ; } 
protected TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new TYPE_1 ( args , c . getProject ( ) , c ) . METHOD_2 ( ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { return this . METHOD_1 ( ) ; } 
public void METHOD_1 ( final java.util.List < com.google.gerrit.reviewdb.client . AccountGroup > result ) { VAR_1 . display ( result ) ; } 
void METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { for ( TYPE_1 VAR_2 : VAR_1 ) { VAR_2 . METHOD_2 ( ) ; } VAR_3 = null ; } } 
public static TYPE_1 METHOD_1 ( ) { return TYPE_1 . create ( 0 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : this . VAR_3 = revision ; return this ; default : throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( METHOD_3 ( in ) ) . isEqualTo ( query ( in ) ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 cm ) { return ( ) - > { TYPE_3 group = METHOD_2 ( cm ) ; if ( group != null ) { group . METHOD_1 ( ) ; } } ; } 
public java.util.List < TYPE_1 > get ( ) throws TYPE_2 { return METHOD_1 ( this ) ; } 
public void METHOD_1 ( final boolean VAR_1 ) { TYPE_1 . METHOD_2 ( this , false ) ; super . METHOD_1 ( VAR_1 ) ; } 
public boolean METHOD_1 ( ) { return VAR_1 . isEmpty ( ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . NameKey class , new TYPE_1 < java.util.List < com.google.gerrit.reviewdb.client.Change > > ( ) { } ) . METHOD_3 ( 0 ) . METHOD_4 ( VAR_3 class ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_1 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { try { return VAR_1 . apply ( account ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public final void update ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_1 ( VAR_1 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( VAR_2 ) == null ) { METHOD_2 ( ) ; } return VAR_2 ; } 
public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , TYPE_1 [ ] VAR_1 , TYPE_2 < org.eclipse.jgit.lib.Repository > repo ) throws java.lang.Exception { return TYPE_3 . METHOD_1 ( rw , VAR_1 , repo , ( ( org.eclipse.jgit.revwalk.RevCommit [ ] ) ( null ) ) ) ; } 
public void METHOD_1 ( java.lang.String label , short value ) { METHOD_2 ( getAccountId ( ) , label , value ) ; } 
private static TYPE_1 METHOD_1 ( final boolean VAR_1 ) { if ( VAR_1 ) { return ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( ) ) ) ; } return ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ) ) ) ; } 
public void METHOD_1 ( TYPE_1 . NameKey VAR_1 , TYPE_2 VAR_2 , com.google.gerrit.reviewdb.client.Account account ) { METHOD_1 ( VAR_1 , VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) , account ) ; } 
public final native java.lang.String project ( ) ; 
public void run ( ) { } 
TYPE_3 < ? > create ( TYPE_4 VAR_1 , TYPE_5 VAR_2 ) throws TYPE_6 . OrmException ; 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( ) ; } 
public java.lang.String getName ( ) { return METHOD_1 ( ) . getName ( VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 ctx ) throws java.lang.Exception { ctx . METHOD_2 ( edit . METHOD_3 ( ) . METHOD_4 ( ) , org.eclipse.jgit.lib.ObjectId . METHOD_5 ( ) , edit . getRefName ( ) ) ; } 
public void METHOD_1 ( TYPE_1 key , java.util.List < java.lang.String > VAR_2 ) { } 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , git , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ; return VAR_2 . to ( STRING_1 ) . getChangeId ( ) ; } 
private void METHOD_1 ( java.lang.String name , short value ) { VAR_1 . add ( TYPE_1 . create ( name , value ) . format ( ) ) ; } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , changeId , project , revision , VAR_2 ) ; } 
protected void METHOD_1 ( ) { if ( VAR_1 ) { install ( new TYPE_1 ( ) ) ; } } 
private boolean METHOD_1 ( final com.google.gerrit.reviewdb.client.Change change ) { if ( ( VAR_1 ) == null ) { return true ; } return VAR_1 . getProject ( ) . METHOD_2 ( ) . equals ( change . getProject ( ) ) ; } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , TYPE_3 VAR_1 , TYPE_2 < TYPE_3 > VAR_2 ) { TYPE_4 . revision ( id , STRING_1 ) . put ( VAR_1 , VAR_2 ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 . Id id ) { return ( VAR_1 ) + ( id . toString ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { admin = VAR_1 . create ( STRING_1 , STRING_2 ) ; VAR_2 = new TYPE_1 ( server , admin ) ; db = VAR_3 . METHOD_2 ( ) ; } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( getProject ( ) , changeId , VAR_1 , VAR_2 , VAR_3 ) ; } 
static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id id , TYPE_1 ... VAR_1 ) { TYPE_2 . METHOD_1 ( project . get ( ) , id . get ( ) , TYPE_3 . METHOD_2 ( project , id , VAR_1 ) ) ; } 
static TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , null , VAR_1 , VAR_4 , VAR_5 . Collections < TYPE_2 > METHOD_2 ( ) , 0 , 0 ) ; } 
public static void METHOD_1 ( final java.lang.String token ) { TYPE_1 . METHOD_2 ( token , false ) ; TYPE_2 . METHOD_3 ( token ) ; } 
public void METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.client.Change . Id > VAR_1 ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( VAR_1 ) , new java.util.ArrayList < java.lang.String > ( ) ) ; } 
public void onSuccess ( TYPE_1 info ) { VAR_1 = info ; } 
protected boolean METHOD_1 ( ) { return false ; } 
public org.eclipse.jgit.lib.Repository METHOD_1 ( ) throws java.io.IOException { return this . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_2 ( VAR_1 ) ) . isEmpty ( ) ; } 
public void run ( ) { VAR_1 . close ( ) ; } 
public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet VAR_1 ) { VAR_1 . METHOD_2 ( false ) ; return VAR_1 ; } 
protected void METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 ) throws java.lang.Exception { submit ( changeId , new TYPE_1 ( ) , VAR_2 class , VAR_1 ) ; } 
protected void METHOD_1 ( TYPE_2 . HttpServletResponse res , java.lang.String VAR_1 , java.lang.String VAR_2 ) { res . METHOD_2 ( VAR_2 ) ; res . METHOD_3 ( VAR_3 , ( STRING_1 + VAR_1 ) ) ; METHOD_4 ( res ) ; } 
public void onSuccess ( ) { TYPE_1 . display ( token , new TYPE_2 ( TYPE_3 . METHOD_1 ( token ) ) ) ; } 
public void display ( final java.lang.String VAR_1 ) { display ( null , null , false , VAR_1 ) ; } 
public abstract TYPE_1 METHOD_1 ( ) ; 
private TYPE_2 METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , TYPE_1 user ) throws com.google.gwtorm.server.OrmException , java.io.IOException { return VAR_2 . METHOD_2 ( VAR_3 . get ( ) , c , user ) ; } 
public void run ( ) throws java.lang.Exception { this . METHOD_2 ( ) ; } 
public final native void path ( java.lang.String p ) ; 
static void delete ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id id , TYPE_1 ... VAR_1 ) { TYPE_2 . METHOD_1 ( project . get ( ) , id . get ( ) , TYPE_3 . METHOD_2 ( VAR_1 ) ) ; } 
public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 . METHOD_1 ( id ) . get ( VAR_1 ) ; } 
protected void METHOD_1 ( final int row ) { if ( row > 0 ) { METHOD_2 ( row ) ; } TYPE_1 . METHOD_3 ( METHOD_5 ( row ) . url ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( ) . getChangeId ( ) ; java.util.List < TYPE_1 > reviewers = METHOD_3 ( changeId , name ( STRING_1 ) , INT_1 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; } 
void METHOD_1 ( final java.lang.String token ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( token ) ; TYPE_2 . METHOD_3 ( VAR_1 . label ( ) ) ; VAR_2 . put ( VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } 
public java.lang.String METHOD_1 ( ) throws java.lang.Exception { log . METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; client ( ) . METHOD_3 ( VAR_2 , VAR_1 ) ; log . METHOD_2 ( STRING_2 , VAR_1 , VAR_2 ) ; return VAR_2 ; } 
private static final native void METHOD_1 ( java.lang.String d , java.lang.String e , java.lang.String t , java.lang.String r , java.lang.String VAR_1 ) ; 
public TYPE_1 notes ( ) throws com.google.gwtorm.server.OrmException { if ( ( notes ) == null ) { notes = VAR_1 . create ( db , project ( ) , VAR_2 ) ; } return notes ; } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Change . Id , java.lang.String > METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client.Change change ) throws TYPE_3 , com.google.gwtorm.server.OrmException { return TYPE_5 . METHOD_2 ( METHOD_3 ( change ) , db . get ( ) ) ; } 
private java.lang.String METHOD_1 ( short value ) { if ( value > 0 ) { return STRING_1 + value ; } else { return TYPE_1 . toString ( value ) ; } } 
public org.eclipse.jgit.lib.ObjectId getRevision ( ) { return ( revision ) != null ? revision . METHOD_1 ( ) : null ; } 
protected abstract TYPE_1 METHOD_1 ( TYPE_3 . ProjectConfig config , TYPE_4 VAR_2 , boolean VAR_3 ) throws TYPE_5 , TYPE_6 , TYPE_7 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_8 ; 
protected TYPE_1 . Result METHOD_1 ( java.lang.String ref ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , git ) ; return VAR_1 . to ( ref ) ; } 
public static TYPE_1 < TYPE_2 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new TYPE_3 ( ) ; } return VAR_1 ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ( change . getStatus ( ) ) == ( VAR_1 ) ) && ( ! ( METHOD_2 ( db , null ) ) ) ) { return false ; } return METHOD_3 ( ) ; } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { change . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ; return change ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 p ) throws java.io.IOException { return TYPE_3 . METHOD_1 ( p ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { METHOD_2 ( METHOD_3 ( STRING_1 ) ) ; } 
public static java.lang.String METHOD_1 ( final TYPE_1 req ) { java.lang.String token = req . METHOD_2 ( ) ; if ( TYPE_2 . METHOD_3 ( token ) ) { return VAR_1 ; } return TYPE_3 . is ( CHAR_1 ) . METHOD_4 ( token ) ; } 
public void METHOD_1 ( final TYPE_1 . Id VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { return VAR_1 . METHOD_1 ( ) ; } 
TYPE_1 create ( java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > VAR_2 ) ; 
private java.lang.String group ( java.lang.String name ) throws java.io.IOException { name = name ( name ) ; TYPE_1 in = new TYPE_1 ( ) ; VAR_1 . put ( ( STRING_1 + name ) , in ) . METHOD_1 ( ) ; return name ; } 
public boolean apply ( TYPE_1 input ) { return ( input . METHOD_1 ( ) ) == null ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 type ) { return new TYPE_1 ( VAR_1 , type , null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ; } 
private TYPE_1 METHOD_1 ( ) { return VAR_1 ; } 
public void METHOD_1 ( char key ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( key ) ; } } 
public void run ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( VAR_3 ) ) ; } 
public final TYPE_1 < TYPE_2 , TYPE_3 , TYPE_4 > METHOD_1 ( ) { return VAR_1 . get ( ) ; } 
public void onSuccess ( final java.util.List < TYPE_1 > result ) { VAR_1 . display ( result ) ; if ( result . isEmpty ( ) ) { METHOD_2 ( true ) ; } } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws java.io.IOException { VAR_1 . index ( db . get ( ) , rsrc . getChange ( ) ) ; return TYPE_1 . METHOD_1 ( ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String name ) { return VAR_1 + name ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { return METHOD_3 ( VAR_1 , METHOD_4 ( VAR_1 ) ) ; } return null ; } 
private boolean METHOD_1 ( ) { VAR_1 . METHOD_3 ( STRING_1 ) ; try { VAR_2 . METHOD_2 ( ) ; return true ; } catch ( TYPE_1 e ) { VAR_1 . error ( STRING_2 , e ) ; return false ; } } 
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id ) { synchronized ( VAR_1 ) { if ( ( VAR_1 . get ( id ) . get ( ) ) == 0 ) { VAR_1 . METHOD_2 ( id ) ; } } } 
TYPE_1 . Project get ( TYPE_2 . Id id ) throws TYPE_3 . OrmException ; 
protected Project . NameKey METHOD_1 ( ) { return getChange ( ) . getProject ( ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { display ( result ) ; } } ) ; } 
public static boolean METHOD_1 ( final TYPE_1 . Id VAR_1 , final TYPE_2 . NameKey VAR_2 ) { return TYPE_5 . METHOD_1 ( VAR_1 , TYPE_4 . METHOD_2 ( ) . get ( VAR_2 ) ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String path , TYPE_2 VAR_1 , int line , java.lang.String message ) { TYPE_1 d = new TYPE_1 ( ) ; return TYPE_3 . METHOD_2 ( d , path , VAR_1 , null , line , message ) ; } 
protected void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 cfg = METHOD_2 ( VAR_1 ) ; VAR_2 = TYPE_3 . METHOD_3 ( VAR_3 , cfg , this ) ; } 
public void METHOD_1 ( TYPE_1 . ChangeInfo info ) throws java.lang.Exception { VAR_3 . apply ( METHOD_2 ( info . project , VAR_2 ) , new TYPE_2 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String ... VAR_3 ) { TYPE_3 result = VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( TYPE_4 . METHOD_4 ( VAR_3 ) , result . METHOD_5 ( ) ) ; } 
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) || ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) || ( VAR_1 . METHOD_2 ( VAR_4 ) ) ; } 
public TYPE_1 create ( ) throws TYPE_2 { TYPE_3 . METHOD_1 ( ( ( VAR_1 ) != null ) , STRING_1 ) ; return ! ( commands . isEmpty ( ) ) ? this : null ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; } 
private void METHOD_1 ( ) { TYPE_1 . display ( TYPE_2 . METHOD_2 ( changeId ) ) ; } 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String name ) { if ( STRING_1 . equals ( VAR_1 ) ) { return name ; } return ( VAR_1 + STRING_2 ) + name ; } 
private void METHOD_1 ( ) { try { METHOD_2 ( VAR_1 ) ; } catch ( java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_1 ) ; } this . VAR_1 = VAR_1 ; } 
private void METHOD_1 ( ) throws TYPE_2 { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( ) ; } } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . ChangeInfo c = event . getChange ( ) ; METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( c . project ) , VAR_1 ) ; } 
private TYPE_1 query ( ) { java.util.Set < java.lang.String > VAR_1 = TYPE_2 . of ( TYPE_3 . getName ( ) , TYPE_4 . getName ( ) ) ; return VAR_2 . get ( ) . METHOD_1 ( VAR_1 ) ; } 
private boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( VAR_2 ) ; } return VAR_1 ; } 
void METHOD_1 ( TYPE_1 e ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 ( VAR_2 , project . get ( ) , branch , topic , key ) ; } VAR_1 . METHOD_2 ( ) ; } 
public boolean METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ; } 
private boolean METHOD_1 ( ) { return TYPE_1 . info ( ) . auth ( ) . METHOD_3 ( VAR_1 ) ; } 
public static TYPE_1 change ( int id ) { return new TYPE_1 ( STRING_1 ) . id ( java.lang.String . METHOD_1 ( id ) ) ; } 
public void run ( ) throws java.lang.Exception { METHOD_4 ( ) ; METHOD_5 ( ) ; } 
protected void METHOD_1 ( final TYPE_1 result ) { VAR_1 . METHOD_2 ( true ) ; this . METHOD_1 ( result , this ) ; } 
public TYPE_1 . Result METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException , java.io.IOException { return METHOD_1 ( db , changeId , true ) ; } 
public void METHOD_1 ( final TYPE_1 event ) { if ( TYPE_2 . METHOD_2 ( ) ) { TYPE_2 . display ( VAR_1 ) ; } else { TYPE_2 . display ( VAR_2 ) ; } } 
com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet t ) { return factory . create ( db . get ( ) , t . getId ( ) . getParentKey ( ) ) ; } 
public void METHOD_1 ( ) { org.junit.Assert . METHOD_2 ( STRING_1 , new TYPE_1 ( ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 req , TYPE_3 . HttpServletResponse res ) throws java.io.IOException { METHOD_2 ( res , VAR_1 ) ; return res . METHOD_3 ( ) ; } 
protected TYPE_1 METHOD_1 ( ) { return VAR_1 . set ( VAR_1 . METHOD_2 ( VAR_2 , null , VAR_3 . get ( ) ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_1 = ( VAR_2 == null ) ? VAR_1 : new TYPE_3 ( VAR_1 , VAR_3 , VAR_2 . user ) ; return VAR_1 ; } 
public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( STRING_1 + key ) ) ; return new TYPE_1 ( key , VAR_2 , project , branch , VAR_3 ) ; } 
public Change . Id apply ( com.google.gerrit.server.query.change.ChangeData cd ) { return cd . getId ( ) ; } 
boolean get ( org.eclipse.jgit.lib.ObjectId commit , TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , TYPE_3 . NameKey VAR_4 , org.eclipse.jgit.lib.Repository repo ) ; 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; METHOD_2 ( VAR_1 . get ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = VAR_1 . create ( db , admin . METHOD_2 ( ) , git ) . to ( STRING_1 ) ; r . METHOD_3 ( ) ; METHOD_4 ( r . METHOD_5 ( ) ) ; } 
public synchronized TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( name , VAR_1 ) ; METHOD_3 ( name , VAR_1 ) ; return METHOD_4 ( name , VAR_1 . METHOD_5 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String message ) { return new TYPE_1 ( false , message ) ; } 
public TYPE_1 patch ( ) throws TYPE_2 { try { return VAR_1 . apply ( revision ) ; } catch ( java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public void set ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 in ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException , java.io.IOException { return VAR_1 . apply ( rsrc , path ) ; } 
void METHOD_1 ( boolean value , java.lang.String message ) throws TYPE_1 ; 
public TYPE_1 apply ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { return VAR_1 . get ( ) . format ( rsrc . METHOD_1 ( ) ) ; } 
public void METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { } 
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( TYPE_1 < ? , TYPE_2 > i : METHOD_1 ( ) ) { i . METHOD_2 ( VAR_2 . get ( id ) ) ; } } 
private TYPE_1 METHOD_1 ( ) { return notes ; } 
public TYPE_1 create ( TYPE_2 VAR_1 , java.lang.String id ) throws TYPE_3 { return new TYPE_1 ( VAR_2 , TYPE_4 . METHOD_1 ( id ) , true ) ; } 
public abstract TYPE_1 run ( TYPE_2 VAR_1 , TYPE_3 < TYPE_2 > VAR_2 ) throws TYPE_4 ; 
public final native java.lang.String url ( ) ; 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 { return new TYPE_1 ( VAR_1 . getProject ( ) , VAR_1 . METHOD_2 ( ) , id . get ( ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 . ProjectConfig config , com.google.gerrit.reviewdb.client . AccountGroup group ) { return new TYPE_1 ( config . METHOD_2 ( group ) ) ; } 
TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk ) { this . walk = walk ; return this ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . add ( this , VAR_2 ) ; VAR_3 = TYPE_1 . add ( this , VAR_4 ) ; } 
public void onSuccess ( TYPE_1 result ) { TYPE_2 p = new TYPE_2 ( ) ; result . METHOD_2 ( p ) ; TYPE_3 . METHOD_3 ( p ) ; } 
public java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { return TYPE_2 . METHOD_2 ( METHOD_3 ( ) . values ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( name ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } 
public java.lang.String getName ( ) { return name ; } 
protected TYPE_1 METHOD_1 ( ) { return user ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) { return new TYPE_4 ( VAR_1 ) ; } 
boolean METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_1 ( VAR_1 , false ) ; } 
private static boolean METHOD_1 ( final java.lang.String a , final java.lang.String b ) { if ( ( a == null ) && ( b == null ) ) { return true ; } return ( a != null ) && ( a . equals ( b ) ) ; } 
private com.google.gerrit.reviewdb.client.Change getChange ( ) { return notes . getChange ( ) ; } 
private java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 . get ( ) , c ) ; return VAR_1 . changes ( ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( final TYPE_1 . Project p ) { if ( p != null ) { VAR_1 . METHOD_2 ( p . METHOD_3 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 user = VAR_1 . get ( ) ; if ( user instanceof TYPE_3 ) { return ( ( TYPE_3 ) ( user ) ) . getAccountId ( ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( false ) ; } } 
protected TYPE_1 METHOD_2 ( TYPE_2 < TYPE_3 > repo ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , null , null ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; } } 
private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( projectName ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { VAR_2 . METHOD_1 ( VAR_1 . getName ( ) ) ; } } 
private static int METHOD_1 ( ) { return ++ ( VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( ) { return VAR_1 ; } 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; } 
public void METHOD_1 ( final java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 ) { format = VAR_2 ; return display ( null ) ; } 
public void METHOD_1 ( final TYPE_1 event ) { if ( ( event . METHOD_2 ( ) ) == ( VAR_1 ) ) { event . METHOD_4 ( ) ; VAR_2 . submit ( ) ; } } 
public Change . Id getId ( ) { return change.getId ( ) ; } 
public static java.lang.String METHOD_1 ( final TYPE_1 . NameKey n , final java.lang.String VAR_1 ) { return ( ( STRING_1 + ( n . toString ( ) ) ) + STRING_2 ) + VAR_1 ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws TYPE_2 { return VAR_3 . get ( getKey ( VAR_1 , VAR_2 ) , project ) . METHOD_1 ( ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( false , false , false ) ; VAR_1 . METHOD_3 ( false ) ; super . METHOD_1 ( ) ; METHOD_4 ( ) ; } 
public java.lang.String METHOD_1 ( int i ) { return ( VAR_2 . length ) > i ? VAR_2 [ i ] : STRING_1 ; } 
private native void METHOD_1 ( java.lang.String i , TYPE_1 e , java.lang.String n ) ; 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change . getStatus ( ) . METHOD_1 ( ) ) { change . METHOD_2 ( VAR_1 ) ; change . METHOD_3 ( VAR_2 ) ; return change ; } return null ; } 
boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = ( METHOD_2 ( ) . METHOD_3 ( ) ) || ( METHOD_4 ( VAR_2 ) ) ; } return VAR_1 ; } 
public void onSuccess ( ) { TYPE_1 . display ( token , ( edit ? new TYPE_2 ( id , line ) : new TYPE_3 ( VAR_1 , id . getParentKey ( ) , id . get ( ) , VAR_2 , line ) ) ) ; } 
public void put ( com.google.gerrit.reviewdb.client.Account.Id id , TYPE_2 VAR_1 ) { VAR_2 . put ( id , METHOD_3 ( TYPE_3 . METHOD_1 ( VAR_1 ) ) ) ; } 
private java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( VAR_2 , null , VAR_3 ) ; } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( TYPE_1 project ) throws java.io.IOException , TYPE_2 { return VAR_1 . METHOD_1 ( project . METHOD_2 ( ) ) ; } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_4 . base ( project ) . view ( STRING_1 ) . METHOD_2 ( STRING_2 ) . get ( VAR_1 ) ; } 
private boolean METHOD_1 ( ) { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ) || ( METHOD_5 ( ) ) ; } 
public void onSuccess ( final java.util.List < TYPE_1 . Project > result ) { VAR_1 . display ( result ) ; if ( VAR_2 ) { VAR_2 = false ; METHOD_2 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( patchSet . getId ( ) , METHOD_4 ( ) , METHOD_5 ( ) ) ; } 
public TYPE_1 < TYPE_2 > apply ( java.util.List < ? > input ) { VAR_4 . METHOD_2 ( ) ; return TYPE_4 . METHOD_3 ( null ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ) . to ( VAR_2 class ) ; METHOD_2 ( ) . to ( VAR_3 class ) ; METHOD_2 ( ) . to ( VAR_4 class ) ; } 
public void METHOD_1 ( int size ) { if ( ( VAR_2 ) != null ) VAR_3 = size ; else VAR_2 = new TYPE_2 ( size ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( in , METHOD_3 ( in ) ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 a , TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ps , TYPE_3 VAR_2 ) { METHOD_1 ( db , a , ps , null , false , null , VAR_2 ) ; } 
public java.lang.String getRefName ( ) { return null ; } 
public void METHOD_1 ( ) { synchronized ( this ) { final TYPE_1 VAR_1 = TYPE_2 . set ( VAR_2 ) ; try { METHOD_2 ( VAR_3 ) ; } finally { TYPE_2 . set ( VAR_1 ) ; } } } 
private void METHOD_1 ( TYPE_1 c ) throws com.google.gwtorm.server.OrmException { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( c ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 , null , VAR_3 . METHOD_3 ( ) ) ; } 
com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change t ) { return factory . create ( db . get ( ) , t ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( false ) ; VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_1 ( ) ; } 
public void METHOD_1 ( final TYPE_1 event ) { METHOD_2 ( null ) ; } 
public TYPE_1 METHOD_1 ( ) { return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 . index ( VAR_2 ) ) . METHOD_3 ( true ) ; METHOD_4 ( ) ; VAR_3 . METHOD_5 ( id . get ( ) ) ; METHOD_6 ( ) ; } 
private static void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < ? > c = TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_1 = c . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( c , false ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { try { VAR_3 . apply ( VAR_4 , VAR_1 , VAR_2 ) ; } catch ( java.lang.Exception e ) { throw TYPE_3 . METHOD_3 ( STRING_1 , e ) ; } } 
public void onSuccess ( ) { TYPE_1 . display ( token , new TYPE_3 ( VAR_1 , id . getParentKey ( ) , id . get ( ) , VAR_2 , line ) ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) throws TYPE_3 { return VAR_1 . get ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 , new TYPE_2 ( VAR_2 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_3 ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 class ) ; } 
public int getChangeId ( ) { return changeId . get ( ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { TYPE_3 out = new TYPE_3 ( ) ; VAR_1 . METHOD_2 ( out , VAR_2 ) ; return out . toString ( TYPE_4 . name ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { synchronized ( VAR_1 class ) { VAR_2 = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( STRING_1 ) ) ; format = new TYPE_2 ( STRING_2 ) ; } } 
public void METHOD_1 ( final TYPE_1 type ) { VAR_1 = type ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( ) . getChangeId ( ) ; java.util.List < TYPE_1 > reviewers = METHOD_3 ( changeId , STRING_1 , INT_1 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; } 
public TYPE_1 create ( int index ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , value , VAR_2 . METHOD_2 ( ) ) ; VAR_4 . insert ( VAR_1 , index ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { walk . close ( ) ; } 
public TYPE_1 get ( ) { return account != null ? VAR_1 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Account.Id ( VAR_2 ) ) : null ; } 
private TYPE_1 METHOD_1 ( TYPE_2 account ) { return VAR_1 . METHOD_2 ( VAR_2 , new TYPE_3 ( server , account ) , VAR_3 . create ( account . getId ( ) ) ) ; } 
private TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , TYPE_2 > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) { return TYPE_2 . METHOD_1 ( cd . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; org.junit.Assert.assertEquals ( 1 , TYPE_1 . METHOD_2 ( VAR_3 . format ( null , null , null , null , cfg , VAR_1 ) , VAR_2 ) ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { METHOD_4 ( VAR_2 , VAR_3 , STRING_1 ) ; } 
protected void METHOD_1 ( final java.util.List < TYPE_1 . Project > result ) { projects . display ( result ) ; projects . METHOD_2 ( ) ; } 
public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( null , 0 , true ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , com.google.gerrit.server.query.change.ChangeData cd ) { return METHOD_1 ( VAR_1 , VAR_2 , null , cd ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String project , java.lang.String input ) { return input . METHOD_1 ( STRING_1 , project ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_2 . Factory class ) ; } 
public < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > METHOD_1 ( TYPE_4 < TYPE_1 , TYPE_2 > VAR_1 ) { return create ( VAR_1 , false ) . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 class ) ; com.google.gerrit.extensions.registration.DynamicSet < TYPE_1 > VAR_3 = com.google.gerrit.extensions.registration.DynamicSet . METHOD_3 ( ) ; VAR_3 . add ( VAR_1 ) ; VAR_4 = new TYPE_2 ( null , VAR_3 , null , null , null ) ; } 
TYPE_1 METHOD_1 ( ) { return ( ) - > { METHOD_2 ( ( ! ( METHOD_3 ( ) ) ) ) ; } ; } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change . getStatus ( ) ) == ( VAR_1 ) ) { change . METHOD_1 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( change ) ; } return change ; } 
public TYPE_1 reviewers ( ) throws com.google.gwtorm.server.OrmException { if ( ( reviewers ) == null ) { reviewers = VAR_1 . METHOD_1 ( notes ( ) , approvals ( ) . values ( ) ) ; } return reviewers ; } 
public void METHOD_1 ( byte [ ] VAR_1 ) { METHOD_1 ( VAR_1 , 0 , VAR_1 . length ) ; } 
public com.google.gerrit.server.query.change.ChangeData getChange ( ) throws com.google.gwtorm.server.OrmException { return TYPE_1 . METHOD_1 ( VAR_1 . get ( ) . METHOD_2 ( changeId ) ) ; } 
java.lang.String plugins ( ) ; 
public void run ( ) { int w = cm . METHOD_1 ( ) . METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( w , VAR_1 ) ; } 
private static TYPE_2 METHOD_1 ( final TYPE_1 m , final java.lang.String VAR_1 , final java.lang.String VAR_2 ) { TYPE_2 i = new TYPE_2 ( VAR_1 , VAR_2 ) ; m . METHOD_2 ( i ) ; return i ; } 
public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_2 ( TYPE_4 . create ( ) , VAR_1 ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , git , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ; return VAR_2 . METHOD_2 ( STRING_1 ) . getChangeId ( ) ; } 
public void close ( ) { } 
public boolean METHOD_1 ( ) { return METHOD_1 ( VAR_1 . Collections < java.lang.String > METHOD_3 ( ) ) ; } 
public TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client.Change . Id id ) throws TYPE_3 , com.google.gwtorm.server.OrmException { return TYPE_5 . METHOD_2 ( METHOD_3 ( id ) , db . get ( ) ) ; } 
TYPE_1 create ( TYPE_2 project ) ; 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 != null ) { try { return TYPE_1 . METHOD_1 ( VAR_1 , STRING_1 ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( STRING_2 , e ) ; } } return null ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( true ) ; VAR_3 . METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; } 
private TYPE_1 auth ( final TYPE_2 . Account account ) { if ( account != null ) { return new TYPE_1 ( account . getId ( ) , null , false ) ; } return null ; } 
public synchronized TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( ( ( VAR_1 ) == null ) , STRING_1 ) ; if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( VAR_3 ) ; } return VAR_2 ; } 
public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; } 
private boolean METHOD_1 ( ) { return new TYPE_3 ( ) . METHOD_3 ( config ) . isEmpty ( ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( project ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( cfg , VAR_3 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) ; METHOD_6 ( project , cfg ) ; } 
private java.lang.String METHOD_1 ( ) { return VAR_2 . METHOD_2 ( VAR_3 , null , VAR_4 ) ; } 
void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; VAR_1 . METHOD_2 ( ) ; cm . METHOD_3 ( ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( ( token ) == null ) { return null ; } return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; } 
private static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > commit ( java.lang.String id ) { return new TYPE_3 ( id ) ; } 
public org.eclipse.jgit.revwalk.RevCommit commit ( TYPE_1 update ) throws java.io.IOException { try ( TYPE_2 VAR_1 = METHOD_1 ( update ) ) { VAR_1 . METHOD_2 ( update . METHOD_3 ( ) ) ; return VAR_1 . commit ( ) ; } } 
TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id id ) ; 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , STRING_1 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( ) ; } 
private TYPE_1 < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { return VAR_2 . get ( VAR_1 ) . METHOD_3 ( TYPE_2 : : METHOD_1 ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( java.lang.String changeId ) { java.lang.String VAR_1 = getChange ( ) . getKey ( ) . get ( ) ; TYPE_1 . METHOD_2 ( VAR_1 . equals ( changeId ) , STRING_1 , VAR_1 , changeId ) ; this . changeId = changeId ; } 
public boolean METHOD_1 ( ) { return false ; } 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { return VAR_1 . insert ( new TYPE_2 ( ) ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( VAR_1 ) ; } 
TYPE_1 create ( TYPE_2 . NameKey VAR_1 , org.eclipse.jgit.revwalk.RevCommit VAR_2 , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.Repository db , com.google.gerrit.reviewdb.client.Project VAR_3 , java.util.List < com.google.gerrit.reviewdb.client.Change > VAR_4 , java.util.Map < com.google.gerrit.reviewdb.client.Change . Id , TYPE_3 > VAR_5 , com.google.gerrit.reviewdb.client.Account account ) ; 
public TYPE_1 . Result METHOD_1 ( TYPE_2 edit , java.lang.String file ) throws TYPE_3 , TYPE_4 , java.io.IOException { return METHOD_2 ( VAR_1 , edit , file , null , null ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; } 
private static java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 . ChangeInfo change ) { return new TYPE_2 ( change . METHOD_2 ( ) ) ; } 
public java.lang.String getRefName ( ) { return TYPE_1 . METHOD_1 ( change . get ( ) . branch ) ; } 
public java.lang.String METHOD_1 ( java.lang.String name ) { java.lang.String VAR_1 = VAR_2 . get ( name ) ; if ( VAR_1 != null ) { return VAR_1 ; } return super . METHOD_1 ( name ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { return TYPE_2 . METHOD_2 ( METHOD_3 ( VAR_1 ) , TYPE_3 . METHOD_4 ( VAR_1 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) throws java.lang.Exception { METHOD_1 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 u = user . get ( ) ; if ( u . METHOD_2 ( ) ) { return u . METHOD_3 ( ) . METHOD_1 ( ) ; } return VAR_1 . get ( ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > refs , org.eclipse.jgit.lib.Repository repo , TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_2 . create ( this ) . METHOD_1 ( refs , repo , VAR_1 ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } 
public void METHOD_1 ( final java.lang.String VAR_1 ) { revision = VAR_1 ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( METHOD_2 ( db ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ; } 
public static java.lang.String METHOD_1 ( final TYPE_1 . Id VAR_1 ) { return STRING_1 + ( VAR_1 . toString ( ) ) ; } 
public static java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { final byte [ ] VAR_1 = new byte [ INT_1 ] ; TYPE_3 . METHOD_2 ( VAR_1 , db ) ; return TYPE_4 . METHOD_3 ( VAR_1 ) ; } 
public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . get ( VAR_2 ) ; } 
public static TYPE_1 query ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_1 ( TYPE_3 , TYPE_4 , TYPE_5 ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( METHOD_2 ( db ) ) && ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } } 
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_2 . get ( getAccountId ( ) ) ; } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1 . apply ( revision , in ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 update = METHOD_2 ( METHOD_3 ( ) , VAR_1 ) ; update . METHOD_4 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( update . commit ( ) ) . METHOD_5 ( ) ; } 
public boolean apply ( com.google.gerrit.reviewdb.client . PatchSetApproval input ) { return user . equals ( input . getAccountId ( ) ) ; } 
TYPE_2 . Account METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_3 . OrmException ; 
protected abstract boolean METHOD_1 ( ) ; 
private static boolean METHOD_1 ( TYPE_1 id ) { return STRING_2 . METHOD_2 ( id . get ( ) ) ; } 
public TYPE_1 base ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { if ( id != null ) { VAR_1 . METHOD_1 ( STRING_1 , id . get ( ) ) ; } return this ; } 
void METHOD_1 ( TYPE_1 b ) { VAR_1 = b ; VAR_2 . METHOD_2 ( row , VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { new TYPE_1 ( ) . inject ( this ) ; } 
public void onSuccess ( java.lang.String result ) { TYPE_1 . display ( TYPE_2 . METHOD_1 ( project , psId ) ) ; } 
public java.lang.String getName ( ) { return METHOD_1 ( ) . getName ( ) ; } 
public boolean METHOD_1 ( ) { return ( METHOD_2 ( VAR_1 ) ) || ( user . METHOD_4 ( ) . METHOD_5 ( ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; display ( ) ; METHOD_2 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 ) ; TYPE_1 . METHOD_2 ( STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 ) ; } 
public void onSuccess ( TYPE_1 result ) { VAR_1 . display ( result , VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; } 
private void METHOD_1 ( ) { new TYPE_1 ( ) ; new TYPE_2 ( ) ; new TYPE_3 ( ) ; new TYPE_5 ( ) ; } 
TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String token ) throws TYPE_2 { return METHOD_1 ( VAR_1 , new TYPE_3 < java.lang.String , TYPE_4 > ( ) , token ) ; } 
protected static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_2 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; } 
public void METHOD_1 ( final java.lang.String VAR_1 ) { project = VAR_1 ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; factory ( VAR_2 class ) ; bind ( VAR_4 . Factory class ) ; } 
public void onSuccess ( TYPE_1 . ChangeInfo result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , id ) ) ; METHOD_2 ( ) ; } 
protected static java.lang.String METHOD_1 ( TYPE_1 user ) { if ( user . METHOD_2 ( ) ) { return user . getAccountId ( ) . toString ( ) ; } return user . toString ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( in ) . isEqualTo ( METHOD_3 ( in ) ) ; } 
public void onSuccess ( ) { TYPE_1 . display ( token , ( edit ? new TYPE_2 ( VAR_1 , id , line ) : new TYPE_3 ( VAR_1 , id . getParentKey ( ) , id . get ( ) , VAR_2 , line ) ) ) ; } 
private void METHOD_1 ( java.lang.String msg ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 ) + msg ) ) ; } } 
public static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id ) { return TYPE_2 . METHOD_2 ( VAR_1 , id . get ( ) ) ; } 
TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } 
public void run ( ) { for ( ; ; ) { try { if ( VAR_1 . METHOD_1 ( VAR_2 , VAR_3 ) ) { return ; } } catch ( TYPE_1 e ) { } VAR_4 . METHOD_2 ( ) ; } } 
public void METHOD_1 ( ) { file . METHOD_2 ( true ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( null ) ; VAR_1 . METHOD_3 ( CHAR_1 ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( STRING_2 ) ) ; } 
public int METHOD_1 ( ) { return 1 ; } 
protected boolean METHOD_1 ( ) { return VAR_1 ; } 
protected com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( TYPE_1 ctx ) throws java.lang.Exception { return null ; } 
public void METHOD_1 ( final java.lang.String message ) { } 
protected void submit ( java.lang.String changeId , TYPE_1 input ) throws java.lang.Exception { submit ( changeId , input , null , null ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { VAR_2 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( change , VAR_3 ) ; return null ; } 
private static java.lang.String METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 ) throws java.io.IOException { try ( TYPE_1 VAR_2 = repo . METHOD_2 ( ) ) { return VAR_2 . METHOD_3 ( VAR_1 ) . name ( ) ; } } 
public void METHOD_1 ( TYPE_1 in ) throws TYPE_2 { try { VAR_1 . apply ( revision , in ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_3 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public TYPE_1 < TYPE_2 . ReviewDb > get ( ) { return VAR_1 . get ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = ( TYPE_2 . METHOD_2 ( VAR_1 ) ) - 1 ; i >= 0 ; i -- ) { VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , i ) ) ; } } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.reviewdb.client.PatchSet patchSet , java.lang.String VAR_1 , com.google.gerrit.reviewdb.server.ReviewDb db ) { } 
void METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_3 , true ) ; input . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ; input . METHOD_5 ( true ) ; } } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = cd . change ( ) ; return ( change != null ) && ( ( change . METHOD_2 ( ) . METHOD_3 ( getValue ( ) ) ) > 0 ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( STRING_1 ) . name ) . isEqualTo ( VAR_1 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = cd . change ( ) ; return ( change != null ) && ( ( change . METHOD_2 ( ) . METHOD_3 ( getValue ( ) ) ) < 0 ) ; } 
public int METHOD_1 ( ) { return 0 ; } 
protected < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > get ( TYPE_4 < TYPE_5 < TYPE_1 > > VAR_1 ) { return new TYPE_3 ( view ( VAR_1 , VAR_2 , STRING_1 ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( ( METHOD_2 ( ) ) || ( METHOD_3 ( db , cd ) ) ) || ( METHOD_4 ( ) . METHOD_5 ( ) ) ; } 
public void info ( java.lang.String msg ) { VAR_1 . METHOD_2 ( msg ) ; VAR_1 . METHOD_3 ( ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { if ( VAR_1 == ( VAR_2 . METHOD_2 ( ) ) ) { return VAR_3 . METHOD_1 ( ) ; } return VAR_4 . METHOD_1 ( ) ; } 
public void onSuccess ( final TYPE_1 result ) { VAR_1 . display ( result , VAR_2 ) ; if ( VAR_3 ) { VAR_3 = false ; METHOD_1 ( ) ; } } 
void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( ) ; } 
public void onSuccess ( final TYPE_1 result ) { if ( ( ++ ( VAR_1 ) ) == ( VAR_2 . size ( ) ) ) { METHOD_1 ( submit ) ; } } 
public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( final TYPE_2 < TYPE_1 > ... VAR_1 ) { if ( ( VAR_1 . length ) == 1 ) { return VAR_1 [ 0 ] ; } return new TYPE_3 ( VAR_1 ) ; } 
void METHOD_1 ( int row ) { if ( row > 2 ) { METHOD_2 ( ( row - 1 ) , row ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change . getStatus ( ) ) == ( VAR_1 ) ) { change . METHOD_1 ( VAR_2 ) ; TYPE_2 . METHOD_2 ( change ) ; } return change ; } 
public void METHOD_1 ( TYPE_1 req , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( req , VAR_1 ) ; if ( ( query ) == null ) { query = VAR_2 ; VAR_2 . METHOD_2 ( ) ; } else { query = VAR_2 ; } } 
private void METHOD_1 ( ) throws java.io.IOException { VAR_1 = TYPE_1 . METHOD_2 ( projectName , METHOD_3 ( VAR_2 ) , this ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( in , 0 , VAR_2 ) ) . isEqualTo ( query ( in ) ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 a , TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ps , TYPE_3 VAR_1 ) { METHOD_1 ( db , a , ps , null , false , null , VAR_1 ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String project , int changeId , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , changeId ) . view ( STRING_1 ) . id ( VAR_1 ) ; } 
public TYPE_1 create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , id , null ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 in = new TYPE_1 ( ) ; in . branch = STRING_1 ; VAR_1 = STRING_2 ; in . project = project . get ( ) ; return in ; } 
java.lang.String METHOD_1 ( int size ) throws TYPE_1 ; 
public java.lang.String METHOD_1 ( java.lang.String project ) { return STRING_1 + project ; } 
public final native void METHOD_1 ( java.lang.String token ) ; 
public void METHOD_1 ( int index ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( index ) ; } } 
private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) . METHOD_3 ( true ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String message ) { this . message = message ; return this ; } 
public void METHOD_1 ( TYPE_1 event ) { METHOD_4 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( event . METHOD_3 ( ) ) , event . METHOD_5 ( ) ) ; } 
boolean contains ( int VAR_1 ) ; 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 ; } 
public TYPE_1 diff ( ) throws TYPE_2 { try { return VAR_1 . apply ( file ) . value ( ) ; } catch ( java.io.IOException | TYPE_3 | com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
protected void METHOD_1 ( java.lang.String msg , TYPE_1 t ) { if ( ( ( VAR_1 ) != null ) && ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ( ( VAR_1 ) + msg ) , t ) ; } } 
public void onSuccess ( TYPE_1 . ChangeInfo info ) { info . METHOD_1 ( ) ; METHOD_2 ( info , base ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( STRING_1 , project , VAR_1 , revision , VAR_2 , null , 0 ) ; } 
protected void METHOD_1 ( final TYPE_1 result ) { projects . display ( result . METHOD_4 ( ) ) ; projects . METHOD_5 ( ) ; } 
public void close ( ) { VAR_1 . close ( ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( TYPE_2 . METHOD_3 ( VAR_2 ) ) || ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ; } 
public void onSuccess ( TYPE_1 result ) { if ( VAR_1 . METHOD_1 ( ) ) { TYPE_2 . display ( TYPE_3 . METHOD_2 ( VAR_1 . getProject ( ) , changeId ) ) ; } } 
public void METHOD_1 ( TYPE_1 ctx ) { if ( ( change ) != null ) { VAR_1 . METHOD_2 ( change , ctx . METHOD_5 ( ) , VAR_2 , ctx . METHOD_6 ( ) ) ; } } 
TYPE_2 < TYPE_3 , ? > delete ( TYPE_3 VAR_1 , TYPE_4 id ) throws TYPE_5 ; 
public void onSuccess ( TYPE_1 . ChangeInfo info ) { info . METHOD_1 ( ) ; METHOD_3 ( info , base ) ; } 
private void METHOD_1 ( ) { new TYPE_1 ( ) ; new TYPE_2 ( ) ; new TYPE_3 ( ) ; new TYPE_5 ( ) ; new TYPE_4 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( TYPE_3 . of ( new TYPE_4 ( VAR_1 ) , new TYPE_5 ( VAR_1 , VAR_2 ) , new TYPE_6 ( VAR_1 , VAR_2 ) ) ) ; } 
void METHOD_1 ( TYPE_1 e ) { if ( TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ) { TYPE_4 . delete ( project , changeId , VAR_1 ) ; } } 
public boolean METHOD_1 ( TYPE_1 ctx ) throws java.lang.Exception { return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( query ( METHOD_2 ( STRING_2 ) ) , VAR_1 . METHOD_3 ( in ) ) ; } 
static boolean METHOD_1 ( TYPE_1 args , org.eclipse.jgit.lib.Repository repo , TYPE_2 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { return ( ! ( VAR_3 . METHOD_2 ( VAR_4 , VAR_2 ) ) ) && ( VAR_3 . METHOD_3 ( VAR_4 , repo , VAR_1 , VAR_2 ) ) ; } 
public static TYPE_1 create ( TYPE_1 . Key key , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , java.lang.String email , java.lang.String VAR_2 ) { return TYPE_1 . create ( key , VAR_1 , TYPE_3 . METHOD_1 ( email ) , TYPE_3 . METHOD_1 ( VAR_2 ) , null ) ; } 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { final java.lang.String VAR_2 = VAR_1 . getMessage ( ) ; if ( VAR_2 != null ) { return VAR_2 . METHOD_2 ( ) ; } } return STRING_1 ; } 
protected final void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( this . VAR_2 ) + msg ) , args ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = cd . METHOD_2 ( ) ; return ! ( VAR_1 . isEmpty ( ) ) ? VAR_1 . contains ( id ) : id . equals ( VAR_2 ) ; } 
public static TYPE_1 info ( ) { return VAR_1 ; } 
private void METHOD_1 ( TYPE_1 id ) { synchronized ( VAR_1 ) { if ( ( VAR_1 . get ( id ) . get ( ) ) == 0 ) { VAR_1 . METHOD_2 ( id ) ; } } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 . METHOD_2 ( TYPE_5 . getName ( ) ) . METHOD_3 ( ) ) ; return VAR_3 . get ( ) . get ( VAR_2 ) ; } 
public void put ( final TYPE_1 VAR_1 , final TYPE_2 c ) { VAR_2 . put ( VAR_1 , c ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 . Key key ) throws java.io.IOException { return TYPE_2 . METHOD_2 ( key ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 admin = VAR_1 . create ( STRING_1 , STRING_2 ) ; VAR_2 = new TYPE_2 ( server , admin ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_2 . METHOD_2 ( db , notes ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; METHOD_2 ( ) . to ( VAR_2 class ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_2 ( VAR_1 , VAR_3 ) ; } 
public final TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_1 ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) throws java.io.IOException { if ( VAR_1 != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; index ( VAR_1 ) ; } } 
public void assertEquals ( java.lang.String VAR_1 ) { VAR_2 . METHOD_1 ( ) ; org.junit.Assert.assertEquals ( VAR_3 . toString ( ) , VAR_1 ) ; } 
void METHOD_1 ( java.lang.String changeId ) throws TYPE_1 ; 
public void onSuccess ( final java.util.List < TYPE_1 . ChangeInfo > result ) { VAR_1 . display ( result ) ; table . METHOD_1 ( true ) ; } 
TYPE_1 . Account get ( TYPE_2 . Id key ) throws TYPE_3 . OrmException ; 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_2 ( null ) ) . isEmpty ( ) ; } 
private void METHOD_1 ( TYPE_1 . Result r , java.lang.String message ) throws java.lang.Exception { METHOD_1 ( r , message , false , false ) ; } 
public boolean METHOD_1 ( ) { return false ; } 
private void METHOD_1 ( java.lang.String path ) { METHOD_2 ( ) ; TYPE_1 . display ( TYPE_2 . METHOD_3 ( project , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , revision . METHOD_4 ( ) ) , path ) ) ; } 
public boolean apply ( TYPE_1 input ) { return ( input . change ) != null ; } 
private PatchSet . Id METHOD_1 ( TYPE_1 c ) throws com.google.gwtorm.server.OrmException { return getChange ( c ) . change ( ) . currentPatchSetId ( ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 key ) throws java.lang.Exception { final org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ; try { return METHOD_3 ( key , repo ) ; } finally { repo . close ( ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 account ) { return VAR_1 . METHOD_2 ( VAR_2 , new TYPE_3 ( server , account ) , VAR_3 . create ( TYPE_4 . of ( db ) , account . getId ( ) ) ) ; } 
void METHOD_1 ( ) { this . VAR_1 = false ; METHOD_2 ( ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( new TYPE_1 ( ) ) ; bind ( VAR_3 class ) . METHOD_3 ( VAR_4 ) ; bind ( VAR_5 class ) ; } 
protected final TYPE_1 METHOD_1 ( TYPE_2 type ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_1 = new TYPE_3 ( args , branch . getParentKey ( ) , VAR_2 , VAR_3 ) ; return VAR_1 . METHOD_1 ( type ) ; } 
private void METHOD_1 ( final TYPE_1 m ) { m . METHOD_2 ( ) ; m . METHOD_3 ( STRING_1 , STRING_2 ) ; m . METHOD_4 ( ) ; m . METHOD_5 ( VAR_1 ) ; m . METHOD_7 ( ) ; } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 , TYPE_4 , java.io.IOException { return VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , rsrc . METHOD_4 ( ) , null ) ; } 
public void METHOD_1 ( ) { assert ( VAR_1 ) != null ; assert ( VAR_2 ) != null ; VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; } 
private java.lang.String METHOD_1 ( ) { if ( getName ( ) . METHOD_3 ( TYPE_1 ) ) { return getName ( ) . METHOD_4 ( TYPE_1 . length ( ) ) ; } return getName ( ) ; } 
TYPE_1 create ( TYPE_2 change , com.google.gerrit.reviewdb.client.Account.Id id ) ; 
private void METHOD_1 ( TYPE_1 cm , int VAR_1 , int VAR_2 ) { METHOD_2 ( cm , VAR_3 . METHOD_3 ( ) , ( VAR_1 - 1 ) , VAR_2 , VAR_4 , null ) ; } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) { return TYPE_1 . METHOD_2 ( VAR_2 , changeId . get ( ) ) . toString ( ) ; } 
public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_2 ) ) ; } 
TYPE_1 sql ( ) ; 
public TYPE_1 . Result METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException , java.io.IOException { return METHOD_2 ( db , changeId , false ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) , STRING_1 , VAR_1 , this ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return new TYPE_1 ( args , change ) . METHOD_2 ( ) ; } 
public final native void METHOD_1 ( java.lang.String path ) ; 
public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return null ; } return VAR_4 . get ( getProject ( ) . METHOD_2 ( VAR_3 ) ) ; } 
public TYPE_1 create ( TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Account.Id id ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , TYPE_3 . of ( VAR_1 ) , null , id , null ) ; } 
public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , id ) ) ; } 
public boolean METHOD_1 ( TYPE_1 r ) { return METHOD_1 ( r . METHOD_2 ( ) , r . getChange ( ) . METHOD_3 ( ) ) ; } 
public com.google.gerrit.server.query.change.ChangeData apply ( TYPE_1 notes ) { return VAR_1 . create ( db , notes ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 class ) ; VAR_3 . projects ( ) . name ( project . get ( ) ) . METHOD_4 ( STRING_2 ) . get ( ) ; } 
public int METHOD_1 ( ) { return 1 ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . query ( query , VAR_3 , METHOD_3 ( ) , VAR_1 , VAR_2 ) ; } 
public TYPE_1 change ( TYPE_2 notes ) { return new TYPE_3 ( message , VAR_1 ) ; } 
public void METHOD_1 ( ) { VAR_2 = VAR_1 . METHOD_2 ( VAR_3 class ) ; } 
public static < TYPE_1 > TYPE_2 < TYPE_1 > not ( final TYPE_2 < TYPE_1 > VAR_1 ) { if ( VAR_1 instanceof TYPE_3 ) { return VAR_1 . METHOD_1 ( 0 ) ; } return new TYPE_3 ( VAR_1 ) ; } 
public java.lang.String METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = METHOD_2 ( ) . METHOD_3 ( STRING_1 , null , STRING_2 ) ; if ( VAR_1 == null ) { throw new TYPE_1 ( STRING_3 ) ; } return VAR_1 ; } 
private static long METHOD_1 ( long VAR_1 ) { return VAR_1 + ( VAR_1 / 2 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { try { VAR_1 . apply ( revision , new TYPE_2 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
private TYPE_1 getKey ( org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } 
private com.google.gerrit.reviewdb.server.ReviewDb db ( ) { if ( ( db ) != null ) { return db . get ( ) ; } else if ( ( cd ) != null ) { return cd . db ( ) ; } else { return null ; } } 
public void METHOD_1 ( ) { VAR_2 = VAR_3 ; } 
private void METHOD_1 ( ) { METHOD_2 ( VAR_1 < TYPE_1 < TYPE_2 > > METHOD_3 ( new TYPE_3 . Factory ( ) , new TYPE_4 . Factory ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( ) { return VAR_1 ; } 
private static void METHOD_1 ( TYPE_1 ps , int ... VAR_2 ) throws TYPE_2 { for ( int id : VAR_2 ) { TYPE_3 . METHOD_2 ( ps ) . METHOD_3 ( 1 , id ) ; } } 
protected void METHOD_1 ( final java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } 
public void METHOD_1 ( java.lang.String label ) { METHOD_2 ( getAccountId ( ) , label ) ; } 
public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( revision ) ; } 
TYPE_1 create ( com.google.gerrit.server.query.change.ChangeData cd ) ; 
public final native void id ( java.lang.String i ) ; 
TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk ) { this . walk = walk ; return this ; } 
private void METHOD_1 ( java.lang.String msg ) { METHOD_1 ( msg , null ) ; } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey name , java.lang.String id ) { return ( ( ( VAR_2 ) + ( name . get ( ) ) ) + ( VAR_3 ) ) + id ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id ) { if ( ( user . METHOD_2 ( ) ) && ( user . getAccountId ( ) . equals ( id ) ) ) { return true ; } return METHOD_3 ( ) ; } 
public TYPE_1 < ? > index ( com.google.gerrit.server.query.change.ChangeData cd ) { return TYPE_2 . METHOD_1 ( null ) ; } 
private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_1 . PatchSet ps ) { TYPE_2 . METHOD_2 ( r , STRING_1 , ps . getRevision ( ) . get ( ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { while ( ( VAR_1 . METHOD_3 ( ) ) != ( - 1 ) ) { } } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 , java.io.IOException , TYPE_3 { TYPE_4 VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_1 key = VAR_3 . METHOD_1 ( VAR_2 ) ; commit ( VAR_3 ) ; return key ; } 
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , new TYPE_1 ( ) , null , null , true ) ; } 
public java.lang.String getChangeId ( ) { return changeId ; } 
void METHOD_1 ( TYPE_2 . NameKey branch ) ; 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) { TYPE_1 . METHOD_2 ( ( ( psId == null ) || ( psId . getParentKey ( ) . equals ( ctl . getId ( ) ) ) ) ) ; this . psId = psId ; } 
public void onSuccess ( ) { TYPE_1 . display ( token , METHOD_1 ( ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_1 ( ) ; } 
private boolean error ( java.lang.String msg , TYPE_1 t ) { METHOD_1 ( msg ) ; METHOD_2 ( t ) ; return false ; } 
private TYPE_1 . ProjectConfig METHOD_1 ( boolean VAR_1 ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , VAR_1 , true , true , true ) ; } 
public boolean contains ( int b , int e , char c ) { for ( ; b < e ; b ++ ) { if ( ( METHOD_1 ( b ) ) == c ) { return true ; } } return false ; } 
public void index ( com.google.gerrit.reviewdb.client.Change change ) throws java.io.IOException { index ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; } 
public static com.google.gerrit.reviewdb.client.Account.Id METHOD_1 ( java.lang.String name ) { TYPE_2 id = TYPE_3 . METHOD_1 ( name ) ; return id != null ? new com.google.gerrit.reviewdb.client.Account.Id ( id ) : null ; } 
TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patch ) ; 
protected boolean METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_2 ( VAR_1 ) ) . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_2 , STRING_3 ) ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 key , java.lang.String VAR_1 ) { TYPE_1 < TYPE_2 > result = key . METHOD_3 ( VAR_1 ) ; return result != null ? result : java.util.Collections . METHOD_4 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; METHOD_4 ( true ) ; } 
public boolean METHOD_1 ( ) { return ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ; } 
static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id ) { return new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , id ) ; } 
public int METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval a , final com.google.gerrit.reviewdb.client . PatchSetApproval b ) { return a . METHOD_2 ( ) . METHOD_3 ( b . METHOD_2 ( ) ) ; } 
public final void METHOD_1 ( int line , TYPE_1 VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( line , VAR_1 . value ( ) , VAR_2 ) ; } 
public void METHOD_1 ( java.lang.String id ) { this . id = TYPE_1 . METHOD_2 ( id ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 n ) { TYPE_1 VAR_1 = new TYPE_1 ( n , TYPE_3 . METHOD_3 ( n ) ) ; n . METHOD_4 ( VAR_2 ) ; return VAR_1 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , java.io.IOException { TYPE_1 rsrc = METHOD_2 ( id . get ( ) , true ) ; if ( rsrc == null ) { throw new TYPE_4 ( id ) ; } return rsrc ; } 
private static boolean METHOD_1 ( TYPE_1 cfg ) { return cfg . METHOD_2 ( STRING_1 , null , STRING_2 , true ) ; } 
public void METHOD_1 ( final java.lang.StringBuilder VAR_1 , final TYPE_2 VAR_2 ) { VAR_1 . append ( STRING_1 ) ; } 
protected void METHOD_1 ( final TYPE_1 . ChangeInfo c ) { TYPE_4 . display ( TYPE_3 . METHOD_3 ( c ) , new TYPE_5 ( c ) ) ; } 
public TYPE_1 . ChangeInfo format ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return format ( cd , VAR_1 < com.google.gerrit.reviewdb.client.PatchSet.Id > METHOD_1 ( ) , true ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { METHOD_4 ( VAR_2 , VAR_3 , STRING_1 ) . METHOD_5 ( true ) ; } 
private void METHOD_1 ( TYPE_1 . ProjectConfig cfg ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . create ( project ) ; try { cfg . commit ( VAR_1 ) ; } finally { VAR_1 . close ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { group ( STRING_1 , STRING_2 ) ; group ( STRING_3 , STRING_2 ) ; METHOD_2 ( STRING_4 ) ; METHOD_2 ( STRING_5 ) ; com.google.common.truth.Truth.assertThat ( METHOD_3 ( STRING_4 ) . name ) . isEqualTo ( STRING_1 ) ; } 
public java.lang.String METHOD_1 ( java.lang.String name ) { return VAR_1 . get ( VAR_2 , VAR_3 , name ) ; } 
protected abstract java.lang.String METHOD_1 ( java.lang.String VAR_1 ) ; 
static java.lang.String get ( final java.lang.String name ) { return VAR_1 < TYPE_1 > METHOD_2 ( ) . METHOD_1 ( name ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( ) ; } 
public void error ( TYPE_1 error ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < > ( INT_1 ) ; } VAR_1 . add ( error ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 ( new TYPE_3 ( new TYPE_4 ( VAR_1 ) ) ) ; servlet = TYPE_5 . create ( repo ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.Project project ) { if ( VAR_1 != null ) { return VAR_1 . getProject ( ) . METHOD_2 ( ) . equals ( project . METHOD_2 ( ) ) ; } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 class ) ; project ( ) . METHOD_3 ( ) . get ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = STRING_1 ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( name ) . get ( ) . name ) ; } 
void METHOD_1 ( TYPE_1 e ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 ( VAR_2 , project , branch , topic , key ) ; } VAR_1 . METHOD_2 ( ) ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( VAR_2 ) { protected void METHOD_1 ( ) { rpc ( VAR_3 class ) ; } } ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; } 
protected static TYPE_1 METHOD_1 ( ) { return TYPE_1 . create ( TYPE_2 : : METHOD_2 , TYPE_2 : : METHOD_3 , VAR_1 ) ; } 
public void submit ( ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; submit ( in ) ; } 
private static TYPE_1 [ ] METHOD_1 ( TYPE_2 err ) { if ( ( err . METHOD_3 ( ) . length ) == 0 ) { err . METHOD_2 ( ) ; } return err . METHOD_3 ( ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { return VAR_2 ; } return VAR_3 . create ( change . METHOD_2 ( ) ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return null ; } return TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ? VAR_1 : null ; } 
public TYPE_1 METHOD_1 ( ) { this . VAR_1 = true ; return this ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 update , TYPE_2 VAR_1 ) throws com.google.gwtorm.server.OrmException { update . METHOD_2 ( VAR_1 . getMessage ( ) ) ; db . METHOD_3 ( ) . insert ( java.util.Collections.singleton ( VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = VAR_2 . get ( new TYPE_1 . NameKey ( STRING_1 ) ) . METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_3 ( ) ; } 
public TYPE_1 < TYPE_2 . ChangeInfo > apply ( TYPE_3 rsrc ) throws TYPE_4 , com.google.gwtorm.server.OrmException { return TYPE_1 . METHOD_2 ( METHOD_3 ( ) . format ( rsrc ) ) ; } 
public void METHOD_1 ( java.lang.String project ) throws TYPE_1 { METHOD_4 ( java.lang.String.format ( STRING_1 , VAR_4 , project ) ) ; } 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ; } } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . display ( TYPE_3 . METHOD_2 ( project , changeId ) ) ; } 
protected void METHOD_1 ( final java.lang.String name ) { TYPE_2 . METHOD_3 ( ) . METHOD_1 ( name ) ; } 
public java.lang.String toString ( ) { return METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result c = METHOD_2 ( ) ; java.util.Map < java.lang.String , TYPE_2 > VAR_1 = METHOD_3 ( c , null ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( 0 ) ; } 
protected java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) { return ( STRING_1 + VAR_1 ) + STRING_2 ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_2 = ( VAR_1 ) ? new TYPE_1 ( this ) : null ; } 
public Project . NameKey METHOD_1 ( ) { return VAR_1 ; } 
private void METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , java.io.IOException { VAR_1 . METHOD_2 ( STRING_1 , 1 ) ; api . getProject ( VAR_2 . get ( ) ) ; TYPE_4 . METHOD_3 ( VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( ) throws java.io.IOException { return TYPE_1 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( project ) , METHOD_3 ( VAR_1 ) , TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 . log ) ) ; } 
java.util.Set < TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.ObjectId VAR_1 ) throws java.io.IOException { METHOD_2 ( ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_3 ( VAR_3 ) ) { return METHOD_1 ( repo , VAR_1 ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { TYPE_4 . METHOD_1 ( TYPE_5 . of ( this ) , VAR_1 , VAR_2 , false ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( ) ; new TYPE_2 ( ) . inject ( this ) ; VAR_1 . METHOD_4 ( ) ; } 
private TYPE_1 auth ( com.google.gerrit.reviewdb.client.Account.Id account ) { if ( account != null ) { return new TYPE_1 ( account , null , false ) ; } return null ; } 
void METHOD_1 ( TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ; 
public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( null , null ) { private static final long VAR_1 = INT_1 ; public void METHOD_2 ( TYPE_2 req , TYPE_3 . HttpServletResponse res ) { res . METHOD_3 ( VAR_2 ) ; } } ; } 
abstract TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) ; 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . id ( STRING_1 ) . get ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . get ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( ) . getChangeId ( ) ; METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_4 ( ( ( STRING_2 + changeId ) + STRING_3 ) ) . METHOD_5 ( ) ; } 
public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( ) { final java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = new TYPE_1 ( this . VAR_1 ) ; VAR_1 . METHOD_2 ( reviewers ) ; return java.util.Collections . METHOD_3 ( VAR_1 ) ; } 
protected void METHOD_1 ( java.lang.String id ) throws java.lang.Exception { VAR_1 . changes ( ) . id ( id ) . revision ( STRING_1 ) . METHOD_2 ( TYPE_1 . METHOD_1 ( ) ) ; } 
public Project . NameKey METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { cfg . METHOD_1 ( ) ; } 
com.google.gerrit.reviewdb.client.Project getProject ( ) { return project ; } 
private TYPE_1 query ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > p , int VAR_1 ) throws TYPE_3 { return new TYPE_1 ( null , index , p , VAR_1 ) ; } 
private static TYPE_1 create ( com.google.gerrit.reviewdb.client.PatchSet.Id psId , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , java.lang.String label ) { return new TYPE_2 ( psId , VAR_1 , label ) ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , java.lang.String VAR_1 , java.util.Map < java.lang.String , ? > VAR_2 ) throws java.io.IOException { VAR_3 . METHOD_2 ( req , res , VAR_1 , METHOD_3 ( req , res , VAR_2 ) ) ; } 
protected org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( ) throws java.io.IOException { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ) { return METHOD_3 ( repo , STRING_1 ) ; } } 
protected boolean METHOD_1 ( final TYPE_1 project , final TYPE_2 . Id VAR_1 , final short VAR_2 ) { return TYPE_3 . METHOD_1 ( METHOD_2 ( ) , project , VAR_1 , VAR_2 ) ; } 
public java.util.Set < java.lang.String > METHOD_1 ( ) throws java.io.IOException { if ( METHOD_2 ( ) ) { return METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; } return java.util.Collections . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { db = new TYPE_1 ( VAR_1 class ) ; VAR_2 = new java.util.ArrayList < > ( ) ; } 
private void display ( final TYPE_1 result ) { table . METHOD_1 ( result . METHOD_2 ( ) ) ; VAR_1 . display ( result . METHOD_3 ( ) ) ; table . METHOD_4 ( true ) ; } 
public static void edit ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 . edit ( project , id ) . get ( VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 . Status VAR_3 ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , true , false , VAR_3 ) ; } 
void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event ) throws com.google.gwtorm.server.OrmException ; 
public void METHOD_1 ( final TYPE_1 . Id id , final TYPE_2 < TYPE_3 > VAR_1 ) { VAR_2 . create ( id ) . to ( VAR_1 ) ; } 
public void METHOD_1 ( java.util.List < TYPE_1 > in ) throws TYPE_2 { try { VAR_1 . apply ( account , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
protected TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return new TYPE_2 ( ) ; } 
public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , TYPE_1 . not ( TYPE_2 . METHOD_2 ( STRING_2 , STRING_3 ) ) . toString ( ) ) ; } 
public void METHOD_1 ( ) { org.junit.Assert . METHOD_2 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ; } 
private synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_2 . METHOD_2 ( ( ( VAR_2 ) != null ) , STRING_1 ) ; VAR_1 = new TYPE_1 ( VAR_2 , config ) ; } return VAR_1 ; } 
public java.lang.String METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( VAR_1 ) == null ) { if ( ! ( METHOD_2 ( ) ) ) { return null ; } } return VAR_1 ; } 
TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 , TYPE_4 > VAR_1 ) { return new TYPE_5 ( VAR_1 , METHOD_2 ( ) . METHOD_3 ( STRING_1 ) , METHOD_4 ( ) . METHOD_5 ( ) , false ) ; } 
public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , TYPE_1 VAR_1 , TYPE_2 < TYPE_1 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . put ( VAR_1 , VAR_2 ) ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = VAR_1 . change ( VAR_2 ) ; return ( change != null ) && ( ( change . METHOD_2 ( ) . METHOD_3 ( ) ) <= ( VAR_3 ) ) ; } 
private boolean METHOD_1 ( ) { return getProject ( ) . METHOD_2 ( ) . equals ( VAR_1 ) ; } 
public TYPE_1 get ( ) { return create ( ) ; } 
static void METHOD_1 ( TYPE_1 . HttpServletResponse res ) { res . METHOD_2 ( STRING_1 , STRING_2 ) ; res . METHOD_2 ( STRING_3 , STRING_4 ) ; res . METHOD_2 ( STRING_5 , STRING_6 ) ; res . METHOD_2 ( STRING_7 , STRING_8 ) ; } 
public void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( ) . run ( ) ; } 
public final void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String name ) { METHOD_1 ( VAR_1 . name ( ) , TYPE_3 . METHOD_2 ( VAR_2 ) , name ) ; } 
static TYPE_1 create ( ) { return ( ( TYPE_1 ) ( METHOD_1 ( ) ) ) ; } 
public org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) { return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_3 ( STRING_1 ) ) . isEmpty ( ) ; } 
public void METHOD_1 ( final short VAR_1 ) { value = VAR_1 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ; if ( VAR_2 . METHOD_4 ( ) ) { return ; } VAR_1 . METHOD_5 ( new TYPE_3 ( VAR_1 , info ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( name ) != null ) { METHOD_2 ( TYPE_1 . project ( name . get ( ) ) ) ; } } 
protected void METHOD_1 ( ) { METHOD_2 ( ) . to ( VAR_1 class ) ; METHOD_2 ( ) . to ( VAR_3 class ) ; } 
private void reject ( final TYPE_1 . ReceiveCommand cmd ) { reject ( cmd , STRING_1 ) ; } 
public TYPE_1 < ? , java.io.IOException > METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return ( VAR_1 ) != null ? submit ( new TYPE_2 ( new com.google.gerrit.server.query.change.ChangeData ( change ) , true ) ) : VAR_2 < TYPE_3 , java.io.IOException > METHOD_2 ( null ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String project , int id , int VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; } 
public TYPE_1 get ( ) { final TYPE_2 . Id id = VAR_1 . get ( ) . getAccountId ( ) ; return id != null ? VAR_2 . create ( id ) : VAR_3 ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id ( VAR_1 . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) . METHOD_3 ( ) ) ; return VAR_2 . get ( ) . get ( id ) ; } 
protected void METHOD_1 ( TYPE_1 result ) { VAR_2 . display ( result . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_2 . create ( this ) ; } return VAR_1 ; } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { change . METHOD_1 ( VAR_1 . get ( VAR_2 , ps . getId ( ) ) ) ; return change ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) != null ; } 
public static TYPE_1 METHOD_1 ( int VAR_1 ) { return new TYPE_1 ( VAR_2 < java.lang.String , TYPE_2 > of ( ) , VAR_1 , false ) ; } 
private boolean METHOD_1 ( java.util.Set < java.lang.String > VAR_1 ) { return ( user . METHOD_2 ( ) ) || ( METHOD_3 ( VAR_2 , VAR_1 ) ) ; } 
protected static long METHOD_1 ( com.google.gerrit.reviewdb.client.Change c ) { return c . METHOD_2 ( ) . METHOD_3 ( ) ; } 
public java.lang.String METHOD_1 ( ) { return name . METHOD_1 ( ) ; } 
public static TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 < > ( VAR_1 , ( in ) - > in ) ; } 
public boolean METHOD_1 ( ) { return getProject ( ) . METHOD_2 ( ) . equals ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String id ) throws TYPE_2 , java.io.IOException { return METHOD_1 ( id , true ) ; } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( TYPE_1 me , TYPE_2 VAR_1 , org.eclipse.jgit.revwalk.RevCommit revision , org.eclipse.jgit.lib.ObjectId VAR_3 ) throws java.io.IOException { return METHOD_1 ( me , VAR_1 , revision , VAR_3 , revision . METHOD_2 ( ) ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 m ) { return new TYPE_1 ( m , VAR_3 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; } 
void METHOD_1 ( boolean VAR_1 ) { httpd = false ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == VAR_3 ) { super . METHOD_1 ( VAR_1 ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.io.IOException { try ( org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_2 ( project ) ) { return new TYPE_1 ( TYPE_2 . METHOD_3 ( git . METHOD_4 ( ) ) ) ; } } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId , com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { java.lang.StringBuilder r = TYPE_1 . METHOD_2 ( VAR_2 , changeId . get ( ) ) ; r . append ( VAR_1 . get ( ) ) ; return r . toString ( ) ; } 
public static void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 , STRING_3 ) . METHOD_3 ( STRING_4 ) . METHOD_3 ( STRING_5 ) . get ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ; } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws com.google.gwtorm.server.OrmException { return query ( TYPE_1 . commit ( id ) ) ; } 
public Project . NameKey apply ( TYPE_1 in ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( in . name ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_1 . METHOD_2 ( ( STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) ) ) ; } 
private static TYPE_1 value ( final TYPE_2 VAR_1 , final int value , final java.lang.String name ) { return new TYPE_1 ( new TYPE_1 . Id ( VAR_1 . getId ( ) , ( ( short ) ( value ) ) ) , name ) ; } 
private void log ( final int VAR_1 ) { if ( VAR_2 . METHOD_1 ( false , true ) ) { log . METHOD_2 ( cmd , VAR_1 ) ; } } 
public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } } 
public java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { walk . METHOD_2 ( ) ; } 
TYPE_1 METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = config . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( VAR_1 ) ; return VAR_1 ; } 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ; return VAR_2 . METHOD_2 ( git , STRING_1 ) . getChangeId ( ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 ) { VAR_1 . append ( METHOD_2 ( VAR_2 ) ) ; } 
public TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.Account.Id > reviewers ( ) throws com.google.gwtorm.server.OrmException { return TYPE_3 . METHOD_1 ( approvals ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; } 
public boolean METHOD_1 ( ) { return METHOD_2 ( ) ; } 
TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id change ) ; 
public final native java.lang.String path ( ) ; 
public static TYPE_1 METHOD_1 ( int VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { boolean VAR_1 = ( VAR_2 . METHOD_2 ( VAR_3 class ) ) == null ; METHOD_3 ( config ( VAR_2 ) , VAR_1 ) ; base . METHOD_1 ( ) ; METHOD_4 ( ) ; } 
void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_2 < com.google.gerrit.reviewdb.client.Account > VAR_3 ) ; 
public void METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_1 . METHOD_2 ( VAR_2 , name , schema . METHOD_3 ( ) , VAR_1 ) ; } 
protected final < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( ) { return new TYPE_2 ( ) ; } 
protected < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , java.lang.String path ) throws java.lang.Exception { return METHOD_1 ( VAR_1 , path , null ) ; } 
public TYPE_1 METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.lang.String path ) throws java.lang.Exception { return METHOD_2 ( new TYPE_2 < java.util.Map < java.lang.String , TYPE_1 > > ( ) { } , path ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( project , STRING_1 , VAR_1 , true , VAR_2 ) ; } 
public static com.google.gerrit.reviewdb.client.Account.Id METHOD_1 ( java.lang.String name ) { TYPE_2 id = TYPE_3 . METHOD_2 ( name ) ; return id != null ? new com.google.gerrit.reviewdb.client.Account.Id ( id ) : null ; } 
protected void METHOD_1 ( ) { bind ( VAR_4 class ) . in ( VAR_3 ) ; } 
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . add ( table ) ; table . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_1 ( ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 e ) { METHOD_2 ( project , e ) ; throw e ; } 
public static TYPE_1 METHOD_1 ( java.lang.String project , int id ) { return TYPE_2 . METHOD_2 ( project , id , STRING_1 ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId , TYPE_2 user ) throws TYPE_3 , com.google.gwtorm.server.OrmException { TYPE_1 ctl = VAR_1 . METHOD_2 ( changeId , user ) ; return METHOD_1 ( db , ctl . getChange ( ) , user ) ; } 
private void index ( com.google.gerrit.reviewdb.client . AccountGroup group ) throws java.io.IOException { VAR_1 . METHOD_1 ( ) . METHOD_2 ( group ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_1 , true ) ; METHOD_3 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { if ( ( -- ( VAR_1 ) ) == 0 ) { VAR_2 . METHOD_2 ( false ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . name = STRING_2 ; VAR_1 . projects ( ) . name ( STRING_1 ) . create ( in ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String lang ) { return new TYPE_2 ( lang ) ; } 
int METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { return ( ( int ) ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ) ; } return - 1 ; } 
public TYPE_1 get ( ) { return factory . create ( VAR_1 , METHOD_1 ( ) ) ; } 
protected static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_2 ) && ( VAR_1 . getMessage ( ) . METHOD_2 ( VAR_2 ) ) ; } 
private final native void METHOD_1 ( int VAR_1 ) ; 
public TYPE_1 create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return create ( ( ( TYPE_2 ) ( null ) ) , id ) ; } 
public void message ( java.lang.String message ) { } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . submit ( VAR_1 ) ; } 
private void display ( final TYPE_1 result ) { table . METHOD_1 ( result . METHOD_2 ( ) ) ; VAR_1 . display ( result . METHOD_3 ( ) ) ; table . METHOD_4 ( ) ; } 
public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , psId ) ) ; } 
public TYPE_1 METHOD_1 ( ) { return ( ( TYPE_1 ) ( ctl . METHOD_1 ( ) ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return new TYPE_1 ( null , VAR_1 , VAR_2 ) ; } 
public java.lang.String METHOD_1 ( ) { return VAR_1 ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) . to ( VAR_2 class ) ; if ( VAR_3 ) { METHOD_2 ( ) . to ( VAR_4 class ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 . Status VAR_3 ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , false , false , VAR_3 ) ; } 
public int METHOD_1 ( ) { return ( VAR_1 . length ( ) ) * 2 ; } 
void METHOD_1 ( final java.lang.String url ) { this . VAR_1 = url ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ( STRING_1 ) ; VAR_1 . projects ( ) . name ( STRING_2 ) . create ( in ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) throws java.lang.Exception { TYPE_2 result = new TYPE_3 ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( TYPE_4 . METHOD_4 ( VAR_2 ) , result . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = METHOD_2 ( ) ; } 
public void onSuccess ( java.lang.String result ) { TYPE_1 . display ( TYPE_2 . METHOD_1 ( psId ) ) ; } 
TYPE_1 METHOD_1 ( ) { return ( ) - > METHOD_2 ( ( ! ( METHOD_3 ( ) ) ) ) ; } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_1 ) { return TYPE_1 . METHOD_1 ( revision , VAR_1 , 0 ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patch ) { return TYPE_3 . METHOD_2 ( this , db , change , patch , VAR_1 , VAR_2 , VAR_3 ) ; } 
private void METHOD_1 ( TYPE_1 c ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( c ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { if ( VAR_1 ) { METHOD_2 ( ) ; } } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_2 , TYPE_3 { return ( ( TYPE_1 ) ( rw . parseCommit ( id ) ) ) ; } 
private static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData , ? > ... VAR_1 ) { return new TYPE_1 ( false , TYPE_3 . METHOD_2 ( VAR_1 ) ) ; } 
public static boolean METHOD_1 ( TYPE_1 cfg ) { return cfg . METHOD_2 ( STRING_1 , null , STRING_2 , true ) ; } 
public void METHOD_1 ( ) { final long id = INT_1 ; final TYPE_1 p = new TYPE_1 ( id ) ; org.junit.Assert.assertEquals ( ( ( int ) ( id ) ) , p . METHOD_2 ( ) ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String path , TYPE_2 VAR_1 , int line , java.lang.String message ) { TYPE_1 c = new TYPE_1 ( ) ; return TYPE_3 . METHOD_2 ( c , path , VAR_1 , null , line , message ) ; } 
TYPE_1 create ( java.util.Set < TYPE_3 > VAR_2 ) ; 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; org.junit.Assert . METHOD_2 ( b , b . append ( FLOAT_1 ) ) ; org.junit.Assert.assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; } 
public java.lang.String getRefName ( ) { return null ; } 
public TYPE_1 METHOD_1 ( TYPE_2 input ) throws TYPE_3 { try { return VAR_1 . apply ( change , input ) . value ( ) ; } catch ( TYPE_4 | java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey name ) { try { return VAR_1 . METHOD_1 ( name ) ; } catch ( java.io.IOException err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } 
public final native void METHOD_1 ( ) ; 
protected void METHOD_1 ( ) { rpc ( VAR_1 class ) ; install ( new TYPE_2 ( ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return null ; } return VAR_1 . METHOD_2 ( STRING_1 ) . METHOD_2 ( STRING_2 ) . METHOD_2 ( STRING_3 ) . METHOD_2 ( STRING_4 ) ; } 
public static TYPE_1 revision ( java.lang.String project , int id , java.lang.String revision ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( revision ) ; } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Change c ) { c . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; } 
void METHOD_1 ( final java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; } 
TYPE_1 create ( TYPE_2 . NameKey name ) ; 
public void METHOD_1 ( final java.lang.StringBuilder VAR_1 , final java.lang.String VAR_2 ) { VAR_1 . append ( METHOD_2 ( VAR_2 ) ) ; } 
public void onSuccess ( TYPE_1 result ) { if ( VAR_1 . METHOD_1 ( ) ) { TYPE_2 . display ( TYPE_3 . METHOD_2 ( changeId ) ) ; } } 
void METHOD_3 ( final java.lang.String query ) { VAR_1 . METHOD_3 ( query ) ; } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { if ( c . getStatus ( ) . METHOD_1 ( ) ) { c . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( c ) ; } return c ; } 
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 . delete ( ) ; repo = TYPE_2 . METHOD_3 ( VAR_1 ) ; } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { change . METHOD_1 ( ) ; return change ; } 
public void run ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { return VAR_3 . METHOD_2 ( VAR_4 , args . repo , VAR_1 , VAR_2 ) ; } 
public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , TYPE_1 < TYPE_2 < TYPE_3 < TYPE_4 > > > VAR_1 ) { TYPE_5 . revision ( project , id , STRING_1 ) . get ( VAR_1 ) ; } 
public void onSuccess ( TYPE_1 . ChangeInfo c ) { project . METHOD_1 ( c . project ( ) ) ; TYPE_2 . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( path ) ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 r ) throws java.lang.Exception { return METHOD_1 ( r , VAR_2 . String class ) ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String path ) { return TYPE_2 . edit ( project , id ) . id ( path ) ; } 
TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patch ) ; 
public TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client . PatchSetApproval > approvals ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_2 . METHOD_2 ( db , notes ( ) ) ; } return VAR_1 ; } 
public void close ( ) { if ( ( walk ( ) ) != null ) { walk ( ) . close ( ) ; } } 
private TYPE_1 METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } 
private boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ( STRING_1 + ( VAR_2 ) ) ) . METHOD_3 ( VAR_3 ) ; } 
TYPE_1 create ( java.lang.String url , java.lang.String user , java.lang.String VAR_1 ) { if ( url == null ) { return VAR_2 ; } return new TYPE_2 ( url , user , VAR_1 ) ; } 
public void run ( ) { VAR_4 . close ( ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; } 
protected void METHOD_1 ( int row , int VAR_1 ) { super . METHOD_1 ( row , VAR_1 ) ; if ( ( VAR_1 == 1 ) || ( VAR_1 == INT_1 ) ) { METHOD_2 ( row , VAR_1 ) ; } } 
boolean METHOD_1 ( ) { VAR_1 = true ; ( VAR_2 ) ++ ; return ( ( VAR_3 ) == 0 ) || ( ( VAR_2 ) <= ( VAR_3 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( null ) ) . isEqualTo ( VAR_1 ) ; } 
public TYPE_1 . ChangeInfo METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { try { return VAR_2 . apply ( change , VAR_1 ) . value ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 . get ( ) ) == null ) { return super . METHOD_1 ( ) ; } return VAR_1 . get ( ) ; } 
private boolean METHOD_1 ( ) { return TYPE_1 . info ( ) . auth ( ) . METHOD_3 ( VAR_1 ) ; } 
public static TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = new TYPE_3 ( ) ; return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; } 
public abstract void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 out ) ; 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( project ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( STRING_2 ) . get ( ) . METHOD_3 ( ) ) . isEqualTo ( STRING_1 ) ; } 
private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_2 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 ) ; } 
private static int METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.lang.String p ) { int r = java.util.Collections . METHOD_2 ( VAR_1 , p ) ; return r < 0 ? - ( r + 1 ) : r ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result change = METHOD_2 ( ) ; submit ( change . getChangeId ( ) ) ; com.google.common.truth.Truth.assertThat ( METHOD_3 ( ) . getId ( ) ) . isEqualTo ( change . METHOD_4 ( ) ) ; } 
private void METHOD_1 ( java.lang.String msg ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 ) + msg ) ) ; } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { VAR_1 . display ( result ) ; } } ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { install ( VAR_2 ) ; } 
public void METHOD_1 ( final TYPE_1 . Key VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } } 
void METHOD_1 ( ) { VAR_1 = false ; METHOD_2 ( ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) throws java.lang.Exception { return project ( ) . METHOD_1 ( ) . get ( ) ; } 
public static java.lang.String METHOD_1 ( java.lang.String type , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , TYPE_1 . Key id ) { return TYPE_2 . METHOD_1 ( type , VAR_1 , id . getParentKey ( ) , id . get ( ) , null , 0 ) ; } 
public TYPE_1 get ( ) { final TYPE_2 . Id id = VAR_1 . getAccountId ( ) ; return id != null ? factory . create ( id ) : VAR_2 ; } 
void METHOD_1 ( TYPE_1 cmd ) { VAR_1 = cmd ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > p ) { try { return new TYPE_1 ( p , index ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( ( ( STRING_1 + p ) + STRING_2 ) , e ) ; } } 
void METHOD_1 ( TYPE_1 . NameKey projectName , TYPE_2 . Id VAR_2 , java.lang.String VAR_3 , short VAR_4 , short VAR_5 , TYPE_3 < TYPE_4 > VAR_6 ) ; 
TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 . NameKey name ) throws TYPE_4 . OrmException ; 
public boolean get ( org.eclipse.jgit.lib.ObjectId commit , TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , TYPE_3 . NameKey VAR_4 , org.eclipse.jgit.lib.Repository repo ) { throw new TYPE_4 ( STRING_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { format = VAR_1 ; return this ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; } 
public com.google.gerrit.reviewdb.client.Change getChange ( ) { return update . getChange ( ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id ) { synchronized ( VAR_1 ) { if ( ( VAR_1 . get ( id ) . get ( ) ) == 0 ) { VAR_1 . METHOD_2 ( id ) ; } } } 
public java.lang.String apply ( com.google.gerrit.reviewdb.client.Project.NameKey in ) { return in . get ( ) ; } 
public java.lang.String METHOD_1 ( ) throws java.lang.Exception { if ( VAR_1 . equals ( VAR_2 ) ) return METHOD_2 ( ) ; return METHOD_3 ( ) ; } 
public final void delete ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_1 ( VAR_1 ) ; } 
public synchronized int getStatus ( ) { return status ; } 
private void display ( final TYPE_1 result ) { projects . display ( result ) ; projects . METHOD_1 ( ) ; } 
public void display ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { display ( null , null , null , false , VAR_1 , VAR_2 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( VAR_1 ) == null ) { if ( ! ( METHOD_2 ( ) ) ) { return null ; } } return VAR_1 ; } 
public TYPE_1 create ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db , com.google.gerrit.reviewdb.client.Account.Id id ) { return new TYPE_1 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , null , db , id ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet ps , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ps . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( db , null ) ) ) ) { return false ; } return METHOD_4 ( db ) ; } 
public void METHOD_1 ( ) { VAR_1 = VAR_2 . create ( admin ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( METHOD_2 ( ) ) || ( METHOD_3 ( db , cd ) ) ; } 
TYPE_1 METHOD_1 ( TYPE_1 e ) { VAR_1 . add ( e ) ; return this ; } 
private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( VAR_2 , true ) ; } } 
public final native boolean METHOD_1 ( ) ; 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( VAR_1 ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 i , java.lang.String msg ) throws java.io.IOException , TYPE_3 { return TYPE_4 . METHOD_1 ( git , i , msg , true , false ) ; } 
protected TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new TYPE_1 ( args , c ) . METHOD_2 ( ) ; } 
private void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { METHOD_2 ( false , req , rsp ) ; } 
void message ( java.lang.String message ) ; 
private static java.util.List < TYPE_1 > METHOD_3 ( TYPE_1 [ ] VAR_1 ) { return java.util.Collections . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 { return new TYPE_1 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { return VAR_1 . METHOD_2 ( ( VAR_2 + ( VAR_3 ) ) ) . METHOD_3 ( false ) ; } 
public java.util.List < TYPE_1 > apply ( TYPE_2 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_4 VAR_3 : extensions ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; } return VAR_2 ; } 
private java.util.Set < TYPE_1 > METHOD_1 ( ) { TYPE_2 p = VAR_1 ; if ( ! ( p . METHOD_2 ( ) ) ) { p = p . METHOD_3 ( ) ; VAR_1 = p ; } return VAR_2 ; } 
public static java.lang.String METHOD_1 ( final TYPE_1 . Id c ) { return STRING_1 + ( c . toString ( ) ) ; } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws com.google.gwtorm.server.OrmException { return METHOD_1 ( id . name ( ) ) ; } 
public void METHOD_1 ( ) { install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; } 
PatchSet . Id METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 == ( VAR_2 ) ) && ( ( base ) != null ) ) && ( ( base . get ( ) ) >= 0 ) ) { return base ; } return revision ; } 
public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_2 ) ) . isEqualTo ( STRING_1 ) ; } 
TYPE_1 . Branch get ( TYPE_2 . Id id ) throws TYPE_3 . OrmException ; 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_4 class ) ; METHOD_4 ( STRING_2 ) . METHOD_5 ( VAR_5 class ) ; } 
int size ( ) { return ( VAR_2 ) != null ? VAR_2 . size ( ) : 0 ; } 
public TYPE_1 < ? , java.io.IOException > METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id ) { return ( VAR_1 ) != null ? submit ( new TYPE_2 ( id , true ) ) : VAR_2 < TYPE_3 , java.io.IOException > METHOD_2 ( null ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return change . METHOD_2 ( ) ? VAR_2 : VAR_3 ; } 
public int METHOD_1 ( ) { return ( VAR_1 ) > 0 ? ( VAR_1 ) * INT_1 : VAR_1 ; } 
void METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; if ( VAR_1 ) { commit ( ) ; } } 
public TYPE_1 . NameKey METHOD_1 ( ) { return projectName ; } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 result = VAR_1 . create ( changeId , java.util.Collections.singleton ( VAR_2 ) ) . METHOD_1 ( ) ; result . METHOD_2 ( VAR_3 . create ( changeId ) . METHOD_1 ( ) ) ; return result ; } 
public boolean METHOD_1 ( java.lang.String project , java.lang.String branch ) { return true ; } 
private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( true , true , true ) ; } 
protected < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > put ( TYPE_4 < TYPE_5 < TYPE_1 > > VAR_1 ) { return new TYPE_3 ( view ( VAR_1 , VAR_2 , STRING_1 ) ) ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < java.lang.String > p , final java.util.List < TYPE_1 < java.lang.String > > VAR_2 ) { org.junit.Assert.assertEquals ( ( VAR_1 + STRING_1 ) , VAR_2 , p . METHOD_2 ( ) ) ; } 
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } } } 
public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , changeId ) ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . Status VAR_2 ) throws java.lang.Exception { return METHOD_2 ( VAR_1 , null , true , false , VAR_2 ) ; } 
java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? key . METHOD_1 ( ) : null ; } 
public int METHOD_1 ( ) { return INT_1 + ( id ) ; } 
public TYPE_1 create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = db . changes ( ) . get ( changeId ) ; return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , project , change ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( TYPE_1 . apply ( STRING_1 ) ) . isEqualTo ( STRING_1 ) ; } 
public void run ( ) { } 
public final boolean METHOD_1 ( ) { switch ( getStatus ( ) ) { case VAR_1 : case VAR_3 : return true ; default : return false ; } } 
private TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in ) throws TYPE_2 { return VAR_1 . METHOD_1 ( in , 0 ) ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , e ) ; com.google.common.truth.Truth.assertThat ( e . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; } 
public static TYPE_1 edit ( java.lang.String project , int id ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final TYPE_1 p = new TYPE_1 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_2 ( ) , p . METHOD_2 ( ) ) ; } 
protected void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( ( ( VAR_1 ) != null ) && ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( ( ( VAR_1 ) + msg ) , args ) ; } } 
public java.lang.String METHOD_1 ( ) { return VAR_1 ; } 
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , VAR_1 , null ) ; } 
public TYPE_1 . gwtorm [ ] METHOD_1 ( ) { return new TYPE_2 . Key < ? > [ ] { projectName } ; } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { if ( c . getStatus ( ) . METHOD_1 ( ) ) { c . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( c ) ; } return c ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_2 = new TYPE_1 ( ) ; VAR_1 = new java.util.ArrayList < > ( ) ; METHOD_3 ( VAR_2 , VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { db = new TYPE_1 < TYPE_2 > ( VAR_1 class ) ; VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) ; } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( project , changeId , VAR_1 ) ; } 
public java.lang.String METHOD_1 ( ) { return name ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 . C ) ; } 
protected TYPE_1 . ReviewDb METHOD_1 ( ) throws TYPE_2 { try { return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; } catch ( TYPE_4 . OrmException e ) { throw new TYPE_2 ( 1 , STRING_1 , e ) ; } } 
public org.eclipse.jgit.revwalk.RevCommit METHOD_2 ( ) { return commit ; } 
public void METHOD_1 ( final TYPE_1 event ) { METHOD_2 ( ) ; } 
public abstract java.lang.String METHOD_1 ( java.lang.String url , java.lang.String ref ) ; 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { return VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) . getAccountId ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . display ( METHOD_2 ( ) ) ; } 
public static boolean METHOD_1 ( java.lang.String id ) { return TYPE_1 . equals ( id ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String project , int id ) { return TYPE_2 . edit ( project , id ) . METHOD_2 ( STRING_1 ) ; } 
private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . METHOD_2 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { db = TYPE_1 . METHOD_2 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = ( VAR_1 != null ) ? VAR_1 . get ( ) : null ; } 
public static java.util.List < java.lang.String > METHOD_1 ( TYPE_2 ... VAR_1 ) { return TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; } 
protected < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > delete ( TYPE_4 < TYPE_5 < TYPE_1 > > VAR_1 ) { return new TYPE_3 ( view ( VAR_1 , VAR_2 , STRING_1 ) ) ; } 
void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; VAR_1 . METHOD_2 ( this , VAR_2 ) ; cm . METHOD_4 ( ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id ) { key = new TYPE_1 . Key ( ( STRING_1 + id ) ) ; VAR_1 = new TYPE_2 ( id , 0 , false , null , 0 , null , null ) ; } 
public final native void METHOD_1 ( int line ) ; 
public void METHOD_1 ( ) { factory ( VAR_1 class ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String project , int changeId ) { return TYPE_2 . change ( project , changeId ) . view ( STRING_1 ) ; } 
private static int METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.lang.String p ) { int r = java.util.Collections . METHOD_2 ( VAR_1 , p ) ; return r < 0 ? - ( r + 1 ) : r ; } 
public boolean apply ( TYPE_1 input ) { return ( input . getChange ( ) ) != null ; } 
private TYPE_1 query ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > p , int VAR_1 ) throws TYPE_3 { return new TYPE_1 ( index , p , VAR_1 ) ; } 
public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 . METHOD_2 ( project , id , STRING_1 ) . get ( VAR_1 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = result . METHOD_2 ( ref ) ; com.google.common.truth.Truth.assertThat ( message ( VAR_2 ) . METHOD_3 ( ) ) . contains ( VAR_1 . METHOD_3 ( ) ) ; } 
TYPE_1 . AccountGroup get ( TYPE_2 . Id id ) throws TYPE_3 . OrmException ; 
public static < TYPE_1 > com.google.gerrit.extensions.registration.DynamicSet < TYPE_1 > METHOD_1 ( ) { return new com.google.gerrit.extensions.registration.DynamicSet ( VAR_1 . Collections < TYPE_2 < TYPE_3 < TYPE_1 > > > METHOD_1 ( ) ) ; } 
private TYPE_1 file ( java.lang.String path ) { return new TYPE_1 ( TYPE_2 . METHOD_1 ( ) . METHOD_2 ( view ) . METHOD_3 ( path ) . METHOD_4 ( ) , config , path ) ; } 
public TYPE_1 get ( TYPE_2 key , com.google.gerrit.reviewdb.client.Project.NameKey project ) throws TYPE_3 ; 
public boolean METHOD_1 ( final java.lang.String VAR_1 ) throws java.io.IOException { return METHOD_2 ( ( ) - > client ( ) . METHOD_4 ( VAR_1 ) ) ; } 
public boolean METHOD_1 ( ) { return false ; } 
private void METHOD_1 ( TYPE_1 . Change c , TYPE_2 msg ) { METHOD_2 ( c , msg , true , true ) ; } 
protected java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String type ) { return TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 , type ) ; } 
public boolean METHOD_1 ( ) { return METHOD_2 ( Project : : METHOD_3 ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 < TYPE_3 > > result ) { METHOD_2 ( result ) ; VAR_1 . METHOD_3 ( true ) ; } 
public boolean METHOD_1 ( ) { return true ; } 
public void onSuccess ( TYPE_1 . ChangeInfo info ) { info . METHOD_1 ( ) ; METHOD_2 ( info , METHOD_3 ( info ) ) ; METHOD_4 ( info , base ) ; } 
synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_1 ctx = new TYPE_1 ( this , VAR_1 , VAR_2 ) ; VAR_4 . add ( VAR_3 ) ; return ctx ; } 
static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_2 VAR_1 ) { java.lang.String ref = VAR_1 . getName ( ) ; if ( TYPE_2 . METHOD_2 ( ref ) ) { return TYPE_1 . METHOD_1 ( project , ref , VAR_1 ) ; } else { return null ; } } 
private native void METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > r , TYPE_2 VAR_1 ) ; 
public void METHOD_1 ( TYPE_1 a , TYPE_2 < TYPE_3 . PatchSet > ps ) { METHOD_1 ( a , ps , null , false , null ) ; } 
public TYPE_1 notes ( ) throws com.google.gwtorm.server.OrmException { if ( ( notes ) == null ) { notes = VAR_1 . create ( db , change ( ) ) ; } return notes ; } 
public void onSuccess ( ) { TYPE_1 . display ( token , new TYPE_2 ( project , base , TYPE_3 . patchSet ( id . getParentKey ( ) ) , id . get ( ) , VAR_1 , line ) ) ; } 
public static void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 . projects ( ) . METHOD_2 ( STRING_2 , STRING_3 ) . METHOD_3 ( STRING_4 ) . METHOD_3 ( STRING_5 ) . get ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ; } 
private TYPE_1 METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.io.IOException { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( repo ) ; VAR_2 = new TYPE_2 ( null , null , null , null ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . patch ( METHOD_2 ( ) , base , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . Change change = METHOD_2 ( ) . METHOD_4 ( ) ; METHOD_5 ( METHOD_6 ( VAR_2 , VAR_3 ) ) ; METHOD_7 ( change ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) ) . isEmpty ( ) ; com.google.common.truth.Truth.assertThat ( METHOD_3 ( ) ) . isEmpty ( ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return null ; } 
public static void METHOD_1 ( TYPE_1 group , TYPE_2 < TYPE_3 > VAR_1 ) { new TYPE_4 ( STRING_2 ) . id ( group . get ( ) ) . view ( STRING_2 ) . get ( VAR_1 ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 < TYPE_3 . ReceiveCommand > commands ) { METHOD_2 ( commands ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws TYPE_2 { return VAR_1 . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) ; } 
java.lang.String patchSet ( ) ; 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ps , java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id , TYPE_2 < com.google.gerrit.reviewdb.client . PatchSetApproval > > approvals ) { METHOD_1 ( VAR_1 , ps , approvals , false , null ) ; } 
public TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client.Account account ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . name = account . METHOD_2 ( ) ; VAR_1 . email = account . METHOD_3 ( ) ; return VAR_1 ; } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { if ( VAR_1 != null ) { c . METHOD_1 ( VAR_1 ) ; } TYPE_1 . METHOD_2 ( c ) ; return c ; } 
public void METHOD_1 ( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) { this . VAR_1 = VAR_1 ; } 
public void run ( ) { VAR_2 . close ( ) ; } 
protected void submit ( java.lang.String changeId , TYPE_1 input ) throws java.lang.Exception { submit ( changeId , input , null , null , true ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 user ) { return VAR_1 . create ( user ) ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.lang.String changeId ) throws java.lang.Exception { return VAR_1 . changes ( ) . id ( changeId ) . get ( VAR_2 ) . VAR_3 ; } 
TYPE_1 < TYPE_2 > get ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ; 
TYPE_1 METHOD_1 ( ) { return ( ) - > VAR_1 . METHOD_2 ( ( ! ( VAR_1 . getValue ( ) ) ) , true ) ; } 
private void METHOD_1 ( java.lang.String ref , int VAR_1 , java.lang.String ... VAR_2 ) throws java.lang.Exception { TYPE_1 d = METHOD_2 ( ref , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( log ( d ) ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 ) ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; } 
protected void METHOD_1 ( final TYPE_1 result ) { display ( result ) ; } 
protected void METHOD_1 ( ) { com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , VAR_1 class ) ; com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , VAR_2 class ) ; install ( new TYPE_1 ( ) ) ; } 
private static void METHOD_1 ( ) { for ( java.lang.String s : new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 } ) { TYPE_1 . METHOD_2 ( STRING_9 , s ) ; } } 
private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_1 ( null ) ; } else { TYPE_1 . METHOD_3 ( METHOD_4 ( ) ) ; } } 
public void display ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { display ( null , null , null , VAR_1 , VAR_2 ) ; } 
public TYPE_1 create ( final TYPE_2 VAR_1 , final java.lang.String ref ) { return new TYPE_1 ( VAR_1 , ref ) ; } 
public void METHOD_1 ( int VAR_1 ) { VAR_3 . METHOD_1 ( METHOD_2 ( VAR_1 ) ) ; log ( VAR_1 ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id ) ; 
public void onSuccess ( TYPE_1 result ) { if ( VAR_1 . METHOD_1 ( ) ) { TYPE_2 . display ( TYPE_3 . METHOD_2 ( psId ) ) ; } } 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) ; } 
public void METHOD_1 ( ) { for ( char c : TYPE_1 . METHOD_2 ( ) ) { org.junit.Assert . METHOD_3 ( ( STRING_1 + c ) , TYPE_2 . METHOD_4 ( c ) ) ; } } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 ) ) { return ( line ) - ( VAR_1 . line ) ; } throw new TYPE_2 ( STRING_1 ) ; } 
public void METHOD_1 ( TYPE_1 ... VAR_1 ) throws java.io.IOException { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; } 
public TYPE_1 apply ( TYPE_2 rsrc ) { return new TYPE_1 ( rsrc . METHOD_3 ( ) ) ; } 
public TYPE_1 not ( ) { throw new TYPE_2 ( STRING_1 , this ) ; } 
public abstract TYPE_1 id ( java.lang.String VAR_1 ) ; 
private java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( VAR_2 , null , VAR_3 ) ; } 
protected TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , c . getProject ( ) , c ) . METHOD_2 ( ) ; } 
private TYPE_1 METHOD_1 ( final TYPE_2 key ) throws TYPE_3 { return VAR_1 . get ( key , project ) ; } 
public java.lang.String METHOD_1 ( ) { return branch . ref ( ) ; } 
protected < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > METHOD_1 ( TYPE_4 < TYPE_5 < TYPE_1 > > type , java.lang.String name ) { return new TYPE_3 ( view ( type , VAR_1 , name ) ) ; } 
protected void METHOD_1 ( final TYPE_1 r ) { display ( r ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) . to ( VAR_2 class ) ; } 
public void METHOD_1 ( ) { METHOD_3 ( 1 , VAR_4 ) ; } 
public void METHOD_1 ( TYPE_1 event ) { cm . METHOD_2 ( TYPE_2 . create ( line ) ) ; cm . METHOD_3 ( ( VAR_1 - ( FLOAT_1 * VAR_2 ) ) ) ; cm . METHOD_5 ( ) ; } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return query ( TYPE_1 . METHOD_2 ( topic ( topic ) , TYPE_3 . METHOD_3 ( ) ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( true ) . METHOD_5 ( ) ; } 
public TYPE_1 create ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db , com.google.gerrit.reviewdb.client.Account.Id id ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , null , db , id , null ) ; } 
protected void METHOD_1 ( TYPE_1 event ) { for ( TYPE_2 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( event ) ; } } 
public void index ( ) throws TYPE_1 { try { index . apply ( change , new TYPE_2 ( ) ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public static TYPE_1 diff ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String path ) { return new TYPE_1 ( TYPE_2 . revision ( project , id ) . view ( STRING_1 ) . id ( path ) . view ( STRING_2 ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( cd . change ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) >= ( VAR_1 . METHOD_3 ( ) ) ; } 
protected java.lang.String getRefName ( ) { return TYPE_1 . METHOD_1 ( getId ( ) , VAR_1 ) ; } 
public void METHOD_1 ( final java.lang.String VAR_1 ) { branch = VAR_1 ; } 
public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; } 
public TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.Account.Id > reviewers ( ) throws com.google.gwtorm.server.OrmException { return VAR_1 . METHOD_1 ( notes ( ) , approvals ( ) . values ( ) ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client . AccountGroup group ) { return METHOD_1 ( TYPE_1 . METHOD_2 ( group ) ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) { this . project = project ; this . changeId = changeId ; } 
protected void METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 ) throws java.lang.Exception { submit ( changeId , new TYPE_1 ( ) , VAR_2 class , VAR_1 , true ) ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 { try ( TYPE_5 VAR_2 = VAR_1 . METHOD_2 ( ) ) { return VAR_2 . METHOD_3 ( ) ; } } 
private void log ( final int VAR_1 ) { synchronized ( this ) { if ( ! ( VAR_2 ) ) { log . METHOD_2 ( VAR_1 ) ; VAR_2 = true ; } } } 
protected TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId id ) { return TYPE_1 . create ( TYPE_2 . METHOD_2 ( repo ) , id ) ; } 
public char METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; } 
TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) ; 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account.Id id ) throws TYPE_2 { try { return VAR_1 . METHOD_2 ( db , change , VAR_2 . create ( id ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( change.getId ( ) ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return VAR_1 . create ( METHOD_2 ( change . METHOD_3 ( ) ) , change . getProject ( ) , change.getId ( ) ) ; } 
public com.google.gerrit.reviewdb.client . PatchSetApproval apply ( com.google.gerrit.reviewdb.client . PatchSetApproval in ) { if ( in . METHOD_1 ( ) . equals ( psId ) ) { return in ; } return new com.google.gerrit.reviewdb.client . PatchSetApproval ( psId , in ) ; } 
void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } } 
public static void METHOD_1 ( ) throws java.lang.Exception { if ( ( VAR_1 ) != null ) { try { VAR_1 . METHOD_2 ( ) ; } finally { VAR_1 = null ; } } TYPE_1 . METHOD_3 ( ) ; } 
boolean METHOD_1 ( ) ; 
public final boolean METHOD_1 ( ) { return ( METHOD_3 ( ) ) != ( VAR_1 ) ; } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , changeId , revision , VAR_2 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String topic ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , null , topic ) ; } 
public int run ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . close ( ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; return 0 ; } 
public static PatchSet . Id METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , java.lang.String VAR_1 ) { return new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , ( VAR_1 . equals ( STRING_1 ) ? 0 : TYPE_1 . METHOD_2 ( VAR_1 ) ) ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , char VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) >= 0 ) { return VAR_1 . METHOD_3 ( 0 , VAR_1 . METHOD_2 ( VAR_2 ) ) ; } return VAR_1 ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 . Id VAR_1 ) { return METHOD_2 ( METHOD_3 ( ) . METHOD_1 ( VAR_1 ) ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_1 ( VAR_1 . getName ( ) ) ; } 
public com.google.gerrit.extensions.registration.DynamicSet < TYPE_1 > get ( ) { return new com.google.gerrit.extensions.registration.DynamicSet ( TYPE_2 . METHOD_1 ( VAR_1 , type ) ) ; } 
public static java.lang.String METHOD_1 ( final TYPE_1 . Key id ) { return TYPE_2 . METHOD_2 ( STRING_1 , id ) ; } 
public static void METHOD_1 ( final com.google.gerrit.reviewdb.client.Change c ) { c . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( c ) ; } 
protected void add ( final TYPE_1 VAR_1 , final com.google.gerrit.reviewdb.client.Account.Id to ) { if ( ( ! ( VAR_2 ) ) || ( VAR_3 . contains ( to ) ) ) { super . add ( VAR_1 , to ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( new TYPE_1 ( false , false ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . get ( STRING_1 ) . METHOD_2 ( ) ) . isEqualTo ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ; } 
void METHOD_1 ( TYPE_1 . NameKey projectName , TYPE_2 < TYPE_3 > VAR_2 ) ; 
public void run ( ) { VAR_1 . METHOD_2 ( event ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) ; 
public boolean METHOD_1 ( java.lang.String VAR_1 ) { return ! ( METHOD_2 ( VAR_1 , false , true ) ) ; } 
public synchronized void METHOD_1 ( ) { VAR_1 . info ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ; METHOD_3 ( false ) ; VAR_3 . METHOD_1 ( ) ; } 
public void delete ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.io.IOException { } 
protected void METHOD_1 ( final int VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; if ( ( VAR_3 ) != null ) { VAR_3 . run ( ) ; } } 
private static final native void METHOD_1 ( java.lang.String d , java.lang.String e , java.lang.String m , java.lang.String t , java.lang.String r , java.lang.String VAR_1 ) ; 
public static java.lang.String METHOD_1 ( final TYPE_1 . Key id ) { return TYPE_2 . METHOD_2 ( STRING_1 , null , id ) ; } 
public TYPE_1 < TYPE_2 . ChangeInfo > METHOD_1 ( ) { if ( ( info ) == null ) { info = new TYPE_1 ( ) ; } return info ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = name ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( ( name + STRING_2 ) ) . get ( ) . name ) ; } 
public static java.lang.String METHOD_2 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 ) ; } 
public static java.lang.String METHOD_2 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 , TYPE_1 VAR_3 , int line ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , VAR_3 , line ) ; } 
java.lang.String METHOD_1 ( java.lang.String changeId ) ; 
public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { for ( TYPE_2 VAR_2 : VAR_1 ) { METHOD_2 ( VAR_2 , false ) ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) throws TYPE_3 { METHOD_2 ( ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( TYPE_1 . METHOD_2 ( STRING_1 ) , STRING_2 ) ; } 
private void METHOD_1 ( final int VAR_1 , final java.lang.String VAR_2 ) { table . METHOD_2 ( 0 , VAR_1 , VAR_2 ) ; METHOD_3 ( 0 , VAR_1 , STRING_1 ) ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { return VAR_1 . apply ( revision ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return java.util.Collections . METHOD_2 ( VAR_1 ) ; } return java.util.Collections . METHOD_3 ( ) ; } 
private java.lang.String METHOD_1 ( short value ) { if ( value > 0 ) { return STRING_1 + value ; } return TYPE_1 . toString ( value ) ; } 
protected < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > core ( final TYPE_4 < TYPE_5 < TYPE_1 , TYPE_2 > > type ) { return core ( TYPE_6 . get ( type ) , type ) ; } 
public TYPE_1 < ? > apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException , java.io.IOException { VAR_2 . apply ( VAR_1 , path , VAR_3 ) ; return TYPE_1 . METHOD_2 ( ) ; } 
private long METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.io.IOException { org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_2 ( project ) ; try { return METHOD_1 ( git . METHOD_3 ( ) ) ; } finally { git . close ( ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( VAR_1 . getName ( ) . METHOD_3 ( STRING_1 ) ) && ( VAR_1 . METHOD_2 ( ) ) ; } 
void METHOD_1 ( int status , java.lang.String message ) throws java.io.IOException { METHOD_1 ( status , new TYPE_1 ( message ) ) ; } 
public void onSuccess ( TYPE_1 result ) { TYPE_2 < TYPE_1 > VAR_1 = TYPE_2 . METHOD_1 ( 1 ) . METHOD_2 ( ) ; VAR_1 . set ( 0 , result ) ; VAR_2 . onSuccess ( VAR_1 ) ; } 
public void index ( ) throws TYPE_1 { try { index . apply ( account , new TYPE_2 ( ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public void onSuccess ( final TYPE_1 result ) { display ( result ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; VAR_3 . METHOD_3 ( true ) ; VAR_5 . METHOD_3 ( true ) ; VAR_6 . METHOD_3 ( true ) ; super . METHOD_1 ( VAR_1 ) ; } 
private static < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > METHOD_1 ( ) { return ( ( TYPE_3 < TYPE_1 , TYPE_2 > ) ( TYPE_3 . METHOD_2 ( ) ) ) ; } 
java.lang.String METHOD_1 ( TYPE_1 req ) { java.lang.String VAR_1 = TYPE_2 . METHOD_1 ( req , VAR_2 ) ; return ( VAR_3 ) && ( VAR_1 != null ) ? VAR_1 . METHOD_2 ( VAR_4 ) : VAR_1 ; } 
public void onSuccess ( TYPE_1 result ) { VAR_1 . onSuccess ( ( result != null ? result . METHOD_1 ( ) : null ) ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return VAR_1 . create ( METHOD_2 ( change . METHOD_3 ( ) ) , db , change . getProject ( ) , change.getId ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( status , VAR_2 ) ; } 
public void METHOD_1 ( final java.lang.StringBuilder VAR_1 , final TYPE_2 VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; VAR_1 . append ( VAR_2 ) ; VAR_1 . append ( CHAR_1 ) ; } 
private java.util.List < TYPE_2 > METHOD_1 ( ) { return TYPE_3 . METHOD_3 ( VAR_1 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . get ( ) ; } 
private TYPE_1 METHOD_1 ( ) { try { return TYPE_2 . METHOD_1 ( ) ; } catch ( TYPE_3 e ) { return null ; } } 
protected Account . Id getAccountId ( ) { TYPE_1 u = VAR_1 . get ( ) ; return u . METHOD_1 ( ) ? u . getAccountId ( ) : null ; } 
abstract void METHOD_1 ( boolean VAR_1 ) ; 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id ) { VAR_1 . METHOD_2 ( id ) ; } 
protected TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( null ) ; } 
private void METHOD_1 ( ) throws TYPE_2 . OrmException { VAR_1 . METHOD_2 ( db . patchSets ( ) . METHOD_3 ( changeId ) . METHOD_4 ( ) ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { try ( TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ) { return VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . getValue ( STRING_1 ) ; } } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > query ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gwtorm.server.OrmException { try { return VAR_1 . METHOD_1 ( p ) . changes ( ) ; } catch ( TYPE_2 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } 
public void onSuccess ( TYPE_1 . ChangeInfo result ) { VAR_1 = true ; METHOD_1 ( ) ; TYPE_2 . display ( TYPE_3 . METHOD_2 ( project , id ) ) ; } 
public static TYPE_1 create ( int line , int VAR_1 ) { TYPE_1 VAR_2 = METHOD_1 ( ) . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( line ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( CHAR_1 ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( STRING_2 ) ) ; } 
public int METHOD_1 ( ) { return 0 ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.server.ReviewDb db ) { } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_2 , null , false ) ) , METHOD_3 ( ) . get ( ) ) ; } 
public TYPE_1 . Result to ( java.lang.String ref ) throws java.io.IOException , TYPE_3 { TYPE_4 . add ( git , VAR_1 , VAR_2 ) ; return METHOD_1 ( ref ) ; } 
protected Project . NameKey METHOD_1 ( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 ) throws TYPE_1 { return METHOD_1 ( VAR_1 , VAR_2 , true , null ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { return VAR_2 . METHOD_1 ( VAR_1 ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . Status VAR_2 ) throws java.lang.Exception { return METHOD_2 ( VAR_1 , null , true , VAR_2 ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( new TYPE_1 ( config , false , false , false ) ) ; } 
public void METHOD_1 ( TYPE_1 . ReceiveCommand cmd ) { commands . add ( cmd ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 cm ) { return ( ) - > { TYPE_3 group = METHOD_2 ( cm ) ; if ( group != null ) { group . METHOD_3 ( ) ; } } ; } 
private static boolean METHOD_1 ( java.lang.String value , java.lang.String VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_1 ( value , null ) ; } return TYPE_2 . METHOD_3 ( VAR_1 , value ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert . METHOD_4 ( VAR_1 , n ) ; org.junit.Assert.assertEquals ( STRING_2 , n . METHOD_5 ( ) ) ; } 
public void run ( ) throws java.lang.Exception { METHOD_2 ( ) ; this . run ( ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . Status VAR_2 ) throws java.lang.Exception { return METHOD_2 ( VAR_1 , null , false , VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; user = VAR_3 . create ( VAR_2 ) ; return user ; } 
private static TYPE_1 group ( java.lang.String group ) { return new TYPE_1 ( STRING_1 ) . id ( group ) ; } 
TYPE_1 create ( TYPE_2 ctl , com.google.gerrit.reviewdb.client.Change c , org.eclipse.jgit.revwalk.RevCommit VAR_1 ) ; 
public final void METHOD_1 ( int line , TYPE_2 VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( line , VAR_1 . value ( ) , VAR_2 ) ; } 
public void METHOD_1 ( int id ) { METHOD_2 ( id , true ) ; } 
public void METHOD_1 ( final java.lang.String url ) { this . VAR_1 = url ; } 
public void METHOD_1 ( final java.lang.String email ) { VAR_1 . METHOD_2 ( email ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; } 
private java.util.Set < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id account ) { return VAR_1 . create ( account ) . METHOD_2 ( ) . METHOD_3 ( ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String err ) { return METHOD_1 ( err , null ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , char VAR_2 ) { if ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) >= 0 ) { return VAR_1 . METHOD_3 ( ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) + 1 ) ) ; } return VAR_1 ; } 
void close ( ) { if ( ( update ) != null ) { update . close ( ) ; } VAR_1 . close ( ) ; rw . close ( ) ; repo . close ( ) ; } 
public void METHOD_1 ( ) { } 
public static void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 ) . get ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; METHOD_2 ( ) . to ( VAR_3 class ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { for ( TYPE_2 i : METHOD_2 ( ) ) { i . delete ( id ) ; } METHOD_3 ( id . get ( ) ) ; return null ; } 
public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 . change ( project , id ) . view ( STRING_1 ) . delete ( VAR_1 ) ; } 
TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.Repository db , TYPE_2 VAR_1 ) ; 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_1 == ( VAR_2 ) ) && ( ( ( base ) == null ) || ( ( base . get ( ) ) < 0 ) ) ) { return VAR_3 ; } return VAR_4 ; } 
public java.lang.String apply ( TYPE_1 rsrc ) throws TYPE_2 , TYPE_3 { return rsrc . METHOD_1 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_4 : : new ) ; } 
private com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { return new com.google.gerrit.reviewdb.client . PatchSetApproval ( VAR_1 . METHOD_2 ( ) , VAR_1 ) ; } 
TYPE_1 METHOD_1 ( TYPE_1 . Factory factory ) { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > schema = ( ( VAR_2 ) != null ) ? TYPE_4 . get ( VAR_2 ) : TYPE_4 . METHOD_2 ( ) ; return factory . create ( schema , base ) ; } 
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( true ) ; new TYPE_1 ( TYPE_2 . METHOD_1 ( ) ) . METHOD_4 ( ) ; } 
private TYPE_1 . Gerrit METHOD_1 ( ) { if ( ( gerrit ) == null ) { gerrit = new TYPE_1 . Gerrit ( this , METHOD_2 ( ) ) ; } return gerrit ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList ( VAR_1 ) ; java.util.Collections . METHOD_2 ( VAR_2 , VAR_3 ) ; return VAR_2 ; } 
protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 0 ) , VAR_1 . METHOD_3 ( 0 ) ) ; } 
public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( METHOD_3 ( row ) . name ( ) ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; try { return VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . getValue ( STRING_1 ) ; } finally { VAR_2 . close ( ) ; } } 
TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId , com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ; 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 { if ( id . get ( ) . equals ( STRING_1 ) ) { return new TYPE_1 ( ) ; } throw new TYPE_4 ( id ) ; } 
private static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws java.io.IOException { org.eclipse.jgit.lib.ObjectId VAR_2 = TYPE_1 . METHOD_2 ( patchSet ) ; return TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 ) ; } 
public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ) . isEmpty ( ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; METHOD_2 ( ) . to ( VAR_3 class ) ; } 
void METHOD_1 ( ) { submit . METHOD_2 ( VAR_2 ) ; } 
public void onSuccess ( final TYPE_1 result ) { METHOD_1 ( true ) ; display ( result ) ; } 
protected void METHOD_1 ( ) { rpc ( VAR_2 class ) ; } 
public static PatchSet . Id METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { return new com.google.gerrit.reviewdb.client.PatchSet.Id ( id . getParentKey ( ) , ( ( id . get ( ) ) + 1 ) ) ; } 
public static void query ( java.lang.String query , java.util.Set < TYPE_1 > VAR_1 , TYPE_2 < TYPE_3 > VAR_2 ) { TYPE_3 . query ( query , VAR_1 , VAR_2 , 0 , 0 ) ; } 
protected abstract TYPE_1 METHOD_1 ( ) ; 
public void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) { VAR_1 . onSuccess ( config ) ; } 
TYPE_1 create ( TYPE_2 . Project project , TYPE_3 < TYPE_4 > VAR_1 ) ; 
private boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_2 ) . METHOD_1 ( VAR_1 , METHOD_3 ( ) ) ; } 
private TYPE_1 METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_3 ) ; } 
public Change . Key METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Change . Key ( change . id ) ; } 
public void METHOD_1 ( java.lang.String changeId ) throws TYPE_1 { throw new TYPE_2 ( ) ; } 
public void run ( ) throws java.lang.Exception { VAR_1 . display ( VAR_2 ) ; } 
private boolean METHOD_1 ( org.eclipse.jgit.lib.ObjectId VAR_1 ) { return ( TYPE_1 . METHOD_2 ( name ) ) && ( ( TYPE_1 . METHOD_3 ( name ) . METHOD_4 ( VAR_1 ) ) == 0 ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 input ) { return java.lang.String.format ( STRING_1 , TYPE_2 . METHOD_2 ( VAR_1 , input . change ( ) ) ) ; } 
public static TYPE_1 METHOD_1 ( int id ) { return TYPE_2 . METHOD_2 ( id , STRING_1 ) ; } 
protected Project . NameKey METHOD_1 ( ) { return getChange ( ) . getProject ( ) ; } 
public TYPE_1 get ( TYPE_2 VAR_1 ) { return super . get ( VAR_1 ) ; } 
private void METHOD_1 ( ) throws java.io.IOException { TYPE_1 . HttpServletResponse VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . HttpServletResponse class ) ; servlet . METHOD_3 ( null , VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { return TYPE_3 . refs ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( path ) ; } 
TYPE_1 create ( com.google.gerrit.reviewdb.client.Change . Id changeId , java.lang.String VAR_2 ) ; 
public java.lang.String METHOD_1 ( java.lang.String project ) { return project ; } 
private void display ( final TYPE_1 result ) { VAR_1 . display ( result ) ; if ( VAR_2 ) { VAR_2 = false ; METHOD_1 ( ) ; } } 
public void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( 1 ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 ctl , com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gwtorm.server.OrmException { db . METHOD_2 ( ) . insert ( METHOD_3 ( db , ctl , ps ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return METHOD_1 ( db , patchSet , null , false , false , false ) ; } 
private void METHOD_1 ( java.lang.String ref , TYPE_1 u ) { com.google.common.truth.Truth.assertThat ( u . METHOD_2 ( ref ) . METHOD_3 ( false ) ) . METHOD_4 ( ( STRING_1 + ref ) ) . METHOD_5 ( ) ; } 
protected abstract java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String type ) ; 
public Project . NameKey METHOD_1 ( ) { return project ; } 
public void METHOD_1 ( TYPE_2 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { } 
public TYPE_1 < ? , java.io.IOException > METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return ( VAR_1 ) != null ? submit ( new TYPE_2 ( change , true ) ) : VAR_2 < TYPE_3 , java.io.IOException > METHOD_2 ( null ) ; } 
private Account . Id id ( int n ) { return new com.google.gerrit.reviewdb.client.Account.Id ( n ) ; } 
private boolean METHOD_1 ( TYPE_1 config , java.lang.String VAR_1 ) { return METHOD_2 ( config , STRING_1 , VAR_1 , false , false ) ; } 
public void onSuccess ( final TYPE_1 . Account result ) { if ( result != null ) { TYPE_2 . METHOD_1 ( result , null ) ; } else { TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( ) ; } METHOD_4 ( ) ; } 
private static java.lang.String id ( final int id ) { return TYPE_2 . format ( id ) ; } 
public TYPE_1 < TYPE_2 > apply ( TYPE_3 VAR_1 ) throws java.lang.Exception { if ( ! VAR_1 ) { return ( ( TYPE_1 < TYPE_2 > ) ( VAR_2 . METHOD_1 ( id ) ) ) ; } return TYPE_4 . METHOD_2 ( null ) ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > refs ) { return METHOD_1 ( refs , false ) ; } 
public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 . edit ( project , id ) . METHOD_2 ( STRING_1 ) . get ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; } 
private void METHOD_1 ( java.lang.String group ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( ) . id ( group ) . METHOD_3 ( ) ) . isEmpty ( ) ; } 
private void METHOD_1 ( java.lang.String changeId , com.google.gerrit.reviewdb.client.PatchSet ps ) throws java.lang.Exception { METHOD_1 ( changeId , ps . getId ( ) . get ( ) ) ; } 
public void METHOD_1 ( ) { bind ( VAR_3 class ) . METHOD_2 ( user ) ; } 
public void METHOD_1 ( java.lang.String email ) { this . email = email ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_3 , VAR_1 . changeId , VAR_5 , VAR_6 ) ; assertThat ( VAR_7 ) . METHOD_5 ( ) ; } 
private void METHOD_1 ( TYPE_1 . ChangeInfo info , java.lang.String revision ) { VAR_1 = new TYPE_2 ( info , revision , VAR_2 , VAR_3 , VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_1 ( ) . get ( VAR_1 . get ( ) . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { group ( STRING_1 ) ; METHOD_2 ( STRING_2 ) . METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( METHOD_2 ( STRING_2 ) . METHOD_4 ( ) ) . isEqualTo ( VAR_1 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = null ; } 
java.util.List < TYPE_1 . ChangeInfo > METHOD_1 ( ) throws TYPE_4 ; 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 ) throws com.google.gwtorm.server.OrmException { TYPE_5 VAR_3 = VAR_4 . METHOD_2 ( ) ; if ( VAR_3 != null ) { return METHOD_3 ( VAR_1 , VAR_2 ) ; } return METHOD_4 ( VAR_1 , VAR_2 ) ; } 
private TYPE_1 . ProjectConfig METHOD_1 ( boolean VAR_1 ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , VAR_1 , true , true , true ) ; } 
private boolean METHOD_1 ( ) { for ( TYPE_1 group : VAR_1 ) { if ( METHOD_2 ( group ) ) { return true ; } } return false ; } 
public void METHOD_1 ( TYPE_2 . NameKey branch ) { if ( METHOD_2 ( branch ) ) { METHOD_3 ( branch ) ; } } 
public java.lang.String format ( java.lang.String projectName , java.lang.String revision , TYPE_1 cfg , java.lang.String VAR_1 ) { return ( STRING_1 + ( TYPE_2 . METHOD_1 ( VAR_1 ) ) ) + STRING_2 ; } 
public static TYPE_1 . Key METHOD_1 ( final java.lang.String VAR_1 ) { final TYPE_1 . Key r = new TYPE_1 . Key ( ) ; r . METHOD_2 ( VAR_1 ) ; return r ; } 
private java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return VAR_1 . get ( ) . METHOD_1 ( topic ) ; } 
public void METHOD_1 ( TYPE_1 in ) throws TYPE_2 { try { VAR_1 . apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_3 | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
private void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { METHOD_2 ( req , rsp ) ; } 
void METHOD_1 ( TYPE_1 e ) { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 . getValue ( VAR_2 . METHOD_4 ( ) ) ) ) ; if ( ( view ) != null ) { view . METHOD_5 ( ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_4 , TYPE_5 { return VAR_3 . create ( VAR_1 , db , repo , rw , VAR_4 , VAR_5 , METHOD_2 ( VAR_6 ) , VAR_7 ) ; } 
public void METHOD_1 ( TYPE_1 a , TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ps ) { METHOD_1 ( a , ps , null , false , null ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . get ( ) . METHOD_3 ( VAR_3 ) ; } 
void METHOD_1 ( TYPE_1 apply ) { VAR_1 . METHOD_1 ( ( ) - > VAR_2 . METHOD_1 ( apply : : run ) ) ; } 
public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , psId . getParentKey ( ) , java.lang.String . METHOD_2 ( psId . get ( ) ) ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 p = new TYPE_1 ( 0 ) ; org.junit.Assert.assertEquals ( 0 , p . METHOD_2 ( ) ) ; } 
private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account account ) { return new TYPE_1 ( new TYPE_2 ( VAR_1 ) , account , TYPE_3 . of ( ) , new TYPE_4 < > ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = METHOD_2 ( STRING_1 ) ; VAR_2 = METHOD_2 ( STRING_2 ) ; } 
void METHOD_1 ( java.lang.String project , java.lang.String ref , int VAR_1 ) { METHOD_2 ( new TYPE_1 ( project , ref , VAR_1 ) ) ; } 
private void METHOD_1 ( final TYPE_2 VAR_2 ) { final TYPE_3 [ ] VAR_3 = VAR_4 . METHOD_2 ( ) ; for ( final TYPE_3 m : VAR_3 ) { METHOD_3 ( m , VAR_2 ) ; } } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { return query ( TYPE_1 . commit ( VAR_1 ) ) ; } 
private void METHOD_1 ( TYPE_1 cm ) { if ( cm . METHOD_2 ( ) ) { TYPE_2 VAR_1 = cm . METHOD_5 ( ) ; cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) ; cm . METHOD_5 ( null ) ; } } 
public void add ( final TYPE_1 VAR_1 ) { assert ! ( VAR_2 . METHOD_1 ( VAR_3 ) ) ; if ( ! ( VAR_2 . METHOD_1 ( VAR_3 ) ) ) { VAR_2 . put ( VAR_3 , VAR_1 ) ; } } 
public int METHOD_1 ( ) { return 1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( ( STRING_1 + ( METHOD_2 ( ) ) ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; } 
TYPE_2 < TYPE_3 , ? > create ( TYPE_3 VAR_1 , TYPE_4 id ) throws TYPE_5 ; 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws com.google.gwtorm.server.OrmException { return get . apply ( VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 < java.lang.String > event ) { TYPE_2 . display ( event . getValue ( ) ) ; } 
public void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } } 
private static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String commit , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( commit ) . view ( VAR_1 ) ; } 
public boolean apply ( TYPE_1 input ) { return input . getProject ( ) . METHOD_1 ( ) . equals ( ctl . getProject ( ) . METHOD_1 ( ) ) ; } 
TYPE_1 METHOD_1 ( ) throws java.lang.Exception ; 
private static final native void METHOD_1 ( java.lang.String d , java.lang.String e , java.lang.String r , java.lang.String VAR_1 ) ; 
public TYPE_1 < ? , java.io.IOException > METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return ( VAR_1 ) != null ? submit ( new TYPE_2 ( new com.google.gerrit.server.query.change.ChangeData ( change ) , false ) ) : VAR_2 < TYPE_3 , java.io.IOException > METHOD_2 ( null ) ; } 
public static TYPE_1 < com.google.gerrit.reviewdb.client . AccountGroup > name ( java.lang.String name ) { return new TYPE_3 ( VAR_1 , VAR_2 , name ) ; } 
private java.lang.String METHOD_1 ( ) { return ( STRING_1 + ( VAR_1 ) ) + STRING_2 ; } 
public void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( ( - 1 ) ) ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.ObjectId VAR_1 ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = METHOD_2 ( ) ; return new TYPE_1 ( c . getProject ( ) , c . getId ( ) , VAR_1 , walk , VAR_2 ) ; } 
protected void METHOD_1 ( ) throws TYPE_1 { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( ) ) ; } 
public final native void METHOD_1 ( boolean m ) ; 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_2 ( VAR_1 ) ) . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_2 , STRING_3 , STRING_4 ) ) ; } 
protected TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return new TYPE_2 ( server ) ; } 
public void METHOD_1 ( final TYPE_1 event ) { TYPE_2 . display ( TYPE_3 . METHOD_2 ( revision . getParentKey ( ) , revision . getId ( ) ) ) ; } 
protected java.lang.String getRefName ( ) { return TYPE_1 . METHOD_1 ( getId ( ) ) ; } 
void METHOD_1 ( final java.lang.String name ) { this . name = name ; } 
private boolean METHOD_1 ( ) { return ( VAR_1 . METHOD_2 ( ( STRING_1 + ( getRefName ( ) ) ) ) . METHOD_3 ( VAR_2 ) ) && ( METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( in , METHOD_4 ( in ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , int row , int VAR_2 ) { if ( row > 0 ) { METHOD_2 ( row ) ; } } 
protected void METHOD_1 ( TYPE_1 result ) { METHOD_2 ( VAR_1 ) ; VAR_1 = null ; METHOD_3 ( VAR_2 , VAR_3 ) ; VAR_2 = null ; VAR_3 = null ; } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 , TYPE_2 VAR_3 , int line ) { return TYPE_3 . METHOD_1 ( STRING_1 , project , VAR_1 , revision , VAR_2 , VAR_3 , line ) ; } 
public void onSuccess ( TYPE_1 . ChangeInfo info ) { info . METHOD_1 ( ) ; METHOD_2 ( info , base ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { TYPE_1 VAR_1 = VAR_2 . create ( VAR_3 , account ) ; return rsrc . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 rsrc ) { return new TYPE_3 ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( METHOD_6 ( rsrc ) ) ; } 
private void METHOD_1 ( final TYPE_1 event ) { TYPE_2 change = VAR_1 . get ( ) ; if ( VAR_2 . METHOD_2 ( change ) ) { METHOD_3 ( change ) ; } } 
static int METHOD_2 ( int in ) { return TYPE_1 . METHOD_2 ( VAR_1 , in ) ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . get ( ) . METHOD_3 ( STRING_2 ) ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , java.util.Set < TYPE_3 > s ) { VAR_1 . METHOD_2 ( STRING_1 , TYPE_4 . METHOD_3 ( TYPE_3 . METHOD_4 ( s ) ) ) ; } 
public void METHOD_1 ( boolean value , java.lang.String message ) { throw new TYPE_1 ( ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return VAR_1 == null ? STRING_1 : VAR_1 ; } 
java.lang.String patchSets ( int VAR_1 , int VAR_2 ) ; 
private java.lang.String url ( TYPE_1 r ) { return TYPE_2 . METHOD_1 ( changeId , r . id ( ) ) ; } 
TYPE_1 create ( TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return create ( VAR_1 , VAR_2 . create ( db , change ) ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return null ; } return VAR_4 . get ( getProject ( ) . METHOD_2 ( VAR_3 ) ) ; } 
private static void METHOD_1 ( TYPE_1 label , TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new java.util.ArrayList < > ( ) ; } VAR_2 . add ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; } 
public java.lang.String [ ] METHOD_1 ( ) { return new java.lang.String [ 0 ] ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ( STRING_1 ) ; VAR_1 = java.util.Collections . METHOD_2 ( STRING_2 ) ; METHOD_3 ( in , VAR_2 class ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( 0 <= VAR_1 ) { return STRING_1 + VAR_1 ; } return java.lang.String . METHOD_2 ( VAR_1 ) ; } 
public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 args , TYPE_4 VAR_1 ) { return new TYPE_5 ( args . db , VAR_2 , VAR_1 ) ; } 
public TYPE_1 . Account run ( TYPE_1 . ReviewDb db ) throws TYPE_2 . OrmException { return db . METHOD_1 ( ) . get ( TYPE_3 . getAccountId ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 . run ( ) ; } 
public TYPE_1 METHOD_1 ( ) { VAR_2 = null ; return this ; } 
public void run ( ) { VAR_1 . info ( STRING_1 ) ; METHOD_1 ( ) ; } 
private java.util.Map < java.lang.String , java.util.List < TYPE_1 > > METHOD_1 ( java.lang.String path ) throws java.lang.Exception { return METHOD_2 ( path , new TYPE_2 < java.util.Map < java.lang.String , java.util.List < TYPE_1 > > > ( ) { } ) ; } 
public static void query ( java.lang.String query , java.util.Set < TYPE_2 > VAR_1 , TYPE_3 < TYPE_4 > VAR_2 ) { TYPE_5 VAR_3 = TYPE_4 . METHOD_1 ( query ) ; TYPE_4 . METHOD_2 ( VAR_3 , VAR_1 ) ; VAR_3 . get ( VAR_2 ) ; } 
public static TYPE_1 . Change METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 . Change ( VAR_1 . project , VAR_2 , VAR_1 . id , VAR_1 . topic , VAR_1 . branch ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String project , int id ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int line ) { METHOD_1 ( VAR_1 , VAR_2 , line , VAR_3 . METHOD_3 ( ) ) ; } 
private boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ( STRING_1 + ( VAR_2 ) ) ) . METHOD_3 ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 . ProjectConfig ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; util . add ( VAR_1 ) ; } 
private static boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String token ) { if ( token . METHOD_2 ( VAR_1 ) ) { VAR_2 = VAR_1 . length ( ) ; return true ; } return false ; } 
public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return METHOD_1 ( db , patchSet , null , false ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( ( ( STRING_1 + ( VAR_2 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change . getStatus ( ) . METHOD_1 ( ) ) { change . METHOD_2 ( ) ; change . METHOD_3 ( null ) ; return change ; } else { return null ; } } 
protected void METHOD_1 ( ) { METHOD_2 ( ) . to ( VAR_2 class ) ; } 
public boolean METHOD_1 ( TYPE_1 . Id VAR_1 ) { return false ; } 
public static < TYPE_1 > TYPE_2 < TYPE_1 > create ( ) { return new TYPE_2 < TYPE_1 > ( ) ; } 
protected TYPE_1 METHOD_1 ( java.lang.String path ) throws java.lang.Exception { TYPE_1 res = METHOD_2 ( path , STRING_1 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_3 ( VAR_2 ) ) . isEqualTo ( STRING_2 ) ; return res ; } 
public java.lang.String format ( java.lang.String projectName , TYPE_1 cfg , java.lang.String VAR_1 ) throws java.io.IOException { return TYPE_2 . create ( VAR_2 class . METHOD_1 ( ) ) . METHOD_2 ( VAR_1 , new TYPE_3 < java.lang.String , TYPE_4 > ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String changeId ) throws TYPE_2 , TYPE_3 { return VAR_1 . get ( getKey ( null , METHOD_2 ( changeId ) ) , project ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( db ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( VAR_2 , VAR_3 ) ; } } 
public org.eclipse.jgit.revwalk.RevCommit commit ( ) throws java.io.IOException { return commit ( TYPE_1 . METHOD_1 ( VAR_1 , STRING_1 ) . create ( change . getProject ( ) , user ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String id , java.lang.String email ) throws java.lang.Exception { VAR_2 . create ( ) . insert ( TYPE_1 . METHOD_2 ( VAR_1 , id , user . getAccountId ( ) , email ) ) ; METHOD_3 ( ) ; } 
TYPE_1 get ( TYPE_2 input , TYPE_3 args ) throws com.google.gwtorm.server.OrmException , java.io.IOException ; 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 class ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; } 
protected void METHOD_1 ( final int row ) { super . METHOD_1 ( row ) ; VAR_1 . METHOD_2 ( METHOD_3 ( row ) . name ( ) ) ; METHOD_4 ( ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final boolean VAR_2 ) { VAR_3 . put ( VAR_1 . getName ( ) , VAR_2 ) ; } 
void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( false ) ; } 
void METHOD_1 ( TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ; 
public void METHOD_1 ( ) { set ( null ) ; } 
public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 . get ( ) . project ) ; } 
public TYPE_1 create ( com.google.gerrit.reviewdb.client.Change . Id id ) ; 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_3 ( STRING_1 ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = name ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( name ) . get ( ) . name ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { throw new TYPE_3 ( message ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( METHOD_3 ( VAR_1 , VAR_4 , null , VAR_5 , VAR_2 , false ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ; METHOD_3 ( ) ; org.junit.Assert.assertEquals ( ( STRING_1 + ( STRING_2 + STRING_4 ) ) , METHOD_2 ( STRING_1 ) ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { final TYPE_1 r = new TYPE_1 ( VAR_1 , VAR_2 ) ; r . METHOD_2 ( false ) ; r . METHOD_3 ( true ) ; VAR_3 . add ( r ) ; return r ; } 
public void METHOD_1 ( final TYPE_1 . NameKey branch ) { if ( METHOD_2 ( branch ) ) { METHOD_3 ( branch ) ; } } 
private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( projectName ) ; } } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( METHOD_2 ( db ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ; } 
public void run ( ) { VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( ) ; VAR_4 . METHOD_3 ( ) ; } 
public TYPE_1 . Id getId ( ) { return changeId ; } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws com.google.gwtorm.server.OrmException { return query ( TYPE_1 . METHOD_2 ( TYPE_2 . project ( project ) , TYPE_3 . METHOD_3 ( ) ) ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ; return VAR_2 . to ( git , STRING_1 ) . getChangeId ( ) ; } 
private void METHOD_1 ( TYPE_1 c , TYPE_2 msg ) { METHOD_2 ( c . notes ( ) , msg , true ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 user ) { java.lang.String VAR_1 = user . METHOD_2 ( ) ; if ( TYPE_3 . METHOD_3 ( VAR_1 ) ) { return VAR_2 ; } else { return VAR_3 . get ( VAR_1 ) ; } } 
public void onSuccess ( final TYPE_1 result ) { VAR_1 . display ( result ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String message , TYPE_2 log ) { return ( error ) - > log . error ( ( message + ( error . getMessage ( ) ) ) ) ; } 
public void message ( java.lang.String message ) { VAR_1 . METHOD_1 ( message ) ; VAR_1 . METHOD_2 ( ) ; } 
public void METHOD_1 ( ) throws java.io.IOException , java.lang.Exception , TYPE_1 { java.lang.String changeId = METHOD_2 ( ) . getChangeId ( ) ; java.util.List < TYPE_2 > reviewers = METHOD_3 ( changeId , STRING_1 , INT_1 ) ; org.junit.Assert.assertEquals ( reviewers . size ( ) , 0 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) throws java.lang.Exception { return VAR_2 . get ( VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( ) { return ( info ) != null ? new TYPE_2 ( info ) : new TYPE_2 ( id ) ; } 
protected org.eclipse.jgit.lib.Repository METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; return repo ; } 
public TYPE_1 apply ( TYPE_2 rsrc , TYPE_3 input ) throws java.io.IOException { VAR_1 . index ( rsrc . getChange ( ) ) ; return TYPE_6 . METHOD_1 ( ) ; } 
java.lang.String METHOD_1 ( java.lang.String changeId , int ps ) ; 
TYPE_1 create ( TYPE_2 project , java.lang.String id ) ; 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id ) { if ( id == null ) { return null ; } return METHOD_1 ( VAR_1 . get ( id ) . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( this ) ; } 
void METHOD_1 ( TYPE_1 e ) { input . METHOD_2 ( false ) ; TYPE_2 . METHOD_3 ( VAR_2 , false ) ; } 
public boolean METHOD_1 ( TYPE_1 ctx ) { ctx . METHOD_2 ( psId ) . METHOD_3 ( magicBranch . topic ) ; return true ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 . NameKey VAR_1 ) throws java.lang.Exception { return TYPE_4 . METHOD_1 ( repo , VAR_1 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_4 = VAR_1 ; } 
protected static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 args , java.lang.String label , int VAR_1 ) { if ( VAR_1 != 0 ) { return TYPE_3 . METHOD_2 ( args , label , VAR_1 ) ; } return TYPE_3 . METHOD_3 ( args , label ) ; } 
public void run ( ) { VAR_1 . close ( ) ; } 
public void METHOD_1 ( final TYPE_1 event ) { if ( ( event . METHOD_3 ( ) ) == ( VAR_1 ) ) { METHOD_4 ( ) ; } } 
private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; com.google.common.truth.Truth.assertThat ( res . getStatus ( ) ) . isEqualTo ( VAR_1 ) ; } 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_2 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; } 
public short METHOD_1 ( ) throws TYPE_1 { return ( ( short ) ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , STRING_2 , 2 ) ) ) ; } 
public void insert ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { } 
protected void METHOD_1 ( TYPE_1 line ) throws java.io.IOException { VAR_1 . append ( line ) ; } 
private static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > commit ( java.lang.String id ) { return new TYPE_2 ( id ) ; } 
public java.lang.String format ( java.lang.String projectName , java.lang.String revision , TYPE_1 cfg , java.lang.String VAR_1 ) throws java.io.IOException ; 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 = VAR_1 ; } 
void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( VAR_2 . METHOD_2 ( ) , false ) ; } 
public void onSuccess ( ) { TYPE_1 . display ( token , new TYPE_2 ( project , id , line ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 , STRING_1 , VAR_5 , VAR_6 , user ) ; } 
private boolean METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; } 
protected java.lang.String METHOD_1 ( final int s , int e ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , null ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , s , e ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_3 . ReceiveCommand cmd : commands . values ( ) ) { VAR_1 . METHOD_3 ( cmd ) ; } } 
protected void METHOD_1 ( ) { METHOD_2 ( ( ( VAR_1 ) + 1 ) , VAR_2 , VAR_3 , VAR_4 ) ; } 
protected void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = new TYPE_1 ( repo ) ; VAR_1 . METHOD_3 ( in , out , err ) ; } 
protected TYPE_1 < ? > METHOD_1 ( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) throws java.lang.Exception { return METHOD_1 ( name , VAR_1 , true , METHOD_2 ( ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { return null ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.lang.String VAR_1 ) throws TYPE_2 { return METHOD_2 ( projectName , VAR_1 ) . METHOD_3 ( false ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_1 ( ) ; } 
TYPE_1 create ( com.google.gerrit.reviewdb.client.Change . Id id ) ; 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id ) { key = new TYPE_1 . Key ( ( STRING_1 + id ) ) ; VAR_1 = new TYPE_2 ( id , 0 , false , null , 0 , null ) ; } 
void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 , true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( STRING_1 ) ) . isEqualTo ( VAR_1 ) ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 ) { return ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_1 ( project . get ( ) , commit ) ; } 
java.lang.String METHOD_1 ( int changeId ) ; 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String path ) { return new TYPE_1 ( VAR_1 , config , path ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( METHOD_2 ( ) ) { return METHOD_3 ( ) . METHOD_1 ( ) ; } return null ; } 
public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 . change ( project , id ) . delete ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ( STRING_1 ) ; VAR_1 . projects ( ) . create ( in ) ; VAR_1 . projects ( ) . create ( in ) ; } 
public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( STRING_3 ) ; } catch ( TYPE_2 VAR_1 ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( ) . getChangeId ( ) ; METHOD_3 ( changeId , STRING_1 ) ; TYPE_3 . ChangeInfo c = info ( changeId ) ; org.junit.Assert . METHOD_4 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { db . close ( ) ; } 
protected void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } super . METHOD_1 ( ) ; } 
protected < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.String path , TYPE_2 VAR_1 ) throws java.lang.Exception { return METHOD_1 ( path , VAR_1 , STRING_1 ) ; } 
private void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( change , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { } } 
public TYPE_1 notes ( ) { return notes ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( new TYPE_1 ( this ) ) ; super . METHOD_1 ( ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id ) { if ( id == null ) { return null ; } return METHOD_1 ( VAR_1 . get ( id ) ) ; } 
public abstract Project . NameKey METHOD_1 ( ) ; 
public void METHOD_1 ( ) throws TYPE_1 { org.junit.Assert . METHOD_2 ( METHOD_3 ( STRING_1 ) ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 ... values ) { return new TYPE_1 ( name , TYPE_3 . METHOD_2 ( values ) ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_2 ( STRING_1 ) ) . isEmpty ( ) ; } 
public boolean apply ( com.google.gerrit.reviewdb.client.PatchSet.Id in ) { return ( VAR_2 . apply ( in ) ) && ( patchSets . METHOD_1 ( in ) ) ; } 
protected < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > put ( TYPE_4 < TYPE_5 < TYPE_1 > > VAR_1 , java.lang.String name ) { return new TYPE_3 ( view ( VAR_1 , VAR_2 , name ) ) ; } 
public final native void message ( java.lang.String m ) ; 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = - 1 ; super . METHOD_1 ( VAR_1 ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; display ( ) ; METHOD_2 ( false , false ) ; } 
public com.google.gerrit.reviewdb.client.Change getChange ( ) { return change . getChange ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_2 , ( ( VAR_1 ) + STRING_1 ) ) ; VAR_2 . METHOD_3 ( STRING_2 ) ; } 
private static void METHOD_1 ( int changeId , java.lang.String VAR_1 ) { com.google.common.truth.Truth.assertThat ( TYPE_1 . METHOD_2 ( VAR_1 ) ) . isEqualTo ( new com.google.gerrit.reviewdb.client.Change . Id ( changeId ) ) ; } 
public static TYPE_1 assertThat ( TYPE_2 VAR_1 ) { return com.google.common.truth.Truth . METHOD_1 ( TYPE_1 : : new ) . METHOD_2 ( VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id ( VAR_1 . METHOD_2 ( TYPE_3 . getName ( ) ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; return VAR_2 . get ( ) . get ( id ) ; } 
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_5 . Factory class ) ; } 
protected TYPE_1 METHOD_1 ( ) { return server . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { servlet = new TYPE_1 ( VAR_1 ) ; id = new com.google.gerrit.reviewdb.client.Account.Id ( VAR_2 ) ; TYPE_3 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . METHOD_5 ( ( STRING_1 + ( VAR_2 ) ) ) ; } 
void METHOD_1 ( TYPE_1 . NameKey projectName , java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_2 < java.util.List < TYPE_3 . Branch > > VAR_3 ) ; 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) ; } } 
public TYPE_1 . Result METHOD_1 ( TYPE_2 edit , java.lang.String file , TYPE_3 VAR_1 ) throws TYPE_4 , TYPE_5 , java.io.IOException { return METHOD_2 ( VAR_2 , edit , file , null , VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 r = VAR_2 . METHOD_2 ( VAR_1 ) ; r . METHOD_3 ( ) ; return r ; } 
public TYPE_1 user ( TYPE_2 user ) { return METHOD_1 ( ) . equals ( user ) ? this : METHOD_2 ( user ) . METHOD_3 ( cd , db ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws com.google.gwtorm.server.OrmException { return new TYPE_1 ( VAR_1 ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 < TYPE_3 > > result ) { VAR_1 = METHOD_1 ( result . get ( path ) ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; close . METHOD_2 ( true ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( ( ! VAR_1 ? VAR_4 : VAR_5 ) ) ; } 
public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet VAR_1 ) { if ( VAR_1 . METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( false ) ; return VAR_1 ; } return null ; } 
static TYPE_1 METHOD_1 ( java.lang.String name , int value ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; TYPE_3 . METHOD_2 ( value , 0 , VAR_1 ) ; return new TYPE_1 ( name , VAR_1 . get ( ) ) ; } 
public TYPE_1 changes ( ) { return changes ; } 
public void run ( ) { METHOD_4 ( ) ; } 
public void onSuccess ( TYPE_1 . ChangeInfo result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , new com.google.gerrit.reviewdb.client.PatchSet.Id ( result . METHOD_2 ( ) , 1 ) , STRING_1 ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 config = db . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , 1 , 1 ) ; } 
private TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 r ; r = new TYPE_1 ( VAR_1 , new TYPE_3 ( db ) ) ; VAR_2 . METHOD_3 ( VAR_1 , r ) ; return r ; } 
private void METHOD_1 ( TYPE_1 . HttpServletResponse res , TYPE_2 VAR_1 ) throws java.io.IOException { try ( TYPE_2 in = VAR_1 ; TYPE_3 out = res . METHOD_2 ( ) ) { TYPE_4 . METHOD_3 ( in , out ) ; } } 
public abstract java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 ... args ) ; 
java.util.Set < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId , java.lang.String query , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) ; 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; VAR_1 = null ; VAR_2 = null ; VAR_3 = null ; } } 
private static void METHOD_1 ( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , TYPE_2 ... values ) { TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; for ( TYPE_2 value : values ) { VAR_1 . append ( value ) ; } VAR_1 . append ( CHAR_1 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) throws TYPE_3 { return VAR_1 ; } 
private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( VAR_2 ) ; } } 
private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) ; } return VAR_1 ; } 
public TYPE_1 get ( ) { return new TYPE_1 ( ui , VAR_2 ) ; } 
public java.lang.String name ( ) { return name ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return new TYPE_1 ( args , change , false , null ) . METHOD_2 ( ) ; } 
public static boolean METHOD_1 ( java.lang.String ref ) { return ( ( ref != null ) && ( ref . METHOD_2 ( VAR_1 ) ) ) && ( ref . contains ( VAR_2 ) ) ; } 
public TYPE_1 create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , id , null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_4 , VAR_5 ) ; METHOD_4 ( VAR_1 . changeId , VAR_4 , VAR_6 ) ; assertThat ( VAR_7 ) . METHOD_5 ( ) ; } 
private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) ; VAR_1 . METHOD_6 ( true ) ; } return VAR_1 ; } 
public int run ( ) throws java.lang.Exception { TYPE_3 . METHOD_2 ( false ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . close ( ) ; VAR_2 . METHOD_5 ( STRING_1 ) ; return 0 ; } 
public boolean equals ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return false ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; return VAR_3 . equals ( VAR_4 ) ; } 
protected TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) { return view ; } 
public static void get ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String path , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 . get ( project , id , path , false , VAR_1 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return java.util.Collections . METHOD_2 ( VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 . Result r , java.lang.String message ) throws java.lang.Exception { METHOD_1 ( r , message , false , false , null ) ; } 
private java.lang.String format ( java.lang.String s ) { if ( ( s . length ( ) ) < ( VAR_1 ) ) { return s ; } return s . METHOD_1 ( 0 , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 c ) { METHOD_2 ( c ) ; TYPE_2 . METHOD_3 ( ( ( c . getStatus ( ) ) == ( VAR_1 ) ) , STRING_1 ) ; put . add ( c ) ; } 
private TYPE_1 . ChangeInfo METHOD_1 ( TYPE_2 . Result r ) throws java.lang.Exception { return METHOD_1 ( r . getChangeId ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this ) ; } 
public static TYPE_1 create ( ) { final TYPE_1 r = new TYPE_1 ( ) ; r . singleton = new TYPE_1 . Key ( ) ; return r ; } 
public static java.lang.String METHOD_1 ( final java.lang.String type , final TYPE_1 . Key id ) { return ( ( STRING_1 + type ) + STRING_2 ) + ( id . toString ( ) ) ; } 
private void METHOD_1 ( final java.lang.String in ) throws java.lang.Exception { org.junit.Assert.assertEquals ( in , METHOD_2 ( in ) ) ; } 
void METHOD_1 ( ) { VAR_2 . METHOD_4 ( VAR_1 , this ) ; } 
void insert ( TYPE_1 VAR_1 ) throws java.io.IOException { VAR_2 . METHOD_1 ( VAR_1 ) ; } 
public java.util.List < com.google.gerrit.reviewdb.client . AccountGroup > get ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) . METHOD_1 ( ) ; } 
public void METHOD_1 ( TYPE_1 in ) throws TYPE_2 { try { VAR_1 . apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; super . METHOD_1 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > p = METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( p , TYPE_2 . METHOD_4 ( p , STRING_2 ) ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { try { VAR_2 . apply ( VAR_3 , VAR_1 ) ; } catch ( java.lang.Exception e ) { throw TYPE_2 . METHOD_3 ( STRING_1 , e ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( ( STRING_1 + VAR_1 ) ) ; } 
private static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 < TYPE_3 < com.google.gerrit.server.query.change.ChangeData , ? > > VAR_1 ) { return new TYPE_1 ( true , VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( ) { switch ( VAR_1 ) { case VAR_2 : return TYPE_2 . METHOD_2 ( false ) ; case VAR_3 : return TYPE_3 . METHOD_2 ( false ) ; default : throw new TYPE_4 ( ( STRING_1 + ( VAR_1 ) ) ) ; } } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_1 config = new TYPE_1 ( new TYPE_3 ( projectName , VAR_1 ) , new TYPE_5 ( ) ) ; return config ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 { return METHOD_2 ( project ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String project , java.lang.String input ) { return input == null ? input : input . METHOD_1 ( STRING_1 , project ) ; } 
public void onSuccess ( final TYPE_1 result ) { TYPE_2 . display ( VAR_1 ) ; } 
private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( projectName , true ) ; } } 
public abstract void METHOD_1 ( ) ; 
private TYPE_1 METHOD_1 ( java.lang.String name ) throws java.lang.Exception { TYPE_2 req = TYPE_2 . METHOD_2 ( name ) ; com.google.gerrit.reviewdb.client.Account.Id id = VAR_1 . METHOD_3 ( req ) . getAccountId ( ) ; return VAR_2 . create ( id ) ; } 
static TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , null , VAR_1 , VAR_4 , VAR_5 . Collections < TYPE_2 > METHOD_2 ( ) , 0 , 0 , 0 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { TYPE_1 VAR_1 = VAR_2 . create ( account ) ; return rsrc . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ; } 
public void onSuccess ( java.lang.String result ) { TYPE_1 edit = new TYPE_1 ( id , result , path , VAR_1 , VAR_2 , VAR_3 ) ; edit . METHOD_2 ( ) ; } 
private TYPE_1 METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = repo . METHOD_3 ( ) . METHOD_4 ( ) ; } return VAR_1 ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; VAR_2 . METHOD_2 ( false ) ; VAR_1 = null ; } } 
private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( TYPE_3 . css ( ) . METHOD_3 ( ) ) ; VAR_2 . add ( VAR_1 ) ; } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( java.lang.String format ) throws TYPE_2 { VAR_1 . METHOD_2 ( format ) ; return VAR_1 . apply ( revision ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_2 , VAR_3 , VAR_3 . getKey ( ) . get ( ) ) ; METHOD_2 ( VAR_2 , null , STRING_1 ) ; } 
public TYPE_1 create ( TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Change . Id id ) ; 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = new TYPE_2 ( new TYPE_3 ( STRING_1 ) ) ; repo = new TYPE_4 ( r ) ; servlet = TYPE_5 . create ( repo ) ; } 
void METHOD_1 ( boolean on ) { VAR_1 = on ; if ( ( table ) != null ) { table . METHOD_2 ( on ) ; } } 
protected java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String type ) { return METHOD_2 ( VAR_1 , type , VAR_2 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_2 ) ; 
public TYPE_1 METHOD_1 ( TYPE_1 in ) throws TYPE_2 { try { return VAR_1 . apply ( account , in ) ; } catch ( java.io.IOException | TYPE_3 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
java.lang.String METHOD_1 ( ) ; 
public java.lang.String format ( java.lang.String projectName , TYPE_1 cfg , java.lang.String VAR_1 ) throws java.io.IOException ; 
private com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 , TYPE_1 ctl ) { return new com.google.gerrit.reviewdb.client . PatchSetApproval ( VAR_1 . METHOD_2 ( ) , VAR_1 ) ; } 
private static final native void METHOD_1 ( java.lang.String e , java.lang.String r , java.lang.String VAR_1 ) ; 
protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , org.eclipse.jgit.revwalk.RevCommit commit ) throws java.lang.Exception { return METHOD_2 ( repo , commit , null , null , null ) ; } 
private static TYPE_1 METHOD_1 ( final TYPE_2 cfg ) { return TYPE_4 . METHOD_3 ( cfg , STRING_1 , null , STRING_2 , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = TYPE_5 . create ( repo ) ; } 
public TYPE_1 create ( com.google.gerrit.reviewdb.client.Change . Id changeId , com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , changeId , VAR_1 ) ; } 
public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 < TYPE_1 > VAR_3 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . put ( VAR_2 , VAR_3 ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( METHOD_2 ( ) ) || ( METHOD_3 ( db ) ) ; } 
TYPE_1 METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_3 . get ( config . METHOD_2 ( ) . METHOD_3 ( ) ) ; TYPE_4 . METHOD_4 ( VAR_1 ) ; return VAR_1 ; } 
private static void a ( final java.lang.StringBuilder r , final java.lang.String VAR_1 ) { TYPE_2 . METHOD_1 ( r , STRING_1 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( query ( in ) , METHOD_3 ( in ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_2 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_3 ( STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_2 ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; METHOD_2 ( ) . to ( VAR_2 class ) ; METHOD_2 ( ) . to ( VAR_3 class ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_2 , false , VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > p ) throws TYPE_3 { return new TYPE_1 ( p , index ) ; } 
public static java.lang.String METHOD_1 ( java.lang.String query , java.lang.String VAR_1 ) { return ( ( STRING_3 + ( TYPE_1 . METHOD_2 ( query ) ) ) + STRING_4 ) + VAR_1 ; } 
public void onSuccess ( final TYPE_1 result ) { VAR_1 = result . config ; if ( ( result . account ) != null ) { VAR_3 = result . account ; TYPE_2 . METHOD_1 ( ) ; } METHOD_2 ( VAR_4 ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_3 . contains ( VAR_1 ) ; } 
private boolean METHOD_1 ( final com.google.gerrit.reviewdb.client.Change VAR_1 ) { return VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . contains ( VAR_1 . getId ( ) ) ; } 
void METHOD_1 ( ) { this . VAR_1 = true ; METHOD_2 ( ) ; } 
public static void edit ( int id , TYPE_1 < TYPE_3 > VAR_1 ) { TYPE_4 . edit ( id ) . get ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; } 
private void METHOD_1 ( final java.lang.String n ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 . contains ( n ) ) { throw new com.google.gwtorm.server.OrmException ( ( ( STRING_1 + n ) + STRING_2 ) ) ; } } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; } 
public boolean METHOD_1 ( java.lang.String url ) { return ui . METHOD_2 ( false , STRING_1 , url ) ; } 
protected abstract TYPE_1 < ? > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) ; 
public java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { try { return VAR_1 . apply ( change ) . value ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public static TYPE_1 METHOD_1 ( ) { return TYPE_1 . create ( 0 , 0 , VAR_1 ) ; } 
private TYPE_1 . ProjectConfig METHOD_1 ( boolean VAR_1 ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , VAR_1 , true ) ; } 
protected java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String type ) { return TYPE_1 . METHOD_2 ( VAR_1 , type , VAR_2 . METHOD_4 ( ) ) ; } 
public static TYPE_1 reviewers ( java.lang.String project , int id ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) ; } 
public TYPE_1 create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , id ) ; } 
public void onSuccess ( TYPE_1 result ) { VAR_1 . update ( result ) ; } 
public static TYPE_1 create ( java.lang.String VAR_1 , java.lang.String id , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) { return TYPE_1 . create ( TYPE_3 . create ( VAR_1 , id ) , VAR_2 , null , null ) ; } 
private void METHOD_1 ( ) { TYPE_1 . HttpServletResponse VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . HttpServletResponse class ) ; servlet . METHOD_3 ( null , VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_3 ) ; } 
private static void METHOD_1 ( final java.lang.String [ ] VAR_1 ) throws TYPE_1 , TYPE_2 . OrmException { TYPE_3 . METHOD_2 ( false ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . close ( ) ; VAR_2 . METHOD_5 ( STRING_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( TYPE_1 . METHOD_2 ( ( ( java.lang.String ) ( null ) ) ) ) . isEmpty ( ) ; } 
TYPE_1 create ( TYPE_2 change , com.google.gerrit.reviewdb.client.Account.Id id ) ; 
public static TYPE_1 . Change METHOD_1 ( TYPE_2 . ChangeInfo VAR_1 ) { return new TYPE_1 . Change ( VAR_1 . project , VAR_2 , VAR_1 . id , VAR_1 . topic , VAR_1 . branch ) ; } 
public TYPE_1 < TYPE_2 , ? > create ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 { if ( id . toString ( ) . equals ( STRING_1 ) ) { return VAR_2 . get ( ) ; } throw new TYPE_5 ( id ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ! ( label ( VAR_1 . METHOD_2 ( ) . get ( ) ) . isEmpty ( ) ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) . to ( VAR_1 class ) ; } 
public void onSuccess ( final TYPE_1 result ) { VAR_1 . display ( result ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_2 . Factory class ) ; } 
protected void METHOD_1 ( int row , int VAR_1 ) { METHOD_3 ( row ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_2 . create ( VAR_1 ) . METHOD_3 ( ) ; } throw new TYPE_2 ( STRING_1 ) ; } 
public void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( ( ! ( METHOD_3 ( ) ) ) ) ; } 
com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( TYPE_1 c ) { return VAR_1 . METHOD_1 ( db . get ( ) , c . notes ( ) , VAR_2 ) ; } 
public static java.lang.String METHOD_1 ( java.lang.String ref ) { return ref . METHOD_2 ( VAR_1 ) ? ref : ( VAR_2 ) + ref ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_1 ( schema , VAR_2 , VAR_1 ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_4 class ) ; factory ( VAR_5 class ) ; bind ( VAR_6 class ) ; bind ( VAR_7 . Factory class ) ; } 
protected java.lang.String getRefName ( ) { return TYPE_1 . METHOD_1 ( ctl . getId ( ) ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; factory ( VAR_3 . Factory class ) ; } 
protected TYPE_1 METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { return TYPE_2 . get ( VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_4 VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . create ( ) ; VAR_3 . METHOD_2 ( VAR_2 , VAR_1 ) ; } 
protected < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > delete ( TYPE_4 < TYPE_5 < TYPE_1 > > VAR_1 , java.lang.String name ) { return new TYPE_3 ( view ( VAR_1 , VAR_2 , name ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; } 
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { commands = ( VAR_1 . isEmpty ( ) ) ? null : VAR_1 ; } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_1 == ( VAR_2 ) ) && ( ( base . METHOD_2 ( ) ) || ( base . METHOD_3 ( ) ) ) ) { return VAR_3 ; } return VAR_4 ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { TYPE_2 r = new TYPE_3 ( cd ) . METHOD_1 ( ) ; if ( ( r . status ) != ( VAR_1 ) ) { return null ; } return r . type ; } 
public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = ( METHOD_2 ( VAR_1 ) ) ? 1 : 0 ; int r = ( METHOD_2 ( VAR_2 ) ) ? 1 : 0 ; return r - VAR_3 ; } 
public void METHOD_1 ( final TYPE_1 event ) { TYPE_2 . display ( VAR_1 ) ; } 
void METHOD_1 ( TYPE_1 . NameKey VAR_1 ) throws java.io.IOException ; 
