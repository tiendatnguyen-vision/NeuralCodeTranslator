public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( false ) ; if ( VAR_1 . METHOD_4 ( ) ) { TYPE_3 . METHOD_5 ( false ) ; } VAR_2 = TYPE_1 . METHOD_6 ( new TYPE_4 ( ) { public void METHOD_7 ( TYPE_5 event ) { METHOD_8 ( ) ; } } ) ; } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; if ( sshd ) { modules.add ( new TYPE_3 ( ) ) ; if ( VAR_1 ) { modules.add ( new TYPE_4 ( ) ) ; } else { modules.add ( new TYPE_5 ( ) ) ; } } else { modules.add ( new TYPE_6 ( ) ) ; } return VAR_4 . METHOD_3 ( modules ) ; } 
void METHOD_1 ( java.lang.String token ) { try { VAR_1 . METHOD_1 ( token , changes , VAR_2 ) ; } catch ( java.io.IOException | TYPE_1 e ) { throw new TYPE_2 ( e . getMessage ( ) , e ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( STRING_2 , e ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; VAR_2 = VAR_3 ; VAR_2 = VAR_2 . METHOD_2 ( ) ; if ( ! ( VAR_2 instanceof TYPE_5 ) ) { throw new TYPE_4 ( STRING_1 , VAR_2 ) ; } else { VAR_1 . METHOD_4 ( ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) ) ; } return VAR_4 ; } 
private void METHOD_1 ( ) throws java.io.IOException { close ( ) ; VAR_1 = repo . METHOD_2 ( ) ; TYPE_1 ref = repo . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; if ( ref == null ) { return ; } try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) ) { VAR_3 = rw . parseCommit ( ref . METHOD_5 ( ) ) ; notes = TYPE_2 . METHOD_7 ( VAR_1 , VAR_3 ) ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 p ) { return ( ) - > { try { return new TYPE_2 ( METHOD_3 ( p ) , TYPE_4 . METHOD_4 ( p . toString ( ) ) , TYPE_5 . METHOD_5 ( p ) ) ; } catch ( TYPE_6 e ) { return VAR_1 ; } } ; } 
private void METHOD_1 ( TYPE_1 . Status VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = result . METHOD_2 ( ref ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . getStatus ( ) ) . METHOD_3 ( message ( VAR_3 ) ) . isEqualTo ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . getMessage ( ) ) . isEqualTo ( VAR_2 ) ; } 
protected void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { rsp . METHOD_2 ( STRING_1 ) ; try ( TYPE_3 in = METHOD_3 ( ) ; TYPE_4 out = rsp . METHOD_4 ( ) ) { TYPE_5 . METHOD_5 ( in , out ) ; } } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return false ; if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { final TYPE_2 < ? > p = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ; } return false ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { try { com.google.gerrit.reviewdb.client.Change change = getChange ( VAR_1 . getChange ( ) ) ; TYPE_2 event = new TYPE_2 ( change ) ; event . change = METHOD_2 ( change ) ; VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = VAR_1 . METHOD_5 ( ) ; VAR_4 . get ( ) . METHOD_6 ( change , event ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_5 . error ( STRING_1 , e ) ; } } 
static void METHOD_1 ( TYPE_1 config , java.lang.String VAR_1 ) { config . METHOD_2 ( STRING_1 , null , STRING_2 , VAR_2 ) ; config . METHOD_3 ( STRING_8 , STRING_9 , STRING_3 , STRING_4 ) ; config . METHOD_3 ( STRING_8 , STRING_9 , STRING_5 , STRING_6 ) ; config . METHOD_3 ( STRING_8 , STRING_9 , STRING_7 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 ) ; METHOD_3 ( user ) ; VAR_1 . METHOD_4 ( VAR_2 class ) ; VAR_3 . projects ( ) . name ( project . get ( ) ) . METHOD_5 ( ) . get ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; final java.lang.String name = STRING_2 ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( user ) ; METHOD_5 ( r ) ; assertEquals ( name , r . name ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return java.util.Collections . METHOD_2 ( TYPE_3 . METHOD_3 ( java.util.Collections . METHOD_4 ( VAR_1 . METHOD_1 ( ) ) , ( VAR_2 ) - > { try { return METHOD_5 ( VAR_2 ) ; } catch ( java.io.IOException e ) { throw new TYPE_6 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) , e ) ; } } ) ) ; } 
public void METHOD_1 ( final TYPE_1 key ) { if ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( key ) ) && ( VAR_2 . METHOD_4 ( ( ( TYPE_2 ) ( key ) ) ) ) ) { VAR_3 . METHOD_5 ( ( ) - > VAR_2 . METHOD_1 ( ( ( TYPE_2 ) ( key ) ) ) ) ; } VAR_4 . METHOD_1 ( key ) ; } 
public java.lang.String METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 ) throws java.io.IOException { try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) { try ( org.eclipse.jgit.revwalk.RevWalk VAR_3 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = VAR_3 . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( VAR_1 ) ) ; return commit . METHOD_4 ( ) ; } } } 
public void METHOD_1 ( ) { TYPE_2 VAR_2 = null ; for ( TYPE_3 w : this ) { if ( w instanceof TYPE_2 ) { final TYPE_2 d = ( ( TYPE_2 ) ( w ) ) ; if ( VAR_2 == null ) { VAR_2 = d ; } } } if ( VAR_2 != null ) { VAR_2 . METHOD_1 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( info . METHOD_7 ( ) . get ( ) , revision , METHOD_3 ( ) , METHOD_4 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) ; } 
protected void run ( ) throws TYPE_1 { try { METHOD_1 ( ) ; } catch ( TYPE_3 err ) { throw new TYPE_4 ( ( STRING_1 + ( err . getMessage ( ) ) ) ) ; } TYPE_2 VAR_1 = factory . create ( in , out ) ; VAR_1 . METHOD_2 ( format ) ; if ( ( query ) != null ) { VAR_1 . METHOD_3 ( query ) ; } else { VAR_1 . run ( ) ; } } 
public TYPE_1 < TYPE_2 > apply ( TYPE_3 VAR_1 ) throws com.google.gwtorm.server.OrmException { try { TYPE_1 < TYPE_2 > r = TYPE_1 . METHOD_1 ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getChange ( ) . getProject ( ) , VAR_3 ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { r . METHOD_5 ( TYPE_5 . METHOD_6 ( INT_1 , VAR_4 ) ) ; } return r ; } catch ( TYPE_6 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , TYPE_1 value , TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 < TYPE_1 > type = ( ( TYPE_3 < TYPE_1 > ) ( value . METHOD_3 ( ) ) ) ; TYPE_4 < TYPE_1 > VAR_2 = METHOD_4 ( name , type , VAR_1 ) ; METHOD_5 ( VAR_2 , ( ) - > { VAR_2 . set ( value ) ; } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin , VAR_2 ) ; METHOD_4 ( admin ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 , VAR_3 ) . METHOD_7 ( admin , VAR_7 , VAR_8 , VAR_9 ) . METHOD_7 ( VAR_6 , VAR_10 ) . METHOD_8 ( VAR_11 ) . METHOD_8 ( VAR_12 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 p = TYPE_3 . get ( VAR_1 ) ; if ( ! ( TYPE_4 . METHOD_2 ( p ) ) ) { throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; } java.lang.String VAR_2 = new java.lang.String ( TYPE_4 . METHOD_3 ( p ) , VAR_3 ) ; return new TYPE_1 ( new TYPE_1 . Id ( id , 1 ) , VAR_2 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) throws TYPE_3 { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_3 , VAR_4 , VAR_2 . getName ( ) ) ) ; } } 
void METHOD_1 ( final TYPE_1 . Account result ) { final TYPE_1 . Account me = TYPE_2 . METHOD_3 ( ) ; me . METHOD_4 ( result . METHOD_5 ( ) ) ; me . METHOD_6 ( result . METHOD_7 ( ) ) ; TYPE_2 . METHOD_8 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . display ( me ) ; } } 
protected boolean METHOD_1 ( ) { if ( ( VAR_1 . length ( ) ) == 0 ) { return false ; } if ( VAR_3 . isEmpty ( ) ) { return false ; } if ( ( ( ( VAR_3 . size ( ) ) == 1 ) && ( ( VAR_4 . size ( ) ) == 1 ) ) && ( VAR_4 . contains ( VAR_5 ) ) ) { return false ; } return true ; } 
protected java.util.List < com.google.gerrit.reviewdb.client.Change > METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { java.lang.String ref = event . getRefName ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey ( event . METHOD_2 ( ) ) ; if ( ref . equals ( VAR_1 ) ) { return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_4 ( project ) ) ; } return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_5 ( new TYPE_2 . NameKey ( project , ref ) ) ) ; } 
public int METHOD_1 ( TYPE_1 a , TYPE_1 b ) { int VAR_1 = TYPE_2 . METHOD_2 ( a . name ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . name ) ) ; if ( VAR_1 != 0 ) { return VAR_1 ; } return TYPE_2 . METHOD_2 ( a . id ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . id ) ) ; } 
protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 id , java.lang.String ref , com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.lang.Exception { TYPE_3 . ProjectConfig cfg = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ; TYPE_1 VAR_3 = TYPE_4 . METHOD_1 ( cfg , VAR_1 , id , ref ) ; METHOD_4 ( project , cfg ) ; return VAR_3 ; } 
public void METHOD_1 ( ) { final TYPE_1 a = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_1 b = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ; final TYPE_1 c = TYPE_2 . METHOD_2 ( STRING_1 , STRING_4 ) ; org.junit.Assert.assertEquals ( STRING_5 , TYPE_3 . METHOD_3 ( a , b ) . toString ( ) ) ; org.junit.Assert.assertEquals ( STRING_6 , TYPE_3 . METHOD_3 ( a , b , c ) . toString ( ) ) ; } 
private static byte [ ] METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { byte [ ] data = new byte [ ( ( int ) ( VAR_2 . METHOD_2 ( ) ) ) ] ; try ( TYPE_3 in = VAR_1 . METHOD_3 ( VAR_2 ) ) { TYPE_4 . METHOD_4 ( in , data , 0 , data . length ) ; } return data ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , org.eclipse.jgit.lib.Repository repo , TYPE_2 VAR_3 , com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String path , org.eclipse.jgit.lib.ObjectId VAR_4 ) throws java.io.IOException { try ( TYPE_3 VAR_5 = VAR_3 . METHOD_2 ( ) ) { return ( ( TYPE_1 ) ( VAR_2 ) ) . format ( project . get ( ) , path , VAR_4 . getName ( ) , TYPE_4 . METHOD_3 ( repo , VAR_4 ) , METHOD_4 ( VAR_1 ) , VAR_5 ) ; } } 
protected void METHOD_1 ( final TYPE_1 result ) { if ( ( ( VAR_1 == null ) && ( ( VAR_2 ) == null ) ) || ( ( VAR_1 != null ) && ( VAR_1 . equals ( VAR_2 ) ) ) ) { projects . display ( result ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return TYPE_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( db . METHOD_5 ( ) . METHOD_6 ( notes . getChangeId ( ) ) , VAR_2 ) ) ; } notes . METHOD_7 ( ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; VAR_3 . METHOD_9 ( notes . METHOD_10 ( ) . values ( ) ) ; return TYPE_3 . METHOD_3 ( VAR_3 ) ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id psId ) { java.util.List < TYPE_1 > result = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( TYPE_1 c : VAR_1 ) { if ( TYPE_4 . METHOD_2 ( c ) . equals ( psId ) ) { result . add ( c ) ; } } return TYPE_4 . METHOD_3 ( result ) ; } 
private static java.lang.String METHOD_1 ( byte [ ] VAR_1 ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ( ( VAR_1 . length ) * 2 ) ) ; for ( byte b : VAR_1 ) { r . append ( VAR_2 [ ( ( b > > > INT_1 ) & INT_2 ) ] ) ; r . append ( VAR_2 [ ( b & INT_2 ) ] ) ; } return r . toString ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; org.junit.Assert.assertEquals ( VAR_1 class , out . METHOD_4 ( ) ) ; org.junit.Assert.assertEquals ( TYPE_2 . of ( query ( in . METHOD_5 ( 1 ) ) , in . METHOD_5 ( 0 ) ) , out . METHOD_6 ( ) ) ; } 
public java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Set < TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_2 . add ( VAR_3 . create ( STRING_1 , VAR_4 ) ) ; VAR_2 . add ( VAR_3 . create ( STRING_2 , VAR_5 ) ) ; VAR_2 . add ( VAR_3 . create ( STRING_3 , VAR_5 ) ) ; VAR_2 . add ( VAR_3 . create ( STRING_5 , VAR_6 ) ) ; return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null , null ) ; java.util.List < TYPE_3 > m = VAR_1 . METHOD_3 ( repo , c , VAR_3 ) ; com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( TYPE_5 . of ( STRING_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) , VAR_2 . get ( ) ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( VAR_2 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_5 ( ) ; } com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_6 ( ) ) . METHOD_7 ( VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_2 . METHOD_2 ( ps . getId ( ) . getParentKey ( ) . equals ( cd . getId ( ) ) , STRING_1 , ps . getId ( ) , cd . getId ( ) ) ; patchSet = ps ; return this ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert . METHOD_4 ( VAR_1 , n ) ; org.junit.Assert.assertEquals ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 ) throws java.io.IOException { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 , VAR_5 ) ) ; } return VAR_2 ; } 
public static TYPE_1 METHOD_5 ( TYPE_2 . ProjectConfig project , java.lang.String VAR_1 , int VAR_2 , int VAR_3 , TYPE_3 group , java.lang.String ref ) { TYPE_1 VAR_4 = TYPE_4 . METHOD_2 ( project , group ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; return TYPE_4 . METHOD_5 ( project , VAR_1 , VAR_4 , ref ) ; } 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( org.eclipse.jgit.lib.Repository repo , com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { return METHOD_1 ( repo , db , branch , VAR_1 , ( ( VAR_5 . METHOD_3 ( ) ) - INT_1 ) ) ; } 
private void format ( TYPE_1 out ) throws java.io.IOException { out . METHOD_1 ( TYPE_2 . METHOD_2 ( commit ) . METHOD_3 ( VAR_1 ) ) ; try ( TYPE_3 VAR_2 = new TYPE_3 ( out ) ) { VAR_2 . METHOD_4 ( repo ) ; VAR_2 . format ( base . METHOD_5 ( ) , commit . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; } } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 < TYPE_2 > VAR_1 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . get ( TYPE_5 . METHOD_6 ( VAR_1 ) ) ; } 
protected void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = new TYPE_1 ( repo ) ; if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( new TYPE_2 ( repo , VAR_2 , db . get ( ) ) ) ; } VAR_1 . METHOD_4 ( in , out , err ) ; } 
public int METHOD_1 ( TYPE_1 a , TYPE_1 b ) { return new TYPE_2 ( ) . append ( a . METHOD_2 ( ) , b . METHOD_2 ( ) ) . append ( a . getName ( ) , b . getName ( ) ) . append ( b . METHOD_3 ( ) , a . METHOD_3 ( ) ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > p ; p = METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( METHOD_2 ( STRING_2 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) ; p = METHOD_2 ( STRING_4 ) ; org.junit.Assert.assertEquals ( METHOD_2 ( STRING_5 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) ; } 
public void METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { if ( ( METHOD_2 ( ) ) && ( VAR_1 ) ) { VAR_2 . METHOD_3 ( change , ctx . getAccountId ( ) , VAR_3 , VAR_4 , VAR_5 , ctx . METHOD_5 ( ) ) ; } } 
public TYPE_1 create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = TYPE_1 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ; TYPE_2 . METHOD_2 ( change , STRING_1 , changeId ) ; TYPE_2 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , change ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 < TYPE_3 > VAR_2 ) { if ( ! ( getAccountId ( ) . equals ( VAR_1 . getAccountId ( ) ) ) ) { VAR_2 . METHOD_2 ( new TYPE_5 ( ) ) ; return ; } run ( VAR_2 , new TYPE_6 < TYPE_3 > ( ) { public TYPE_3 run ( TYPE_7 . ReviewDb db ) throws TYPE_8 . OrmException { db . METHOD_3 ( ) . update ( java.util.Collections.singleton ( VAR_1 ) ) ; return VAR_3 ; } } ) ; } 
void METHOD_1 ( TYPE_1 e ) { e . METHOD_2 ( ) ; java.lang.String t = TYPE_2 . METHOD_3 ( project , psId , VAR_1 . path ( ) , VAR_1 . line ( ) ) ; if ( ! ( TYPE_3 . METHOD_4 ( ) ) ) { TYPE_3 . METHOD_5 ( t ) ; } else { TYPE_3 . display ( t ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; METHOD_4 ( ) . to ( VAR_3 class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) ; } 
private com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( TYPE_1 rsrc ) throws com.google.gwtorm.server.OrmException { return VAR_2 . get ( ) . patchSets ( ) . METHOD_2 ( rsrc . METHOD_3 ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet VAR_3 ) { VAR_3 . METHOD_4 ( false ) ; return VAR_3 ; } } ) ; } 
private void METHOD_1 ( ) { final java.util.Map < TYPE_1 . Id , TYPE_2 . Id > VAR_1 = new TYPE_3 < TYPE_1 . Id , TYPE_2 . Id > ( ) ; for ( TYPE_2 . Id VAR_2 : approvals ) { VAR_1 . put ( VAR_2 . getParentKey ( ) , VAR_2 ) ; } VAR_3 . METHOD_2 ( change , user . METHOD_3 ( ) , patchSet , VAR_4 , VAR_1 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 e = new TYPE_1 ( VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_3 ( e ) . METHOD_4 ( VAR_3 ) . METHOD_5 ( TYPE_3 . METHOD_7 ( ) ) ; servlet . METHOD_8 ( VAR_4 , VAR_5 ) ; TYPE_2 . METHOD_9 ( VAR_5 ) . METHOD_10 ( VAR_6 , e . getMessage ( ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 b ) { if ( ( ( ( ( VAR_1 ) != null ) && ( ( b . view ) != null ) ) && ( ( b . config ) != null ) ) && ( ( VAR_2 ) != null ) ) { return new TYPE_1 ( VAR_1 , b . view , b . config , VAR_2 ) ; } return null ; } 
private TYPE_1 . Result METHOD_1 ( TYPE_2 . Result r , java.lang.String VAR_1 ) throws java.io.IOException , TYPE_3 { TYPE_2 VAR_2 = VAR_3 . create ( db , admin . METHOD_2 ( ) , git , STRING_1 , STRING_2 , VAR_1 , r . getChangeId ( ) ) ; return VAR_2 . to ( STRING_3 ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( db , cd ) ) ) || ( METHOD_4 ( ) . METHOD_5 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
private static java.lang.String METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String key , final java.lang.String VAR_2 ) { final int n = VAR_1 . METHOD_2 ( ( ( STRING_1 + key ) + STRING_2 ) ) ; if ( n != ( - 1 ) ) { return ( ( VAR_1 . METHOD_3 ( 0 , n ) ) + VAR_2 ) + ( VAR_1 . METHOD_3 ( ( ( n + INT_1 ) + ( key . length ( ) ) ) ) ) ; } else { return null ; } } 
private void METHOD_1 ( TYPE_1 cm ) { int VAR_1 = cm . METHOD_2 ( cm . METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_5 ( VAR_1 ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_6 ( ) ; if ( cm . METHOD_7 ( ) ) { } else { METHOD_8 ( VAR_4 , ( VAR_1 + 1 ) ) ; } } 
private void METHOD_1 ( TYPE_1 ctx ) { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( psId ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; ctx . METHOD_1 ( ) ; } } 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; for ( java.lang.String s : VAR_1 . METHOD_2 ( STRING_2 ) ) { if ( ! ( s . METHOD_3 ( ) . isEmpty ( ) ) ) { VAR_2 . append ( ( ( STRING_3 + s ) + STRING_4 ) ) ; } } return VAR_2 . toString ( ) ; } 
public com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( ) { if ( ( currentPatchSetId ) != null ) { for ( int i = ( patchSets . size ( ) ) - 1 ; i >= 0 ; i -- ) { final com.google.gerrit.reviewdb.client.PatchSet ps = patchSets . get ( i ) ; if ( ps . getId ( ) . equals ( currentPatchSetId ) ) { return ps ; } } } return null ; } 
private TYPE_1 . Result METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId , boolean VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_2 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_1 ) ; } TYPE_1 . Result result = ( VAR_1 ) ? VAR_3 . METHOD_1 ( db , changeId ) : VAR_3 . METHOD_3 ( db , changeId ) ; if ( VAR_4 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_2 ) ; } return result ; } 
protected void run ( ) throws TYPE_1 { try { if ( VAR_1 . METHOD_1 ( name ) ) { VAR_2 . METHOD_2 ( STRING_1 ) ; } else { VAR_2 . METHOD_2 ( STRING_2 ) ; } } catch ( TYPE_2 e ) { throw new TYPE_1 ( ( STRING_3 + ( e . getMessage ( ) ) ) ) ; } } 
private boolean add ( TYPE_1 VAR_1 , TYPE_2 w , TYPE_3 type ) throws com.google.gwtorm.server.OrmException { TYPE_4 user = VAR_2 . create ( w . getAccountId ( ) ) ; try { if ( METHOD_1 ( user , w . METHOD_2 ( ) ) ) { if ( w . METHOD_3 ( type ) ) { VAR_3 . add ( w . getAccountId ( ) ) ; } return true ; } } catch ( TYPE_5 e ) { } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo c = get ( changeId , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( METHOD_2 ( 2 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_3 ( ) ) . METHOD_4 ( TYPE_3 . of ( METHOD_2 ( 2 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . get ( METHOD_2 ( 2 ) ) . VAR_4 ) . isEqualTo ( INT_1 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 info ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ; if ( ! ( TYPE_4 . equals ( info . path ( ) ) ) ) { VAR_1 . append ( info . status ( ) ) ; } VAR_1 . METHOD_6 ( ) ; } 
public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { change = ctx . getChange ( ) ; TYPE_3 update = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ; change . METHOD_3 ( VAR_1 ) ; change . METHOD_4 ( ctx . METHOD_5 ( ) ) ; update . METHOD_3 ( VAR_1 ) ; METHOD_6 ( ctx , update ) ; return true ; } 
public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return TYPE_3 . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( notes . getChangeId ( ) ) ) ; } return notes . METHOD_5 ( ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; org.junit.Assert . METHOD_2 ( b , b . append ( true ) ) ; org.junit.Assert . METHOD_2 ( b , b . append ( false ) ) ; org.junit.Assert.assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = VAR_2 . getName ( ) ; TYPE_3 VAR_5 = VAR_6 . METHOD_3 ( VAR_4 , new TYPE_4 ( ( ( STRING_1 + ( VAR_7 ) ) + STRING_2 ) ) ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_2 . METHOD_5 ( VAR_5 ) ; VAR_2 . METHOD_6 ( false ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 notes = METHOD_3 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey name = notes . METHOD_4 ( ) ; ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_6 ( name ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_7 ( notes , null ) . METHOD_8 ( ) ) . METHOD_9 ( TYPE_4 . METHOD_10 ( ( STRING_1 + name ) ) ) ; } 
private void METHOD_1 ( final TYPE_1 . NameKey branch ) { try { new TYPE_2 ( server , schema , VAR_1 , branch ) . METHOD_2 ( ) ; } catch ( TYPE_3 e ) { VAR_2 . error ( ( ( STRING_1 + branch ) + STRING_2 ) , e ) ; } } 
private static void METHOD_1 ( TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , TYPE_2 VAR_2 , TYPE_3 VAR_3 , java.lang.String path , byte [ ] VAR_4 ) throws TYPE_4 , java.io.IOException { switch ( VAR_1 ) { case VAR_5 : VAR_2 . add ( new TYPE_5 ( path ) ) ; break ; case VAR_6 : case VAR_7 : VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) ; break ; } VAR_2 . METHOD_3 ( ) ; } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { if ( ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ) { return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; } throw new TYPE_3 ( rsrc . METHOD_2 ( ) . getName ( ) ) ; } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( ) . METHOD_5 ( this . VAR_2 , VAR_3 ) . METHOD_6 ( METHOD_7 ( ) , METHOD_7 ( ) ) . METHOD_6 ( this . VAR_4 , VAR_5 ) . METHOD_5 ( this . VAR_6 , VAR_7 , TYPE_3 . METHOD_8 ( ) ) . METHOD_5 ( this . psId , VAR_1 . psId , TYPE_3 . METHOD_8 ( ) . METHOD_9 ( ) ) . result ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( ) ; if ( VAR_3 . METHOD_2 ( ) ) { org.eclipse.jgit.lib.ObjectId VAR_4 = METHOD_3 ( ) ; if ( VAR_4 != null ) { VAR_2 . METHOD_4 ( VAR_4 ) ; } } VAR_1 . METHOD_2 ( this , VAR_2 ) ; } 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( STRING_1 ) ; r . append ( VAR_1 . METHOD_3 ( ) ) ; r . append ( STRING_2 ) ; return r . toString ( ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; org.junit.Assert . METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; org.junit.Assert . METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ; org.junit.Assert . METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 , STRING_6 , STRING_7 ) ) ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { if ( METHOD_2 ( VAR_1 ) ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ; VAR_4 . METHOD_4 ( ) . METHOD_5 ( ( VAR_1 + STRING_3 ) , VAR_5 . METHOD_6 ( new TYPE_1 ( VAR_2 ) ) , VAR_6 ) ; VAR_3 . METHOD_3 ( STRING_4 , VAR_1 ) ; } else { VAR_3 . error ( STRING_5 , VAR_1 ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String change = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ; java.lang.String patchSet = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ; java.lang.String path = VAR_1 . METHOD_3 ( INT_1 ) ; VAR_1 . METHOD_4 ( new TYPE_3 ( change , patchSet , path ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_7 , VAR_4 ) . to ( VAR_8 , VAR_9 ) . METHOD_10 ( VAR_11 ) . METHOD_10 ( VAR_10 , VAR_12 ) . METHOD_9 ( VAR_3 ) ; } 
public void METHOD_2 ( ) { if ( ( VAR_2 ) != null ) { try { TYPE_1 . delete ( VAR_3 ) ; } catch ( java.io.IOException err ) { VAR_1 . METHOD_1 ( ( STRING_2 + ( VAR_3 ) ) , err ) ; } } VAR_4 . METHOD_2 ( ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_2 { java.lang.String topic = STRING_1 ; TYPE_3 . Result r = METHOD_3 ( ( STRING_2 + topic ) ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , topic ) ; r = METHOD_3 ( ( STRING_3 + topic ) ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , topic ) ; } 
void METHOD_1 ( final java.lang.String token ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( token ) ; try { TYPE_3 . METHOD_3 ( VAR_1 . label ( ) ) ; TYPE_4 . METHOD_5 ( VAR_2 , VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } catch ( TYPE_5 e ) { throw VAR_3 . reject ( e . getMessage ( ) ) ; } VAR_4 . put ( VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { com.google.common.truth.Truth.assertThat ( VAR_2 . line ) . isEqualTo ( VAR_1 . line ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . message ) . isEqualTo ( VAR_1 . message ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEqualTo ( VAR_4 ) ; TYPE_3 . METHOD_2 ( VAR_5 , VAR_6 ) ; if ( ( ( VAR_7 ) == null ) && ( ( VAR_9 ) != null ) ) { com.google.common.truth.Truth.assertThat ( VAR_8 ) . isEqualTo ( VAR_9 ) ; } } 
boolean METHOD_1 ( java.lang.String VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 , org.eclipse.jgit.lib.ObjectId VAR_3 ) { TYPE_1 ref = refs . get ( VAR_1 ) ; if ( ref != null ) { org.eclipse.jgit.lib.ObjectId VAR_4 = ref . get ( ) ; if ( VAR_4 . equals ( VAR_2 ) ) { return ref . METHOD_2 ( VAR_4 , VAR_3 ) ; } } return false ; } 
private TYPE_1 . Result METHOD_1 ( TYPE_2 git , boolean VAR_1 ) throws java.io.IOException , TYPE_3 { TYPE_4 . METHOD_2 ( git , STRING_1 ) ; java.lang.String file = ( VAR_1 ) ? STRING_2 : ( STRING_3 + ( VAR_2 ) ) + STRING_4 ; TYPE_5 VAR_3 = VAR_4 . create ( db , admin . METHOD_3 ( ) , git , ( STRING_5 + ( VAR_2 ) ) , file , ( STRING_6 + ( VAR_2 ) ) ) ; ( VAR_2 ) ++ ; return VAR_3 . to ( STRING_7 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_8 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { java.lang.String type = METHOD_2 ( ) . METHOD_3 ( STRING_1 , null , STRING_2 ) ; if ( type == null ) { return VAR_1 ; } for ( TYPE_1 t : TYPE_2 . values ( ) ) { if ( type . METHOD_4 ( t . name ( ) ) ) { return t ; } } throw new TYPE_3 ( ( STRING_3 + type ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ; VAR_1 = new TYPE_5 ( ) ; VAR_2 = ( repo . METHOD_3 ( ) . METHOD_4 ( ) ) / INT_1 ; } 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 . Id , TYPE_4 . Id > VAR_1 ) { TYPE_1 a = new TYPE_1 ( ) ; a . type = VAR_1 . getKey ( ) . get ( ) ; TYPE_5 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . getKey ( ) ) ; if ( VAR_2 != null ) { VAR_4 = VAR_2 . METHOD_3 ( ) . getName ( ) ; } a . value = TYPE_6 . toString ( VAR_1 . getValue ( ) . get ( ) ) ; return a ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; } } ) ; rpc ( VAR_6 class ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public TYPE_1 METHOD_1 ( ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { return METHOD_4 ( db , VAR_3 , project , VAR_4 ) ; } catch ( java.lang.Exception e ) { VAR_5 . error ( ( STRING_1 + project ) , e ) ; return false ; } } 
public static void patch ( java.lang.String token , com.google.gerrit.reviewdb.client.PatchSet.Id base , TYPE_1 . Key id , int VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 . patch ( token , base , id , null , 0 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , null ) ; } 
private org.eclipse.jgit.revwalk.RevCommit commit ( TYPE_1 . ProjectConfig cfg ) throws java.io.IOException , TYPE_2 , TYPE_3 { try ( TYPE_4 VAR_1 = new TYPE_4 ( VAR_2 , cfg . getProject ( ) . METHOD_1 ( ) , db ) ) { util . METHOD_2 ( INT_1 ) ; util . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( STRING_1 ) ; cfg . commit ( VAR_1 ) ; TYPE_5 ref = db . METHOD_6 ( VAR_3 ) ; return util . METHOD_7 ( ) . parseCommit ( ref . METHOD_8 ( ) ) ; } } 
private static TYPE_1 METHOD_1 ( ) { if ( TYPE_2 . METHOD_2 ( ) ) { return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; } TYPE_1 r = new TYPE_3 ( null ) ; r . METHOD_4 ( true ) ; return r ; } 
void METHOD_1 ( java.lang.String message ) { TYPE_1 . METHOD_2 ( project . get ( ) , id . get ( ) , message , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( project , id ) ) ; METHOD_4 ( ) ; } } ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 req ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_4 . toString ( req . METHOD_4 ( ) ) ; TYPE_5 VAR_3 = new TYPE_6 ( ) . METHOD_5 ( VAR_4 class , new TYPE_7 ( ) ) . METHOD_5 ( VAR_5 class , new TYPE_8 ( ) ) . create ( ) ; return VAR_3 . METHOD_6 ( VAR_2 , VAR_4 class ) ; } 
private static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project VAR_1 ) { final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; if ( VAR_2 . METHOD_6 ( TYPE_3 ) ) { return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; } else { return VAR_2 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_6 , VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) ; } 
public static < TYPE_1 > void METHOD_1 ( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 . Key < TYPE_5 < TYPE_1 > > key = ( ( TYPE_4 . Key < TYPE_5 < TYPE_1 > > ) ( TYPE_6 . get ( TYPE_7 . METHOD_2 ( VAR_2 class , VAR_1 . METHOD_3 ( ) ) ) ) ) ; binder . bind ( key ) . METHOD_4 ( new TYPE_8 ( VAR_1 ) ) . in ( VAR_3 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; } 
public static void METHOD_1 ( int id , java.lang.String msg , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . message ( TYPE_4 . METHOD_2 ( msg ) ) ; TYPE_4 . METHOD_3 ( id , STRING_1 ) . METHOD_4 ( input , VAR_1 ) ; } 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_1 . METHOD_2 ( ) ) { METHOD_4 ( view . METHOD_5 ( ) ) ; } view . METHOD_6 ( VAR_1 . METHOD_2 ( ) ) ; } } 
private static boolean METHOD_1 ( TYPE_1 type ) { TYPE_1 t = type . METHOD_2 ( ) ; while ( ! ( VAR_1 class . getName ( ) . equals ( t . METHOD_3 ( ) ) ) ) { if ( ( TYPE_2 . METHOD_4 ( t ) . length ) > 0 ) { return true ; } t = t . METHOD_2 ( ) ; } return false ; } 
public void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { try { METHOD_2 ( req , rsp ) ; } catch ( java.lang.Exception e ) { METHOD_3 ( ) . log ( STRING_1 , e ) ; METHOD_4 ( req , rsp , null , null ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; while ( VAR_2 . METHOD_6 ( ) ) { VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) ; } return VAR_4 ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( new TYPE_1 ( config , VAR_2 , VAR_3 ) ) ; if ( VAR_4 ) { bind ( VAR_5 . String class ) . METHOD_3 ( VAR_6 class ) . METHOD_2 ( VAR_7 class . getName ( ) ) ; bind ( VAR_8 class ) . METHOD_4 ( VAR_9 class ) ; } } 
public TYPE_1 create ( java.lang.String VAR_1 ) { try { if ( METHOD_1 ( ) ) { VAR_2 . METHOD_2 ( VAR_2 . get ( ) , new TYPE_2 ( VAR_3 ) ) ; VAR_4 = METHOD_3 ( ) ; VAR_5 . info ( STRING_1 ) ; } } catch ( java.lang.Exception e ) { VAR_5 . error ( ( STRING_2 + STRING_3 ) , e ) ; } return VAR_2 . get ( ) . create ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , admin , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , admin ) . METHOD_6 ( VAR_8 , VAR_9 ) . to ( VAR_2 ) ; } 
public java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; if ( c == null ) { VAR_1 = java.util.Collections . METHOD_2 ( ) ; } else { VAR_1 = TYPE_1 . METHOD_3 ( VAR_3 . METHOD_4 ( db , METHOD_5 ( ) , c . currentPatchSetId ( ) ) ) ; } } return VAR_1 ; } 
public com.google.gerrit.reviewdb.client.Account METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > r = METHOD_2 ( db , VAR_1 ) ; return ( r . size ( ) ) == 1 ? VAR_2 . get ( r . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) : null ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 r = METHOD_2 ( ( ( STRING_1 + ( VAR_1 . get ( ) ) ) + STRING_2 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_4 ( r ) ; org.junit.Assert . METHOD_5 ( ( ( VAR_3 . size ( ) ) == 2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ; cfg = new TYPE_3 ( ) ; cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) ; VAR_2 = new TYPE_4 ( VAR_1 , cfg ) ; } 
public TYPE_1 METHOD_1 ( ) { switch ( TYPE_2 . get ( ) ) { case VAR_1 : METHOD_2 ( true ) ; METHOD_3 ( true ) ; break ; case VAR_2 : METHOD_2 ( true ) ; METHOD_3 ( false ) ; break ; case VAR_3 : case VAR_4 : default : METHOD_2 ( false ) ; METHOD_3 ( false ) ; break ; } return this ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . create ( TYPE_4 . of ( db ) , VAR_1 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_3 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_4 . of ( db ) ; } } ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_1 . OrmException { if ( cd . METHOD_2 ( user ) ) { return true ; } try { TYPE_2 . Change c = cd . change ( db ) ; if ( ( c != null ) && ( VAR_1 . METHOD_3 ( c , user ) . METHOD_4 ( db . get ( ) ) ) ) { cd . METHOD_5 ( user ) ; return true ; } else { return false ; } } catch ( TYPE_3 e ) { return false ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 rsrc ) throws TYPE_4 { java.util.Map < com.google.gerrit.reviewdb.client.Project.NameKey , TYPE_2 > VAR_1 = new TYPE_5 < > ( ) ; for ( TYPE_2 ps : rsrc . METHOD_2 ( ) . METHOD_1 ( ) ) { VAR_1 . put ( ps . METHOD_3 ( ) , ps ) ; } VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 . user ( user ) . METHOD_6 ( VAR_3 , VAR_1 . METHOD_4 ( ) ) ) ; return VAR_1 . values ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( ) ; TYPE_2 u = util . user ( VAR_1 , VAR_3 ) ; org.junit.Assert . METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) && ( ! ( VAR_2 . METHOD_3 ( ) ) ) ) { VAR_2 . METHOD_4 ( true ) ; } else if ( ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_5 ( ) ) ) ) && ( VAR_2 . METHOD_3 ( ) ) ) { VAR_2 . METHOD_4 ( false ) ; } } 
public void METHOD_1 ( ) { final long VAR_1 = INT_1 ; final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; org.junit.Assert.assertEquals ( ( STRING_1 + VAR_1 ) , VAR_2 . toString ( ) ) ; final TYPE_1 VAR_3 = new TYPE_1 ( 0 ) ; VAR_3 . METHOD_2 ( VAR_2 . toString ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . size ( ) ) . is ( 1 ) ; com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) . isEqualTo ( VAR_1 . getChangeId ( ) ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( project . get ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; try { if ( VAR_2 . METHOD_3 ( ) ) { return VAR_2 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException e ) { throw new TYPE_2 ( STRING_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . branch = VAR_1 ; VAR_2 = STRING_1 ; in . project = project . get ( ) ; VAR_3 = true ; VAR_4 . METHOD_2 ( VAR_5 class ) ; VAR_6 . changes ( ) . create ( in ) . get ( ) ; } 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { VAR_1 . METHOD_2 ( info . branch ( ) ) ; VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( TYPE_3 . query ( info . METHOD_5 ( ) , info . status ( ) , info . branch ( ) , null ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . to ( VAR_7 , VAR_8 , VAR_4 ) . METHOD_9 ( VAR_10 ) . METHOD_9 ( VAR_9 , VAR_11 ) . METHOD_10 ( VAR_12 ) . METHOD_10 ( VAR_3 ) ; } 
private static void codemirror ( final java.lang.String token , final TYPE_1 base , final com.google.gerrit.reviewdb.client.Project.NameKey project , final TYPE_2 . Key id , final TYPE_3 VAR_1 , final int line ) { TYPE_4 . METHOD_1 ( new TYPE_5 ( token ) { public void onSuccess ( ) { TYPE_6 . display ( token , new TYPE_7 ( project , base , TYPE_1 . patchSet ( id . getParentKey ( ) ) , id . get ( ) , VAR_1 , line ) ) ; } } ) ; } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( new TYPE_3 ( ) ) ; modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) ; modules.add ( new TYPE_5 ( VAR_1 ) ) ; return VAR_1 . METHOD_3 ( modules ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } TYPE_1 . METHOD_3 ( false ) ; for ( TYPE_4 VAR_3 : VAR_4 ) { VAR_3 . METHOD_6 ( ) ; } } 
public java.lang.String toString ( ) { if ( METHOD_1 ( ) ) { return ( ( ( ( ( STRING_1 + ( error ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ; } return ( ( ( STRING_5 + ( VAR_3 ) ) + STRING_6 ) + ( VAR_4 ) ) + STRING_4 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change change = insert ( repo , METHOD_3 ( repo ) ) ; java.lang.String key = change . getKey ( ) . get ( ) ; METHOD_4 ( STRING_2 ) ; for ( int i = 0 ; i <= INT_1 ; i ++ ) { java.lang.String VAR_1 = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ; METHOD_4 ( VAR_1 , change ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_1 n = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) ) ) ; org.junit.Assert . METHOD_5 ( VAR_1 , n ) ; org.junit.Assert.assertEquals ( ( STRING_4 + ( ( STRING_5 + STRING_6 ) + STRING_7 ) ) , n . METHOD_6 ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( base , revision , path ) ) ; VAR_1 . METHOD_9 ( TYPE_5 . METHOD_4 ( ) ) ; return java.util.Collections . METHOD_10 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , admin , STRING_1 , 1 ) ; TYPE_1 VAR_3 = user ( VAR_4 ) ; TYPE_1 VAR_5 = user ( VAR_4 , admin ) ; METHOD_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) ) ; METHOD_5 ( STRING_3 , VAR_5 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( ) ) { VAR_1 . add ( label . getName ( ) ) ; } org.junit.Assert.assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) ; } 
public TYPE_1 . Result METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , TYPE_2 VAR_1 ) { METHOD_2 ( ) ; VAR_2 = VAR_1 ; change = c ; try { METHOD_3 ( ) ; return TYPE_3 . create ( c , VAR_3 ) ; } finally { if ( ( rw ) != null ) { rw . close ( ) ; } if ( ( repo ) != null ) { repo . close ( ) ; } } } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException , java.io.IOException { VAR_1 . user ( user ) . METHOD_3 ( VAR_2 ) ; VAR_3 . index ( db . get ( ) , rsrc . getChange ( ) ) ; return TYPE_1 . METHOD_4 ( ) ; } 
public void onSuccess ( final java.util.List < TYPE_1 > result ) { final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList ( result . size ( ) ) ; for ( final TYPE_1 p : result ) { r . add ( new TYPE_2 ( p ) ) ; } VAR_1 . METHOD_1 ( req , new TYPE_3 ( r ) ) ; } 
public TYPE_1 get ( java.lang.String VAR_1 ) { try { TYPE_2 VAR_2 = METHOD_1 ( VAR_1 ) ; if ( VAR_2 != null ) { TYPE_1 VAR_3 = new TYPE_1 ( config ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; return VAR_3 ; } return null ; } catch ( java.io.IOException e ) { VAR_4 . error ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , e ) ; return null ; } } 
public TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > VAR_1 = ( ps ) - > { try { return METHOD_2 ( ) . METHOD_3 ( ps , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return false ; } } ; return TYPE_3 . METHOD_4 ( patchSets ( ) ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; } 
private boolean METHOD_1 ( final TYPE_1 id ) { if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) { return METHOD_4 ( ) ; } if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) { return true ; } for ( final java.lang.String p : VAR_1 ) { if ( METHOD_5 ( p , id ) ) { return true ; } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_6 , VAR_10 ) . METHOD_5 ( VAR_11 ) . METHOD_5 ( VAR_12 ) ; } 
private TYPE_1 < TYPE_2 > get ( java.lang.String p , TYPE_3 < TYPE_1 < TYPE_2 > > m ) { TYPE_1 < TYPE_2 > r = null ; if ( m != null ) { r = m . get ( p ) ; } if ( r == null ) { r = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( ) ; } return r ; } 
private static java.lang.String METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_2 VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; if ( VAR_1 != null ) { switch ( VAR_1 ) { case VAR_2 : return STRING_1 ; case VAR_3 : case VAR_4 : return STRING_2 ; case VAR_5 : return STRING_3 ; default : return null ; } } } return null ; } 
private void METHOD_1 ( final TYPE_1 id , java.util.List < TYPE_2 > VAR_1 , final java.lang.String VAR_2 ) throws TYPE_3 { final java.lang.String message = ( ( id . name ( ) ) + STRING_1 ) + VAR_2 ; if ( VAR_3 ) { VAR_1 . add ( new TYPE_2 ( message , true ) ) ; throw new TYPE_3 ( STRING_2 , VAR_1 ) ; } VAR_1 . add ( new TYPE_2 ( ( STRING_3 + message ) , false ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( this , new TYPE_2 ( 0 , CHAR_1 , TYPE_3 . METHOD_3 ( ) ) { public void METHOD_4 ( final TYPE_4 event ) { event . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( ) ; } } ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { try ( TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ) { VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; while ( VAR_2 . METHOD_5 ( ) ) { VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) ; } return VAR_4 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = repo . commit ( ) . create ( ) ; org.eclipse.jgit.revwalk.RevCommit master = repo . commit ( ) . METHOD_2 ( VAR_1 ) . create ( ) ; com.google.common.truth.Truth.assertThat ( METHOD_3 ( VAR_1 ) ) . isEqualTo ( ( ( VAR_2 ) + 1 ) ) ; com.google.common.truth.Truth.assertThat ( METHOD_3 ( master ) ) . isEqualTo ( ( ( VAR_2 ) + 2 ) ) ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 . getValue ( ) ) ; if ( VAR_3 . equals ( VAR_4 ) ) { VAR_1 . METHOD_2 ( VAR_5 ) ; } else { if ( ( query ) == null ) { VAR_1 . run ( ) ; } query = VAR_1 ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.revwalk.RevWalk rw ) { return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , rw , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; } 
void METHOD_1 ( TYPE_2 ctx , TYPE_1 result , java.lang.String VAR_1 , java.lang.String [ ] args ) { final java.lang.String VAR_3 = METHOD_2 ( ctx ) ; final long VAR_4 = METHOD_3 ( ctx ) ; final java.lang.String VAR_5 = METHOD_4 ( VAR_1 , args ) ; VAR_6 . METHOD_5 ( new TYPE_3 ( VAR_3 , METHOD_6 ( ctx ) , ( STRING_1 + VAR_5 ) , VAR_4 , TYPE_4 . METHOD_7 ( args ) , result ) ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) { if ( ( VAR_1 . size ( ) ) != 1 ) { throw new TYPE_4 ( STRING_1 ) ; } return new TYPE_5 ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = repo . METHOD_2 ( STRING_1 ) ; repo . branch ( STRING_2 ) . commit ( ) . add ( STRING_3 , VAR_1 ) . create ( ) ; com.google.common.truth.Truth.assertThat ( METHOD_3 ( STRING_6 , STRING_7 ) ) . isEqualTo ( ( ( STRING_4 + ( VAR_1 . name ( ) ) ) + STRING_5 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) throws java.lang.Exception { TYPE_2 result = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; org.junit.Assert.assertEquals ( TYPE_3 . METHOD_6 ( VAR_2 ) , result . METHOD_7 ( ) ) ; } 
public final TYPE_1 < TYPE_2 . Result > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change . Id id , TYPE_3 VAR_1 ) { return VAR_1 . submit ( ( ) - > { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_3 ( ) ) { return METHOD_4 ( db , id ) ; } } ) ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_5 . Factory class ) ; } } ) ; rpc ( VAR_6 class ) ; rpc ( VAR_7 class ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( rw ) ; TYPE_1 VAR_1 = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null , null ) ; java.util.List < TYPE_3 > m = VAR_1 . METHOD_3 ( repo , c , rw , VAR_3 ) ; com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_1 ) ; } } 
void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( getProject ( ) . get ( ) , changeId . get ( ) , revision ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . get ( new TYPE_3 < TYPE_4 < TYPE_5 > > ( ) { public void onSuccess ( TYPE_4 < TYPE_5 > VAR_2 ) { VAR_2 . METHOD_4 ( STRING_1 ) ; METHOD_5 ( VAR_3 , VAR_2 ) ; } } ) ; } 
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId ( ) . toString ( ) ; try { if ( cd . getChange ( ) . getStatus ( ) . METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( id ) ; commit ( VAR_1 ) ; } else { VAR_2 . METHOD_2 ( id ) ; commit ( VAR_2 ) ; } } catch ( TYPE_4 e ) { throw new java.io.IOException ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_2 ( ) . add ( STRING_1 , STRING_2 ) . message ( STRING_3 ) . create ( ) ; java.lang.String VAR_2 = getChangeId ( VAR_1 ) ; org.eclipse.jgit.revwalk.RevCommit VAR_3 = METHOD_2 ( ) . add ( STRING_4 , STRING_5 ) . message ( STRING_6 ) . create ( ) ; java.lang.String VAR_4 = getChangeId ( VAR_3 ) ; TYPE_1 . METHOD_3 ( VAR_5 , STRING_7 , false ) ; METHOD_4 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_4 , VAR_2 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( 1 ) , 2 ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . toString ( ) ) ; final TYPE_1 VAR_2 = new TYPE_1 ( new TYPE_2 ( 0 ) , 0 ) ; VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 ) ; } 
private static com.google.gerrit.reviewdb.client . AccountGroup METHOD_1 ( TYPE_1 . Id key ) { TYPE_1 . NameKey name = new TYPE_1 . NameKey ( ( STRING_1 + key ) ) ; com.google.gerrit.reviewdb.client . AccountGroup VAR_1 = new com.google.gerrit.reviewdb.client . AccountGroup ( name , key , null ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( ( STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_2 ) + STRING_5 ) ) , METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ) ; } 
static boolean METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit a , org.eclipse.jgit.revwalk.RevCommit b ) { if ( ( a . METHOD_2 ( ) ) != ( b . METHOD_2 ( ) ) ) { return false ; } for ( int i = 0 ; i < ( a . METHOD_2 ( ) ) ; i ++ ) { if ( ! ( a . METHOD_3 ( i ) . equals ( b . METHOD_3 ( i ) ) ) ) { return false ; } } return true ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_5 ( STRING_2 , VAR_4 . METHOD_6 ( VAR_1 ) ) ; METHOD_7 ( VAR_1 ) ; VAR_3 . close ( VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = METHOD_2 ( VAR_1 ) ; VAR_3 = VAR_1 . METHOD_3 ( VAR_4 class ) ; VAR_5 = TYPE_3 . METHOD_4 ( VAR_1 ) ; VAR_6 = TYPE_3 . METHOD_5 ( VAR_1 ) ; VAR_7 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_8 class ) ) ; VAR_9 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_10 class ) ) ; } 
public void METHOD_1 ( ) { final int VAR_2 = table . METHOD_3 ( ) ; for ( int row = 0 ; row < VAR_2 ; row ++ ) { if ( ( METHOD_4 ( row ) ) != null ) { table . METHOD_5 ( row , VAR_3 ) ; } } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( project ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . add ( VAR_1 ) ; add ( VAR_2 ) ; VAR_1 . METHOD_2 ( ( STRING_1 + ( METHOD_3 ( ) . get ( ) ) ) ) ; display ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { java.lang.String name = VAR_1 . getName ( ) ; if ( VAR_3 . contains ( name ) ) { TYPE_1 a = VAR_2 . get ( name ) ; a . METHOD_2 ( new java.util.ArrayList < TYPE_2 > ( ) ) ; } else { VAR_2 . METHOD_1 ( name ) ; } } } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException { TYPE_1 < com.google.gerrit.reviewdb.client.Change > changes = null ; changes = db . changes ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ; METHOD_4 ( changes ) ; db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) , new TYPE_6 ( null ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( STRING_2 , STRING_3 ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_4 , STRING_5 ) ; org.junit.Assert.assertEquals ( STRING_6 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ) . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( STRING_7 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) ) . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) ; org.junit.Assert.assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) ; org.junit.Assert.assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) ; } 
protected void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) ; VAR_2 = null ; } for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_4 ( ) ; } VAR_4 . METHOD_5 ( ) ; super . METHOD_1 ( ) ; } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , TYPE_1 VAR_1 , org.eclipse.jgit.revwalk.RevCommit edit , com.google.gerrit.reviewdb.client.PatchSet VAR_2 ) throws TYPE_2 , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit VAR_3 = rw . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_2 . getRevision ( ) . get ( ) ) ) ; if ( VAR_3 . METHOD_3 ( ) . equals ( edit . METHOD_3 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return TYPE_3 . METHOD_4 ( rw , VAR_1 , VAR_3 , edit ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_5 VAR_4 = TYPE_6 . get ( VAR_1 ) ; TYPE_7 VAR_5 = VAR_4 . METHOD_4 ( ) ; if ( ! ( VAR_2 . METHOD_5 ( VAR_6 [ VAR_5 . METHOD_6 ( ) ] , VAR_7 ) ) ) { return VAR_1 . METHOD_7 ( ) ; } return VAR_8 ; } 
public void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { try { METHOD_2 ( req , rsp ) ; } catch ( java.lang.Exception e ) { METHOD_3 ( ) . log ( STRING_1 , e ) ; METHOD_4 ( rsp , null , null ) ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( boolean VAR_1 ) { if ( ! VAR_1 ) { return VAR_2 . values ( ) ; } else { java.util.List < TYPE_2 > plugins = new java.util.ArrayList ( VAR_2 . values ( ) ) ; plugins . METHOD_2 ( VAR_3 . values ( ) ) ; return plugins ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 ) ; METHOD_4 ( STRING_5 , VAR_3 ) ; METHOD_4 ( STRING_6 , VAR_4 ) ; } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( TYPE_1 me , TYPE_2 VAR_1 , org.eclipse.jgit.revwalk.RevCommit VAR_2 , org.eclipse.jgit.revwalk.RevCommit base , org.eclipse.jgit.lib.ObjectId VAR_3 , java.lang.String msg ) throws java.io.IOException { TYPE_3 VAR_4 = new TYPE_3 ( ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( base ) ; VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; VAR_4 . METHOD_6 ( METHOD_7 ( me ) ) ; VAR_4 . METHOD_8 ( msg ) ; return VAR_1 . insert ( VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) ; } 
private void METHOD_1 ( com.google.gerrit.server.query.change.ChangeData change , boolean VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_1 , TYPE_2 { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( db , change . change ( ) , user ( admin ) ) ; com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) . isEmpty ( ) ) . isEqualTo ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 user ) { java.lang.String id = TYPE_3 . METHOD_3 ( user . METHOD_4 ( ) . METHOD_5 ( ) ) ; if ( id == null ) { return VAR_2 ; } try { return new TYPE_4 ( VAR_3 . get ( id ) ) ; } catch ( TYPE_5 e ) { VAR_4 . METHOD_6 ( java.lang.String.format ( STRING_1 , id ) , e ) ; return VAR_2 ; } } 
void close ( ) { try { VAR_1 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_1 , e ) ; } try { VAR_3 . close ( true ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_2 , e ) ; } try { VAR_4 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_3 , e ) ; } } 
private void METHOD_1 ( ) { java.lang.String topic = VAR_1 . METHOD_2 ( ) ; TYPE_1 . topic ( change.getId ( ) . get ( ) , topic , new TYPE_2 < java.lang.String > ( ) { public void onSuccess ( java.lang.String result ) { VAR_2 = true ; TYPE_3 . display ( TYPE_4 . METHOD_4 ( change.getId ( ) ) ) ; METHOD_5 ( ) ; } public void METHOD_6 ( final TYPE_5 VAR_3 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_3 ) ; } } ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; int VAR_3 = TYPE_3 . METHOD_4 ( TYPE_2 . METHOD_2 ( VAR_4 ) , VAR_2 ) ; TYPE_4 VAR_5 = TYPE_2 . METHOD_5 ( VAR_3 , VAR_2 ) ; try ( TYPE_5 VAR_6 = TYPE_6 . METHOD_1 ( ) . METHOD_6 ( new TYPE_7 ( VAR_5 , VAR_7 ) ) ) { VAR_1 . METHOD_7 ( VAR_6 ) ; } return TYPE_2 . METHOD_8 ( VAR_5 ) ; } 
private void METHOD_1 ( TYPE_1 cm ) { if ( cm . METHOD_2 ( ) ) { TYPE_2 VAR_1 = cm . METHOD_3 ( ) ; cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) ; cm . METHOD_7 ( null ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) ; com.google.gerrit.reviewdb.client.Change change = TYPE_1 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ; TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) ; return new TYPE_1 ( args , change . getProject ( ) , change ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_5 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ; } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { if ( ( VAR_1 . get ( ) ) == ( rsrc . METHOD_1 ( ) ) ) { throw new TYPE_6 ( STRING_1 ) ; } return VAR_2 . METHOD_2 ( rsrc . METHOD_1 ( ) . getAccountId ( ) ) ; } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey name ) { try { return VAR_1 . METHOD_1 ( name ) ; } catch ( java.io.IOException err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } 
private void METHOD_1 ( TYPE_1 p ) throws java.io.IOException , TYPE_2 { java.lang.String url ; switch ( p ) { case VAR_1 : url = VAR_2 ; break ; case VAR_3 : url = admin . METHOD_2 ( server ) ; break ; default : throw new TYPE_3 ( ( STRING_1 + p ) ) ; } git = TYPE_4 . METHOD_3 ( ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String file ) { java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( project . getName ( ) , VAR_1 , file ) ; return VAR_2 . isEmpty ( ) ? null : VAR_2 ; } 
public void METHOD_1 ( ) { install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; install ( TYPE_1 . METHOD_3 ( ) ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) ; install ( new TYPE_3 ( ) ) ; } 
public final TYPE_1 METHOD_1 ( TYPE_2 key ) { if ( ( VAR_1 ) == null ) { throw new TYPE_3 ( STRING_1 ) ; } return METHOD_1 ( key , 0 , true , ( ( VAR_2 ) != null ? new TYPE_4 < TYPE_5 > ( ) : null ) ) ; } 
private void METHOD_1 ( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) { java.lang.String VAR_4 = METHOD_2 ( VAR_2 , VAR_3 , line ) ; VAR_1 . append ( STRING_1 ) . append ( line ) . append ( STRING_2 ) . append ( VAR_4 ) . append ( STRING_3 ) ; } 
private boolean METHOD_1 ( TYPE_1 commit ) throws java.io.IOException { try ( TYPE_2 VAR_1 = TYPE_1 . METHOD_2 ( rw . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( commit ) ; for ( org.eclipse.jgit.revwalk.RevCommit VAR_2 : VAR_3 ) { if ( VAR_1 . METHOD_6 ( VAR_1 . parseCommit ( commit ) , VAR_1 . parseCommit ( VAR_2 ) ) ) { return true ; } } } return false ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( project . get ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; try { if ( VAR_2 . METHOD_3 ( ) ) { return VAR_2 ; } throw new TYPE_2 ( STRING_1 ) ; } catch ( java.io.IOException e ) { throw new TYPE_2 ( STRING_2 ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 < TYPE_3 > api = VAR_2 . get ( VAR_3 class , STRING_1 ) ; return TYPE_4 . METHOD_2 ( api . METHOD_3 ( ( VAR_1 + STRING_3 ) , VAR_4 ) . METHOD_1 ( ) ) ; } 
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id , TYPE_2 > i : METHOD_1 ( ) ) { TYPE_3 < TYPE_2 > VAR_1 = VAR_2 . get ( id ) ; if ( VAR_1 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_1 . get ( ) ) ; } else { i . delete ( id ) ; } } METHOD_5 ( id . get ( ) ) ; TYPE_4 . METHOD_6 ( id ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_4 . Result change = METHOD_3 ( git , true ) ; TYPE_4 . Result VAR_1 = METHOD_3 ( git , true ) ; TYPE_4 . Result VAR_2 = METHOD_3 ( git , true ) ; METHOD_3 ( git , false ) ; java.util.Set < java.lang.String > changes = METHOD_4 ( change ) ; METHOD_5 ( changes , VAR_1 , VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( ) { return TYPE_1 . create ( ) . set ( STRING_1 , false ) . set ( STRING_2 , 0 ) . set ( STRING_3 , FLOAT_1 ) . set ( STRING_4 , true ) . set ( STRING_5 , INT_1 ) . set ( STRING_6 , false ) . set ( STRING_7 , true ) . set ( STRING_8 , true ) . set ( STRING_9 , STRING_10 ) . set ( STRING_11 , type ) ; } 
protected void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.ObjectId VAR_1 = getRevision ( ) ; if ( VAR_1 == null ) { return ; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( getChangeId ( ) , walk , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ; VAR_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_7 , VAR_8 ) ; METHOD_3 ( VAR_9 , VAR_10 ) ; VAR_11 = VAR_12 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_6 . Change change = TYPE_7 . get ( VAR_1 ) ; TYPE_8 . NameKey name = change . METHOD_4 ( ) ; if ( ! ( VAR_2 . METHOD_5 ( TYPE_9 . create ( name . get ( ) ) , VAR_6 ) ) ) { return VAR_1 . METHOD_6 ( ) ; } return VAR_7 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
protected void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , TYPE_1 { TYPE_2 s = ( ( TYPE_2 ) ( db ) ) ; try ( TYPE_3 e = new TYPE_3 ( s ) ) { METHOD_2 ( db , s , e ) ; METHOD_3 ( db , s , e ) ; } METHOD_4 ( db ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 , VAR_5 , VAR_6 , VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . to ( VAR_3 ) ; } 
private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { try ( TYPE_3 VAR_2 = new TYPE_4 ( VAR_1 ) ; TYPE_3 in = TYPE_5 . METHOD_2 ( VAR_2 ) ) { return new TYPE_1 ( in ) ; } catch ( java.io.IOException | TYPE_7 e ) { throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
public void METHOD_1 ( ) { final java.lang.String name = STRING_1 ; final java.lang.String value = STRING_2 ; final TYPE_1 < java.lang.String > VAR_1 = METHOD_2 ( name , value ) ; org.junit.Assert . METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) ; org.junit.Assert . METHOD_3 ( value , VAR_1 . getValue ( ) ) ; org.junit.Assert.assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; TYPE_4 in = new TYPE_4 ( ) ; VAR_1 = user . email ; VAR_3 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_1 ( in ) ; org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , METHOD_3 ( r . getChangeId ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_5 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_6 , VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 ) ; VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) . to ( VAR_1 class ) ; bind ( new TYPE_1 < java.util.Map < java.lang.String , TYPE_2 > > ( ) { } ) . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) . METHOD_5 ( VAR_3 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( config . METHOD_3 ( ) ) ) { TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( VAR_5 . get ( ) ) ) ; VAR_6 . set ( VAR_7 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 , false ) . METHOD_5 ( INT_1 , VAR_8 ) ) ; } } 
public static void METHOD_1 ( java.lang.String project , int id , java.lang.String user , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . METHOD_2 ( user ) ; TYPE_4 . change ( project , id ) . view ( STRING_1 ) . put ( input , VAR_1 ) ; } 
private java.lang.String url ( TYPE_1 info ) { return info . METHOD_1 ( ) ? TYPE_2 . METHOD_2 ( project , base , VAR_1 , info . path ( ) ) : ( VAR_2 ) == ( VAR_3 ) ? TYPE_2 . METHOD_3 ( project , base , VAR_1 , info . path ( ) ) : TYPE_2 . METHOD_4 ( project , VAR_1 , info . path ( ) ) ; } 
private java.util.Map < TYPE_1 . Key , TYPE_1 . Id > METHOD_1 ( ) throws TYPE_2 . OrmException { final java.util.Map < TYPE_1 . Key , TYPE_1 . Id > r = new TYPE_3 < TYPE_1 . Key , TYPE_1 . Id > ( ) ; for ( TYPE_4 . Change c : db . changes ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) { r . put ( c . getKey ( ) , c . getId ( ) ) ; } return r ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > in ) { if ( in != null ) { for ( TYPE_2 c : TYPE_3 . METHOD_2 ( in ) ) { c . path ( path ) ; } java.util.Collections . METHOD_1 ( TYPE_3 . METHOD_2 ( in ) , new TYPE_4 < TYPE_2 > ( ) { public int METHOD_3 ( TYPE_2 a , TYPE_2 b ) { return a . METHOD_4 ( ) . METHOD_5 ( b . METHOD_4 ( ) ) ; } } ) ; } return in ; } 
private static boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( ( VAR_2 . getChange ( ) . getStatus ( ) ) != ( VAR_3 ) ) { return false ; } for ( final TYPE_1 t : VAR_2 . METHOD_3 ( ) ) { if ( ! ( VAR_2 . METHOD_4 ( t ) ) ) { return false ; } } return true ; } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return false ; if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { final TYPE_2 < ? > VAR_2 = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return ( getName ( ) . equals ( VAR_2 . getName ( ) ) ) && ( METHOD_2 ( ) . equals ( VAR_2 . METHOD_2 ( ) ) ) ; } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ( ( db ) instanceof TYPE_2 ) ) . METHOD_7 ( ) ; VAR_2 = ( ( TYPE_2 ) ( db ) ) . METHOD_8 ( ) ; VAR_3 = VAR_2 . METHOD_9 ( STRING_1 ) ; VAR_4 = VAR_2 . METHOD_9 ( STRING_2 ) ; VAR_5 = VAR_2 . METHOD_9 ( STRING_3 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; org.junit.Assert . METHOD_2 ( b , b . append ( ( ( java.lang.String ) ( null ) ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; org.junit.Assert . METHOD_2 ( b , b . append ( STRING_2 ) ) ; org.junit.Assert . METHOD_2 ( b , b . append ( STRING_3 ) ) ; org.junit.Assert.assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , com.google.gerrit.reviewdb.client.Project project ) { TYPE_1 result = TYPE_3 . METHOD_2 ( VAR_1 , repo , project ) ; if ( result != ( VAR_2 ) ) { return result ; } result = TYPE_3 . METHOD_2 ( VAR_3 , repo , project ) ; if ( result != ( VAR_2 ) ) { return result ; } result = TYPE_3 . METHOD_2 ( VAR_4 , repo , project ) ; if ( result != ( VAR_2 ) ) { return result ; } return VAR_2 ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try ( TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( STRING_1 ) ) { if ( VAR_3 . METHOD_4 ( ) ) { return new TYPE_1 ( VAR_3 . METHOD_5 ( 1 ) ) ; } } catch ( TYPE_5 e ) { return null ; } return null ; } 
void METHOD_1 ( java.lang.String message ) { TYPE_1 . METHOD_2 ( project , branch , topic , message , base , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; } } ) ; } 
protected Project . NameKey METHOD_1 ( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 , boolean VAR_3 , TYPE_1 VAR_4 ) throws TYPE_2 { TYPE_3 in = new TYPE_3 ( ) ; in . name = name ( VAR_1 ) ; VAR_5 = ( VAR_2 != null ) ? VAR_2 . get ( ) : null ; VAR_6 = VAR_4 ; VAR_7 = VAR_3 ; return METHOD_1 ( in ) ; } 
public TYPE_1 . Result METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId , TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_2 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_1 ) ; } TYPE_1 . Result result = VAR_3 . METHOD_1 ( db , changeId , VAR_1 ) ; if ( VAR_4 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_2 ) ; } return result ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , boolean edit ) { TYPE_1 VAR_5 = METHOD_2 ( VAR_1 ) ; VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) ; VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) ; } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id , java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.server.query.change.ChangeData > VAR_2 = VAR_3 . get ( ) . METHOD_2 ( TYPE_3 , TYPE_4 ) . METHOD_3 ( changeId ) ; if ( ( VAR_2 . size ( ) ) != 1 ) { throw new TYPE_5 ( changeId ) ; } return VAR_2 . get ( 0 ) . METHOD_4 ( ) ; } 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 ) { return METHOD_2 ( ) ; } if ( ( ! ( VAR_2 . METHOD_3 ( ) ) ) || ( ( changeId ) == null ) ) { METHOD_4 ( ) ; return METHOD_2 ( ) ; } try ( org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_5 ( METHOD_6 ( ) ) ) { METHOD_1 ( repo ) ; VAR_1 = true ; } catch ( TYPE_2 | java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return METHOD_2 ( ) ; } 
protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . Factory VAR_1 , TYPE_3 rsrc , TYPE_4 input ) throws TYPE_5 , TYPE_6 { return VAR_2 . apply ( VAR_1 , rsrc . METHOD_2 ( ) . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( project ) . METHOD_3 ( ) ; cfg . METHOD_4 ( ) . METHOD_5 ( ) ; cfg . METHOD_4 ( ) . put ( VAR_3 . getName ( ) , VAR_3 ) ; METHOD_6 ( cfg ) ; } 
public com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; if ( c == null ) { return null ; } for ( com.google.gerrit.reviewdb.client.PatchSet p : METHOD_2 ( ) ) { if ( p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ) { VAR_1 = p ; return p ; } } } return VAR_1 ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { if ( config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ) { VAR_1 = new TYPE_1 ( false , TYPE_2 . METHOD_3 ( config , STRING_2 ) ) ; } else { VAR_1 = new TYPE_1 ( false ) ; } } } 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { return TYPE_5 . apply ( VAR_1 . get ( ) . METHOD_1 ( s ) . format ( change ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } 
private TYPE_1 < java.lang.String , java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String , java.lang.String > VAR_1 = new TYPE_1 < java.lang.String , java.lang.String > ( ) ; VAR_1 . put ( STRING_2 , STRING_3 ) ; VAR_1 . put ( STRING_4 , STRING_5 ) ; return VAR_1 ; } 
public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( METHOD_2 ( ) ) ; r . append ( change . getChangeId ( ) ) ; return r . toString ( ) ; } return null ; } 
public java.lang.String METHOD_1 ( ) { if ( ( ( change ) != null ) && ( ( METHOD_2 ( ) ) != null ) ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( METHOD_2 ( ) ) ; r . append ( change . getChangeId ( ) ) ; return r . toString ( ) ; } return null ; } 
public void METHOD_1 ( final com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { final java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > approvals = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval a : approvals ) { a . METHOD_5 ( change ) ; } db . METHOD_2 ( ) . update ( approvals ) ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) . METHOD_2 ( VAR_1 class , VAR_2 class ) . METHOD_3 ( VAR_3 . Factory class ) ) ; install ( new TYPE_1 ( ) . METHOD_2 ( VAR_4 class , VAR_5 class ) . METHOD_3 ( VAR_6 . Factory class ) ) ; install ( new TYPE_2 ( VAR_7 ) ) ; if ( ( VAR_8 ) == null ) { install ( new TYPE_3 ( ) ) ; } else { install ( new TYPE_4 ( VAR_8 ) ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws TYPE_3 , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ; try { return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( db , change ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 r ) throws TYPE_3 { try { VAR_2 . METHOD_2 ( r . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( r . METHOD_5 ( ) ) ; return VAR_2 . apply ( change ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( VAR_1 , METHOD_3 ( VAR_1 ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( VAR_2 , METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 , VAR_3 ) ; METHOD_4 ( STRING_5 , VAR_4 ) ; METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) ; } 
public boolean METHOD_1 ( boolean VAR_1 ) { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { if ( ( ( VAR_3 ) instanceof TYPE_1 ) && ( VAR_4 . METHOD_2 ( false , true ) ) ) { ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) ; } VAR_5 . METHOD_3 ( this ) ; VAR_5 . METHOD_4 ( ) ; return true ; } return false ; } 
private void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_4 ( new TYPE_3 ( ) { public java.lang.String METHOD_5 ( TYPE_4 VAR_3 ) { return VAR_1 ; } public void METHOD_6 ( TYPE_4 VAR_3 , java.lang.String token ) { } } ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String VAR_1 , int VAR_2 ) throws java.io.IOException { byte [ ] VAR_3 = new TYPE_2 ( ) . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( project , VAR_1 ) , TYPE_3 . name ( ) ) ; return new TYPE_4 ( VAR_3 ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( TYPE_3 . name ( ) ) . METHOD_7 ( VAR_2 ) ; } 
protected void METHOD_1 ( ) { if ( ( db ) != null ) { final TYPE_1 ps = METHOD_2 ( ) ; if ( ps != null ) { for ( final TYPE_2 w : METHOD_3 ( ) ) { if ( w . METHOD_4 ( ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } } } } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return changes . id ( VAR_1 . apply ( revision , in ) . VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_4 | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
protected void run ( ) throws TYPE_1 { try { TYPE_2 input = TYPE_3 . METHOD_1 ( TYPE_4 . METHOD_2 ( VAR_1 , ObjectId : : getName ) ) ; VAR_2 = VAR_3 ; TYPE_5 r = VAR_4 . apply ( new TYPE_6 ( VAR_5 ) , input ) ; METHOD_3 ( VAR_6 , STRING_1 ) ; METHOD_3 ( VAR_7 , STRING_2 ) ; METHOD_3 ( VAR_8 , STRING_3 ) ; } catch ( java.lang.Exception e ) { throw METHOD_4 ( e ) ; } } 
public TYPE_1 < java.util.Set < java.lang.String > > apply ( TYPE_2 req ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_6 notes = req . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.Set < java.lang.String > VAR_2 = notes . METHOD_4 ( ) ; if ( VAR_2 == null ) { VAR_2 = java.util.Collections . METHOD_5 ( ) ; } return TYPE_1 . METHOD_6 ( VAR_2 ) ; } 
public java.lang.String METHOD_1 ( final TYPE_1 . NameKey branch ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; TYPE_3 . p ( r , branch . getParentKey ( ) ) ; TYPE_3 . METHOD_2 ( r , branch ) ; TYPE_3 . a ( r , STRING_1 ) ; return ( VAR_1 ) + r ; } 
private static Account . Id METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Account a = VAR_1 . METHOD_2 ( VAR_2 ) ; if ( a == null ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } return a . getId ( ) ; } 
private static void METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 , java.lang.String name , java.lang.String value ) { if ( ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ) { VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ; } } 
public void onSuccess ( TYPE_1 . ChangeInfo info ) { info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ; TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_1 ( ) . values ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 , diff ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , TYPE_2 { VAR_1 = new TYPE_3 ( ) ; TYPE_4 insert = METHOD_2 ( VAR_2 , VAR_1 ) ; try { VAR_3 . insert ( VAR_4 ) ; org.junit.Assert . METHOD_3 ( STRING_1 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) ; } METHOD_6 ( insert , 1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_4 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_3 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ; TYPE_2 u = METHOD_2 ( c , VAR_1 ) ; u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) ; u . commit ( ) ; return c ; } 
private TYPE_1 file ( final java.lang.String name ) throws java.io.IOException { final TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) ; try { final TYPE_1 e = new TYPE_1 ( name ) ; e . METHOD_2 ( VAR_3 ) ; e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) ; VAR_1 . METHOD_5 ( ) ; return e ; } finally { VAR_1 . close ( ) ; } } 
protected java.util.List < org.eclipse.jgit.revwalk.RevCommit > METHOD_1 ( ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { rw . METHOD_3 ( rw . parseCommit ( repo . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ) ) ; return TYPE_1 . METHOD_6 ( rw ) ; } finally { rw . close ( ) ; } } finally { repo . close ( ) ; } } 
public void METHOD_1 ( org.eclipse.jgit.lib.Repository db , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { VAR_1 = db . METHOD_2 ( ) ; try { revision = ( id != null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; VAR_1 = null ; } } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) { final TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_3 , VAR_1 ) ) ; if ( VAR_2 != null ) { return TYPE_1 . of ( VAR_2 . getAccountId ( ) ) ; } return TYPE_1 . METHOD_4 ( ) ; } } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { TYPE_4 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 == null ) { throw new TYPE_3 ( ) ; } java.lang.String url = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) , size ) ; if ( TYPE_5 . METHOD_4 ( url ) ) { throw new TYPE_3 ( ) ; } else { return TYPE_6 . METHOD_5 ( url ) ; } } 
public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 t = this ; int VAR_2 = VAR_1 ; while ( ( t instanceof TYPE_2 ) && ( 0 < VAR_1 ) ) { VAR_1 -- ; t = ( ( TYPE_2 ) ( t ) ) . VAR_3 . METHOD_3 ( ) ; } if ( t instanceof TYPE_2 ) return ( ( TYPE_2 ) ( t ) ) . VAR_4 ; throw new TYPE_3 ( VAR_2 ) ; } 
public void index ( TYPE_1 VAR_1 ) throws java.io.IOException { for ( TYPE_2 < TYPE_1 , TYPE_3 > i : METHOD_1 ( ) ) { VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_4 < TYPE_3 > VAR_3 = VAR_2 . get ( VAR_1 ) ; if ( VAR_3 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_3 . get ( ) ) ; } else { i . delete ( VAR_1 ) ; } } METHOD_5 ( VAR_1 . get ( ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_1 == null ) || ( ( VAR_1 . getValue ( ) ) == null ) ) { throw new TYPE_3 ( STRING_1 ) ; } return METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 . getValue ( ) ) ) ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = id ; java.util.List < TYPE_8 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } else { throw new TYPE_10 ( ) ; } } 
private java.util.Map < com.google.gerrit.reviewdb.client.Account.Id , TYPE_1 > METHOD_1 ( final TYPE_2 . Id VAR_1 ) throws com.google.gwtorm.server.OrmException { final java.util.Map < com.google.gerrit.reviewdb.client.Account.Id , TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( ) ; for ( final TYPE_1 m : db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) { VAR_2 . put ( m . getAccountId ( ) , m ) ; } return VAR_2 ; } 
public static java.lang.String METHOD_1 ( final TYPE_1 req ) { java.lang.String token = req . METHOD_2 ( ) ; if ( TYPE_2 . METHOD_3 ( token ) ) { return VAR_2 ; } else { return TYPE_3 . is ( CHAR_1 ) . METHOD_4 ( token ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( VAR_1 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_4 ( ) ; } try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_3 ( VAR_1 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_4 ( ) ; } com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 ) ; } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 ) ; if ( ps != null ) { try { METHOD_4 ( ps , VAR_1 ) ; return METHOD_5 ( ) . insert ( VAR_4 , VAR_1 . toString ( ) . METHOD_6 ( STRING_1 ) ) ; } catch ( TYPE_2 e ) { throw new java.io.IOException ( e ) ; } } return null ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < TYPE_4 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( final TYPE_5 b : VAR_4 ) { if ( b . ref ( ) . contains ( VAR_1 . METHOD_2 ( ) ) ) { VAR_3 . add ( new TYPE_4 ( b ) ) ; } } VAR_2 . METHOD_3 ( VAR_1 , new TYPE_6 ( VAR_3 ) ) ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , final TYPE_1 . Status status ) { return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . getStatus ( ) ) == status ; } } ) ) ; } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 = change . currentPatchSetId ( ) ; TYPE_1 ps = new TYPE_1 ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , ( VAR_1 != null ? ( VAR_1 . get ( ) ) + 1 : 1 ) ) ) ; ps . METHOD_2 ( STRING_1 ) ; change . METHOD_3 ( ps ) ; } 
void METHOD_1 ( java.lang.String a , java.lang.String b , java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ; if ( ! ( VAR_2 . equals ( VAR_1 ) ) ) { METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) ; } } 
private static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.eclipse.jgit.lib.ObjectId > VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) { return null ; } return TYPE_1 . METHOD_2 ( VAR_1 , ObjectId : : getName ) ; } 
void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ( VAR_1 * ( VAR_3 . METHOD_4 ( ) ) ) , VAR_4 ) ; VAR_5 . METHOD_2 ( ) . METHOD_3 ( ( VAR_1 * ( VAR_6 . METHOD_4 ( ) ) ) , VAR_4 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 branch = db . METHOD_2 ( VAR_1 ) ; if ( branch != null ) { VAR_2 = VAR_3 . parseCommit ( branch . METHOD_3 ( ) ) ; base = TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_2 ) ; } if ( ( VAR_2 ) != null ) { VAR_4 = TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_2 ) ; } else { VAR_4 = TYPE_2 . METHOD_7 ( ) ; } } 
protected boolean equals ( com.google.gerrit.reviewdb.client.PatchSet p , java.lang.String id ) { boolean VAR_1 = ( METHOD_1 ( ) ) == ( VAR_2 ) ; java.lang.String VAR_3 = ( ( p . getRevision ( ) ) != null ) ? p . getRevision ( ) . get ( ) : null ; return ( VAR_1 && ( id . equals ( VAR_3 ) ) ) || ( ( ( ! VAR_1 ) && ( VAR_3 != null ) ) && ( VAR_3 . METHOD_2 ( id ) ) ) ; } 
public void METHOD_1 ( java.lang.String ... VAR_1 ) throws TYPE_1 { try { VAR_2 . apply ( rsrc , TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_1 . add ( STRING_1 ) ; VAR_3 = VAR_1 ; try { project ( ) . METHOD_3 ( input ) ; METHOD_4 ( STRING_2 ) ; } catch ( TYPE_3 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) ; } METHOD_7 ( VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { TYPE_2 p = new TYPE_2 ( ) ; try ( TYPE_3 VAR_1 = repo . METHOD_2 ( ) ) { p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ; return p ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String master = STRING_1 ; org.eclipse.jgit.lib.ObjectId VAR_1 = repo ( ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) ; METHOD_5 ( master , STRING_3 , STRING_4 , STRING_5 ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; METHOD_7 ( VAR_3 , project , STRING_6 ) ; TYPE_1 . Result r = METHOD_5 ( STRING_7 , STRING_8 , STRING_9 , STRING_10 ) ; r . METHOD_8 ( ) ; r . METHOD_9 ( VAR_4 , null , admin ) ; METHOD_10 ( master , STRING_8 ) ; } 
public java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 update , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , TYPE_3 info , TYPE_4 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 , TYPE_5 < com.google.gerrit.reviewdb.client.Account.Id > VAR_3 ) throws com.google.gwtorm.server.OrmException { return METHOD_1 ( db , update , VAR_1 , change , ps . getId ( ) , info . METHOD_3 ( ) . METHOD_4 ( ) , info . METHOD_5 ( ) . METHOD_4 ( ) , VAR_2 , VAR_3 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 user , TYPE_3 revision ) { return new TYPE_1 ( user . METHOD_2 ( ) . METHOD_3 ( null ) , revision . METHOD_4 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) , true ) ; } 
private com.google.gerrit.reviewdb.client.Account METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 , com.google.gwtorm.server.OrmException { try { return VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { switch ( VAR_3 ) { case VAR_4 : case VAR_5 : case VAR_6 : if ( ( VAR_7 . METHOD_4 ( VAR_1 ) ) == null ) { return METHOD_5 ( VAR_1 ) ; } break ; default : } throw e ; } } 
public void METHOD_1 ( ) { final int VAR_1 = 2 ; final int VAR_2 = INT_1 ; final TYPE_1 p = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = new TYPE_2 ( p , VAR_2 ) ; org.junit.Assert . METHOD_2 ( p , c . getParentKey ( ) ) ; org.junit.Assert . METHOD_3 ( ( VAR_2 != ( c . METHOD_4 ( ) ) ) ) ; } 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( req , res , null , c ) ; TYPE_4 . METHOD_4 ( req , res , msg ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < byte [ ] > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_2 > r = new java.util.ArrayList < > ( ) ; for ( byte [ ] key : VAR_1 ) { byte [ ] VAR_2 = METHOD_2 ( key ) ; if ( VAR_2 != null ) { r . add ( new TYPE_2 ( key , VAR_2 ) ) ; } } return new TYPE_4 ( r ) ; } 
protected void METHOD_1 ( java.lang.String changeId ) throws java.lang.Exception { TYPE_1 rsrc = METHOD_3 ( changeId ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_4 ( rsrc ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_5 ( ) ) . METHOD_2 ( STRING_2 ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_7 ( ) ) . METHOD_2 ( STRING_3 ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( project . get ( ) , id . get ( ) , revision , METHOD_3 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_4 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_5 ( project , id ) ) ; } public void METHOD_6 ( TYPE_6 VAR_2 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_2 ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , admin ) ; assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( admin ) . to ( VAR_4 ) . METHOD_6 ( VAR_5 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 a , com.google.gerrit.reviewdb.client.Change change ) { VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_4 = change . getStatus ( ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( new TYPE_3 ( ) ) ) . METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_8 ( ) ; VAR_3 = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_1 , VAR_7 , VAR_8 ) ; VAR_3 . METHOD_9 ( ) ; VAR_2 . METHOD_10 ( ) ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String message ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; METHOD_3 ( req , res , VAR_2 ) ; METHOD_4 ( res ) ; try ( TYPE_3 out = TYPE_4 . METHOD_5 ( req , res ) ) { out . METHOD_6 ( message ) ; } } 
public void METHOD_1 ( final TYPE_1 event ) { final TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ; if ( ( VAR_2 ) == VAR_1 ) { METHOD_3 ( ) ; } else if ( ( VAR_4 ) == VAR_1 ) { VAR_5 = false ; METHOD_4 ( ) ; } } 
private TYPE_5 METHOD_4 ( TYPE_1 ctl , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Account.Id id ) { java.lang.String VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ; TYPE_4 user = VAR_3 . create ( id ) ; return ctl . METHOD_3 ( user ) . METHOD_4 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 u = user ( ) ; METHOD_4 ( STRING_2 , u . METHOD_5 ( ) ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . METHOD_1 ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_2 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_2 ( ) ) ) ; VAR_1 . METHOD_3 ( m , VAR_3 , VAR_4 . get ( 0 ) , VAR_5 . get ( 0 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_4 ( repo , commit , null , null , null ) ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 , change ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; b . append ( 1 ) ; final TYPE_2 VAR_1 = b . METHOD_2 ( ) ; org.junit.Assert . METHOD_3 ( VAR_1 ) ; org.junit.Assert . METHOD_4 ( VAR_1 , b ) ; org.junit.Assert . METHOD_5 ( ( VAR_1 instanceof TYPE_1 ) ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_6 ( ) ) ; } 
void METHOD_1 ( int VAR_1 ) { VAR_2 = VAR_1 - ( ( METHOD_2 ( ) . METHOD_3 ( ) ) + 2 ) ; for ( int i = 0 ; i < ( METHOD_2 ( ) . METHOD_4 ( ) ) ; i ++ ) { VAR_3 . get ( i ) . METHOD_1 ( VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < java.lang.String , org.eclipse.jgit.revwalk.RevCommit > VAR_1 = METHOD_2 ( VAR_2 ) ; TYPE_2 input = new TYPE_2 ( ) ; VAR_3 = VAR_2 ; project ( ) . METHOD_1 ( input ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; try { VAR_1 = VAR_2 . METHOD_2 ( db , c , VAR_3 . create ( c . METHOD_3 ( ) ) ) ; } catch ( TYPE_2 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } return VAR_1 ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 class ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . in ( VAR_2 class ) ; bind ( VAR_7 . Factory class ) . in ( VAR_5 ) ; } 
protected java.util.Set < TYPE_1 . Id > METHOD_1 ( ) { final TYPE_2 r ; r = VAR_1 . get ( change . getProject ( ) ) ; return r != null ? r . METHOD_3 ( ) : VAR_2 . Collections < TYPE_1 . Id > METHOD_4 ( ) ; } 
public void delete ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( schema , id ) ; try { TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ; } catch ( TYPE_4 | TYPE_5 e ) { throw new java.io.IOException ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_2 , STRING_3 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( STRING_4 , STRING_5 , STRING_3 , STRING_6 ) ; } 
private boolean METHOD_1 ( final TYPE_1 commit ) { if ( ( ( VAR_1 ) == null ) || ( VAR_1 . isEmpty ( ) ) ) { return false ; } for ( TYPE_1 VAR_2 : VAR_1 ) { METHOD_2 ( VAR_2 ) ; if ( ( VAR_3 ) == null ) { return false ; } if ( ! ( VAR_2 . getChange ( ) . currentPatchSetId ( ) . equals ( VAR_3 ) ) ) { return false ; } } return true ; } 
public void set ( TYPE_1 base , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { this . base = base ; this . VAR_1 = VAR_1 ; this . project = project ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . VAR_4 = VAR_4 ; this . VAR_5 = VAR_5 ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) ; TYPE_2 VAR_5 = util . user ( VAR_3 , VAR_4 ) ; org.junit.Assert . METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String ref = VAR_3 ; try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) { if ( ( repo . METHOD_3 ( ) . METHOD_4 ( ref ) ) != null ) { TYPE_1 VAR_4 = repo . METHOD_5 ( ref ) ; VAR_4 . METHOD_6 ( true ) ; com.google.common.truth.Truth . METHOD_7 ( ) . METHOD_8 ( ( STRING_1 + ref ) ) . METHOD_9 ( VAR_4 . delete ( ) ) . isEqualTo ( VAR_5 ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { try { if ( ( VAR_1 == 0 ) && ( ( VAR_2 ) != null ) ) { return METHOD_2 ( key ) ; } return METHOD_3 ( key ) ; } catch ( TYPE_3 | com.google.gwtorm.server.OrmException e ) { java.lang.String msg = STRING_1 ; VAR_3 . METHOD_4 ( ( ( msg + STRING_2 ) + ( TYPE_4 . METHOD_5 ( key . METHOD_6 ( ) ) ) ) , e ) ; return TYPE_1 . METHOD_7 ( msg ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; org.junit.Assert . METHOD_3 ( VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) , VAR_5 ) ; } 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; if ( ( view ) != null ) { view . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; } } } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { try ( TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ) { METHOD_4 ( VAR_3 ) ; } catch ( TYPE_4 e ) { throw METHOD_5 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ; try { VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; } finally { VAR_3 . close ( ) ; } } catch ( java.io.IOException err ) { throw new TYPE_5 ( STRING_1 , err ) ; } } 
protected void METHOD_1 ( ) throws java.io.IOException { if ( ( repo ) == null ) { this . repo = VAR_1 . METHOD_2 ( project ) ; VAR_2 = true ; VAR_3 = repo . METHOD_3 ( ) ; VAR_4 = new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_4 ( ) ) ; commands = new TYPE_1 ( repo ) ; } } 
public java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , java.lang.String VAR_2 ) { try { java.lang.String VAR_3 = java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ; byte [ ] VAR_4 = VAR_3 . METHOD_2 ( STRING_2 ) ; java.lang.String VAR_5 = TYPE_1 . METHOD_3 ( VAR_4 ) ; return VAR_6 . METHOD_4 ( VAR_5 ) ; } catch ( TYPE_2 | TYPE_4 e ) { throw new TYPE_3 ( e ) ; } } 
public static int METHOD_1 ( TYPE_1 < ? > c ) { java.lang.String n = c . getName ( ) ; n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ; while ( n . METHOD_4 ( STRING_1 ) ) n = n . METHOD_2 ( 1 ) ; return TYPE_2 . METHOD_5 ( n ) ; } 
private void METHOD_1 ( final TYPE_1 . ReviewDb c ) throws TYPE_2 . OrmException { final TYPE_1 . Project p ; p = new TYPE_1 . Project ( VAR_1 ) ; p . METHOD_2 ( STRING_1 ) ; p . METHOD_3 ( false ) ; c . projects ( ) . insert ( java.util.Collections.singleton ( p ) ) ; } 
protected void METHOD_1 ( ) { table = new TYPE_1 ( this , VAR_1 ) { public void METHOD_3 ( ) { super . METHOD_3 ( ) ; display ( ) ; } } ; super . METHOD_1 ( ) ; java.lang.String VAR_2 = table . METHOD_4 ( ) ; if ( VAR_2 != null ) { METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; } add ( table ) ; } 
protected static final TYPE_1 METHOD_1 ( java.lang.String path ) throws java.io.IOException { if ( path == null ) { return VAR_1 ; } TYPE_1 VAR_3 ; try ( TYPE_2 in = VAR_2 . ReviewDb class . METHOD_2 ( path ) ) { if ( in == null ) { throw new TYPE_3 ( ( ( STRING_1 + path ) + STRING_2 ) ) ; } VAR_3 = new TYPE_1 ( path , in ) ; } return VAR_3 ; } 
protected static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_3 > VAR_1 ) { return TYPE_4 . METHOD_2 ( VAR_1 ) . METHOD_4 ( new TYPE_6 < TYPE_3 , TYPE_2 > ( ) { public TYPE_2 apply ( TYPE_3 in ) { return VAR_2 ; } } ) ; } 
private void METHOD_1 ( TYPE_1 . HttpServletResponse res , TYPE_2 VAR_1 ) throws java.io.IOException { byte [ ] VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; res . METHOD_3 ( VAR_3 ) ; res . METHOD_4 ( STRING_1 ) ; res . METHOD_5 ( STRING_2 ) ; res . METHOD_6 ( VAR_2 . length ) ; try ( TYPE_4 out = res . METHOD_7 ( ) ) { out . METHOD_8 ( VAR_2 ) ; } } 
private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSet patchSet ) { TYPE_1 p = new TYPE_1 ( ) ; p . revision = patchSet . getRevision ( ) . get ( ) ; VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) ; p . ref = patchSet . getRefName ( ) ; return p ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 schema = METHOD_2 ( ) ; org.junit.Assert . METHOD_3 ( schema . METHOD_4 ( ) ) ; org.junit.Assert.assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( 2 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { final TYPE_2 ctx = VAR_2 . METHOD_2 ( ) ; try { TYPE_3 VAR_3 = new TYPE_4 ( ) . add ( VAR_1 ) ; try { ctx . METHOD_3 ( VAR_3 ) ; return true ; } catch ( TYPE_5 e ) { return false ; } } finally { VAR_2 . close ( ctx ) ; } } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.lang.String base ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . METHOD_2 ( base ) . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < java.util.List < TYPE_3 . Project > > ( this ) { protected void METHOD_3 ( final java.util.List < TYPE_3 . Project > result ) { projects . display ( result ) ; projects . METHOD_4 ( ) ; } } ) ; } 
protected void METHOD_1 ( TYPE_1 p ) throws java.lang.Exception { java.lang.String url ; switch ( p ) { case VAR_1 : url = VAR_2 ; break ; case VAR_3 : url = admin . METHOD_2 ( server ) ; break ; default : throw new TYPE_2 ( ( STRING_1 + p ) ) ; } METHOD_3 ( TYPE_3 . METHOD_4 ( project , ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) ) ; } 
public void close ( ) { VAR_1 = null ; if ( ( VAR_2 ) != null ) { VAR_2 . close ( ) ; VAR_2 = null ; } if ( ( VAR_3 ) != null ) { VAR_3 . close ( ) ; VAR_3 = null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . isEqualTo ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . METHOD_7 ( ) ; } 
protected void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p , java.lang.String VAR_1 , TYPE_1 id , java.lang.String ref ) throws java.lang.Exception { TYPE_2 . ProjectConfig cfg = VAR_2 . METHOD_2 ( p ) . METHOD_3 ( ) ; TYPE_3 . METHOD_1 ( cfg , VAR_1 , id , ref ) ; METHOD_4 ( p , cfg ) ; } 
private static TYPE_1 METHOD_1 ( final TYPE_1 c , final com.google.gerrit.reviewdb.server.ReviewDb db ) throws TYPE_3 , com.google.gwtorm.server.OrmException { if ( ! ( c . METHOD_2 ( db ) ) ) { throw new TYPE_3 ( c . getChange ( ) . getId ( ) ) ; } return c ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; TYPE_2 . ChangeInfo result = TYPE_3 . METHOD_3 ( query ( r . getChangeId ( ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_4 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository VAR_2 , TYPE_2 VAR_3 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 { TYPE_4 VAR_4 = METHOD_2 ( VAR_1 , VAR_3 ) ; TYPE_5 VAR_5 = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ; METHOD_6 ( VAR_2 , VAR_4 , VAR_5 ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_1 { TYPE_2 . Result r = METHOD_2 ( STRING_1 ) ; r . METHOD_3 ( ) ; TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_4 ( ) , git , VAR_3 , STRING_2 , STRING_3 , r . getChangeId ( ) ) ; r = VAR_1 . to ( ( STRING_4 + ( r . getChange ( ) . change ( ) . getId ( ) . get ( ) ) ) ) ; r . METHOD_3 ( ) ; } 
private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.Repository repo ; try { repo = VAR_4 . METHOD_2 ( VAR_5 ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } try { TYPE_2 VAR_3 = repo . METHOD_3 ( ) ; return VAR_3 . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } finally { repo . close ( ) ; } } 
public void run ( ) { try { final TYPE_1 cm = VAR_1 . create ( result . change ) ; cm . METHOD_1 ( VAR_2 . getAccountId ( ) ) ; cm . METHOD_2 ( result . patchSet , result . info ) ; cm . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_3 = VAR_4 . getId ( ) ; VAR_5 . error ( ( STRING_1 + VAR_3 ) , e ) ; } } 
public TYPE_1 get ( com.google.gerrit.reviewdb.client.Account.Id id ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( id ) ; if ( VAR_2 == null ) { return null ; } VAR_2 = METHOD_2 ( VAR_2 ) ; if ( VAR_2 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( id ) ; return null ; } return VAR_2 ; } 
private java.lang.String METHOD_1 ( TYPE_1 cfg , java.lang.String VAR_1 ) { java.lang.String VAR_2 = cfg . METHOD_2 ( VAR_3 , null , VAR_4 ) ; if ( TYPE_2 . METHOD_3 ( VAR_2 ) ) { VAR_2 = VAR_5 ; } if ( ! ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) { VAR_2 = VAR_2 . METHOD_4 ( STRING_1 , VAR_1 ) ; } return VAR_2 ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.reviewdb.client.Account account ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 , VAR_1 ) ; TYPE_3 VAR_5 = VAR_6 . get ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_5 ) ; VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) ; new TYPE_4 ( account . getId ( ) , VAR_1 ) . METHOD_5 ( ) . METHOD_6 ( account ) . commit ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId VAR_1 = repo ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; METHOD_4 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_3 , project , STRING_6 ) ; TYPE_1 . Result r = METHOD_4 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ; r . METHOD_7 ( ) ; r . METHOD_8 ( VAR_4 , null ) ; r . METHOD_9 ( TYPE_2 . getMessage ( ) ) ; } 
public static java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String url ) { if ( url != null ) { return TYPE_1 . of ( STRING_1 , VAR_1 , STRING_2 , url ) ; } return TYPE_1 . of ( STRING_1 , VAR_1 ) ; } 
private static < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 r , int VAR_1 , TYPE_3 < TYPE_1 > VAR_2 ) throws java.lang.Exception { r . METHOD_2 ( VAR_1 ) ; try ( TYPE_4 VAR_3 = new TYPE_4 ( r . METHOD_3 ( ) ) ) { VAR_3 . METHOD_4 ( true ) ; return METHOD_5 ( ) . METHOD_6 ( VAR_3 , VAR_2 ) ; } } 
public void METHOD_1 ( java.lang.String changeId ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( changeId ) ) ; TYPE_4 VAR_2 = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ; VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; java.util.List < TYPE_2 > result = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_2 > > ( ) { } . METHOD_6 ( ) ) ; com.google.common.truth.Truth.assertThat ( result ) . isEmpty ( ) ; } 
private java.util.Map < org.eclipse.jgit.lib.ObjectId , TYPE_1 > METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 < org.eclipse.jgit.lib.ObjectId , TYPE_1 > ( ) ; for ( TYPE_1 r : repo . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . values ( ) ) { if ( com.google.gerrit.reviewdb.client.PatchSet . METHOD_4 ( r . getName ( ) ) ) { VAR_1 . put ( r . METHOD_5 ( ) , r ) ; } } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , TYPE_2 . METHOD_2 ( STRING_3 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 cm ) { if ( ! ( TYPE_3 . METHOD_2 ( ) ) ) { return METHOD_3 ( cm ) ; } return ( ) - > { if ( cm . METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_6 ( cm ) ; } } ; } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet ps = VAR_1 . METHOD_2 ( db . get ( ) , rsrc . METHOD_3 ( ) ) ; return VAR_2 . apply ( rsrc . getProject ( ) , ps . getRevision ( ) . get ( ) ) ; } 
private void METHOD_1 ( TYPE_1 c ) { TYPE_2 . METHOD_2 ( ( ( c . METHOD_3 ( ) ) != null ) , STRING_1 , c ) ; TYPE_2 . METHOD_2 ( c . METHOD_4 ( ) . equals ( getAccountId ( ) ) , ( STRING_2 + STRING_3 ) , getAccountId ( ) , c ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 != null ) { VAR_1 . close ( ) ; } for ( TYPE_1 VAR_3 : VAR_4 ) { if ( VAR_3 != VAR_1 ) { VAR_3 . close ( ) ; } } } 
private TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return new TYPE_2 ( ) ; } switch ( VAR_2 ) { case VAR_4 : return ( VAR_5 ) != null ? VAR_5 : new TYPE_5 ( ) ; default : throw new TYPE_6 ( ( STRING_1 + ( VAR_2 ) ) ) ; } } 
private com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( TYPE_1 ctl , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) { TYPE_2 id = TYPE_3 . METHOD_2 ( ctl . METHOD_3 ( ) . METHOD_3 ( ) ) . METHOD_4 ( ) ; return new com.google.gerrit.reviewdb.client . PatchSetApproval ( new TYPE_4 . Key ( VAR_1 , VAR_2 , id ) , ( ( short ) ( 0 ) ) , TYPE_5 . METHOD_5 ( ) ) ; } 
private void set ( java.lang.String branch , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException { final TYPE_1 u = VAR_1 . METHOD_1 ( ( ( VAR_2 ) + branch ) ) ; u . METHOD_2 ( true ) ; u . METHOD_3 ( id ) ; switch ( u . update ( ) ) { case VAR_3 : case VAR_4 : case VAR_5 : break ; default : org.junit.Assert . METHOD_4 ( ( ( ( STRING_1 + branch ) + STRING_2 ) + ( u . METHOD_5 ( ) ) ) ) ; } } 
protected TYPE_1 METHOD_1 ( java.lang.String path , java.lang.String VAR_1 , int VAR_2 ) throws java.lang.Exception { TYPE_2 req = TYPE_2 . METHOD_2 ( ) ; req . METHOD_3 ( path ) ; if ( VAR_1 != null ) { req . METHOD_4 ( VAR_1 ) ; } TYPE_1 res = new TYPE_1 ( ) ; servlet . METHOD_5 ( req , res ) ; com.google.common.truth.Truth.assertThat ( res . getStatus ( ) ) . isEqualTo ( VAR_2 ) ; return res ; } 
void METHOD_1 ( int VAR_1 ) { java.lang.String path = VAR_2 . get ( VAR_1 ) . path ( ) ; TYPE_1 . METHOD_2 ( project . get ( ) , VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( project , VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_4 ( TYPE_6 VAR_4 ) { } } ) ; } 
public static void METHOD_1 ( TYPE_1 w , java.lang.String id ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( STRING_2 ) ; VAR_1 . append ( id ) ; VAR_1 . append ( STRING_3 ) ; VAR_1 . append ( STRING_4 ) ; VAR_1 . append ( STRING_5 ) ; VAR_1 . append ( STRING_6 ) ; w . METHOD_2 ( ) . METHOD_3 ( STRING_7 , VAR_1 . toString ( ) ) ; } 
private void METHOD_1 ( final TYPE_1 r , final TYPE_2 VAR_1 ) { for ( final TYPE_3 VAR_2 : TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_3 ( ) ) { if ( r . METHOD_4 ( VAR_2 . METHOD_5 ( ) . getId ( ) ) ) { METHOD_6 ( r , VAR_1 , VAR_2 ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 rsrc ) { com.google.gerrit.reviewdb.client.Change change = rsrc . getChange ( ) ; return new TYPE_3 ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ( ( ! ( change . METHOD_5 ( ) ) ) && ( METHOD_6 ( rsrc ) ) ) ) ; } 
private void METHOD_1 ( TYPE_1 update ) { java.lang.String msg = message . getMessage ( ) ; if ( msg == null ) { return ; } if ( TYPE_2 . METHOD_2 ( msg ) . METHOD_3 ( ) ) { update . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; return ; } if ( TYPE_3 . METHOD_2 ( msg ) . METHOD_3 ( ) ) { update . METHOD_1 ( VAR_3 ) ; VAR_2 . METHOD_1 ( VAR_3 ) ; } } 
public static void METHOD_1 ( java.lang.String query , int VAR_1 , java.lang.String VAR_2 , TYPE_1 < TYPE_2 > VAR_3 ) { TYPE_3 VAR_4 = TYPE_2 . METHOD_2 ( query ) ; if ( VAR_1 > 0 ) { VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) ; } TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) ; if ( ! ( TYPE_4 . equals ( VAR_2 ) ) ) { VAR_4 . METHOD_3 ( STRING_2 , VAR_2 ) ; } VAR_4 . get ( VAR_3 ) ; } 
private java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( TYPE_1 n ) { try { return VAR_1 . METHOD_2 ( db . get ( ) , n . notes , VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_3 . error ( ( STRING_1 + ( VAR_2 ) ) , e ) ; return java.util.Collections . METHOD_3 ( ) ; } } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String url , java.lang.String VAR_2 ) { if ( ( ( url == null ) || ( VAR_2 == null ) ) || ( ! ( url . contains ( VAR_1 ) ) ) ) { return url ; } return url . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ; } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc . METHOD_1 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc . METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_1 . apply ( project , commit . getId ( ) . getName ( ) ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 u = METHOD_2 ( ) ; if ( u instanceof TYPE_3 ) { return TYPE_4 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; } else if ( u instanceof TYPE_5 ) { return VAR_2 ; } throw new TYPE_6 ( ) ; } 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( VAR_2 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; view . METHOD_3 ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo . commit ( ) . create ( ) ; repo . METHOD_2 ( 1 ) ; TYPE_1 VAR_1 = repo . METHOD_3 ( STRING_1 , commit ) ; com.google.common.truth.Truth.assertThat ( METHOD_4 ( commit ) ) . isEqualTo ( ( ( VAR_2 ) + 1 ) ) ; com.google.common.truth.Truth.assertThat ( METHOD_4 ( VAR_1 ) ) . isEqualTo ( ( ( VAR_2 ) + 2 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; } else if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) { METHOD_5 ( VAR_1 ) ; } else { VAR_2 . METHOD_6 ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , TYPE_5 . create ( 0 , 0 , INT_1 ) ) ; } 
protected static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 args , java.lang.String label , int VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) { return new TYPE_3 ( args , label , VAR_1 , null ) ; } java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < > ( ) ; for ( com.google.gerrit.reviewdb.client.Account.Id a : VAR_2 ) { r . add ( new TYPE_3 ( args , label , VAR_1 , a ) ) ; } return METHOD_2 ( r ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) ; int e = VAR_1 . METHOD_4 ( CHAR_1 ) ; TYPE_2 . METHOD_2 ( ( e >= 0 ) , STRING_2 , VAR_1 ) ; return TYPE_1 . create ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) ) ) ; } 
private TYPE_1 METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_2 r = VAR_2 . get ( ( VAR_1 ? METHOD_2 ( ) : METHOD_3 ( ) ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_3 ) ; return METHOD_5 ( ) . METHOD_6 ( r . METHOD_7 ( ) , VAR_4 class ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( 1 ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . toString ( ) ) ; final TYPE_1 VAR_2 = new TYPE_1 ( 0 ) ; VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 ) ; } 
private java.lang.String METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws java.io.IOException { TYPE_1 out = new TYPE_1 ( ) ; try ( TYPE_2 VAR_3 = new TYPE_2 ( out ) ) { VAR_3 . METHOD_2 ( repo ) ; VAR_3 . format ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return out . toString ( ) ; } } 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { java.lang.String name = ( ( info . METHOD_2 ( ) . name ( ) ) != null ) ? info . METHOD_2 ( ) . name ( ) : TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ; java.lang.String email = ( ( info . METHOD_2 ( ) . email ( ) ) != null ) ? info . METHOD_2 ( ) . email ( ) : name ; VAR_1 . METHOD_5 ( name ) ; VAR_1 . METHOD_6 ( email ) ; } 
public java.lang.String METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 ) { if ( ( VAR_1 . size ( ) ) <= 0 ) { return STRING_1 ; } java.lang.StringBuilder out = new java.lang.StringBuilder ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ( out . length ( ) ) > 0 ) { out . append ( STRING_2 ) ; } out . append ( VAR_2 . getValue ( ) ) ; } return out . toString ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . METHOD_5 ( VAR_3 , VAR_8 ) . METHOD_5 ( VAR_7 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result change = METHOD_2 ( ) ; submit ( change . getChangeId ( ) ) ; METHOD_3 ( git , false ) ; com.google.common.truth.Truth.assertThat ( METHOD_4 ( ) . METHOD_5 ( 0 ) ) . isEqualTo ( change . METHOD_6 ( ) . METHOD_5 ( 0 ) ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_3 user ) throws TYPE_4 { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ; try { return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( change.getId ( ) , e ) ; } } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , a . METHOD_4 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) , a . toString ( ) ) ; } 
public static void submit ( int id , java.lang.String commit , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 in = TYPE_3 . create ( ) ; in . METHOD_1 ( true ) ; TYPE_4 . METHOD_2 ( id , commit , STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; } 
public void set ( com.google.gerrit.reviewdb.client.PatchSet.Id base , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , boolean VAR_6 ) { this . base = base ; this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . VAR_4 = VAR_4 ; this . VAR_5 = VAR_5 ; this . VAR_6 = VAR_6 ; } 
public static void METHOD_1 ( java.lang.String project , int id , java.lang.String path , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 in = TYPE_3 . create ( ) ; in . METHOD_2 ( path ) ; in . METHOD_3 ( VAR_1 ) ; TYPE_4 . edit ( project , id ) . METHOD_4 ( in , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( ) ; METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_8 ( STRING_1 , VAR_2 ) . METHOD_9 ( VAR_3 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . METHOD_10 ( VAR_9 , VAR_10 ) ; } 
protected static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 args ) throws TYPE_4 { TYPE_5 user = args . METHOD_2 ( ) ; if ( user . METHOD_3 ( ) ) { return VAR_1 . get ( args . METHOD_2 ( ) . getAccountId ( ) ) . METHOD_4 ( ) . METHOD_5 ( ) ; } return VAR_2 . Collections < TYPE_2 > METHOD_6 ( ) ; } 
private Account . Id METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account a = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( a == null ) { throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } return a . getId ( ) ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { com.google.common.truth.Truth.assertThat ( VAR_2 . ref ) . isEqualTo ( VAR_1 . ref ) ; if ( ( VAR_1 . revision ) != null ) { com.google.common.truth.Truth.assertThat ( VAR_2 . revision ) . isEqualTo ( VAR_1 . revision ) ; } com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_2 ( VAR_4 ) ) . isEqualTo ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_3 ( ) ; VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( isEmpty ( ) ) { return ; } try { METHOD_2 ( ) ; if ( ! ( VAR_1 . isEmpty ( ) ) ) { METHOD_3 ( ) ; } METHOD_4 ( ) ; TYPE_1 . METHOD_1 ( VAR_3 ) ; TYPE_1 . METHOD_1 ( VAR_2 ) ; } finally { if ( ( VAR_2 ) != null ) { VAR_2 . close ( ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . close ( ) ; } } } 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , git , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ; return VAR_2 . to ( STRING_1 ) . getChangeId ( ) ; } 
private static TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet > patchSets = cd . patchSets ( ) ; TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > result = new TYPE_1 < > ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { result . put ( ps . getId ( ) . get ( ) , ps ) ; } return result ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; org.junit.Assert . METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; org.junit.Assert . METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( ) ; if ( VAR_3 . METHOD_2 ( ) ) { TYPE_3 VAR_4 = new TYPE_3 ( ) ; org.eclipse.jgit.lib.ObjectId VAR_5 = METHOD_3 ( VAR_4 ) ; if ( VAR_4 . get ( ) ) { VAR_1 . METHOD_4 ( getRefName ( ) ) ; } else if ( VAR_5 != null ) { VAR_2 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_2 ) ; } } } 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { r . append ( STRING_2 ) ; } return r . toString ( ) ; } 
public TYPE_1 create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = TYPE_1 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ; TYPE_3 . METHOD_2 ( change , STRING_1 , changeId ) ; TYPE_3 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , project , change ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; org.junit.Assert . METHOD_2 ( b , b . append ( ( ( java.lang.StringBuilder ) ( null ) ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; org.junit.Assert . METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_2 ) ) ) ; org.junit.Assert . METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_3 ) ) ) ; org.junit.Assert.assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ; } 
void METHOD_1 ( ) { TYPE_1 c = null ; try { c = METHOD_2 ( ) ; try ( TYPE_2 s = VAR_1 . METHOD_3 ( ) ) { s . METHOD_4 ( STRING_1 ) ; } VAR_2 = METHOD_5 ( ) ; } catch ( TYPE_3 e ) { VAR_3 . METHOD_6 ( ( STRING_2 + ( url ) ) , e ) ; c = close ( c ) ; } finally { METHOD_7 ( c ) ; } } 
public int run ( ) throws java.lang.Exception { final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { VAR_3 . METHOD_3 ( STRING_1 ) ; return 1 ; } VAR_4 . METHOD_3 ( ( STRING_2 + VAR_2 ) ) ; return 0 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( rw ) ; java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , rw , TYPE_3 . METHOD_4 ( ) ) ; java.util.Set < java.lang.String > VAR_1 = TYPE_4 . of ( ( STRING_1 + ( VAR_2 ) ) ) ; com.google.common.truth.Truth.assertThat ( TYPE_5 . METHOD_5 ( m ) ) . METHOD_6 ( VAR_1 ) ; } } 
boolean add ( final TYPE_1 VAR_1 ) { synchronized ( this ) { if ( ( ! ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) { if ( VAR_4 . isEmpty ( ) ) { TYPE_2 . METHOD_1 ( ) . METHOD_2 ( this ) ; } VAR_4 . add ( VAR_1 ) ; return true ; } return false ; } } 
public void METHOD_1 ( final boolean on ) { VAR_1 = on ; if ( VAR_1 ) { VAR_2 . METHOD_3 ( value . METHOD_4 ( ) ) ; } else { VAR_2 . METHOD_3 ( false ) ; } METHOD_5 ( update . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert . METHOD_4 ( VAR_1 , n ) ; org.junit.Assert.assertEquals ( ( ( ( ( STRING_4 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . METHOD_5 ( VAR_9 , VAR_10 ) . METHOD_5 ( VAR_8 , VAR_11 ) . METHOD_6 ( VAR_12 ) . METHOD_6 ( VAR_2 , VAR_3 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; com.google.common.truth.Truth.assertThat ( res . getStatus ( ) ) . isEqualTo ( VAR_2 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_3 ( VAR_3 ) ) . isEqualTo ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEmpty ( ) ; VAR_2 . METHOD_3 ( VAR_3 , null , VAR_4 , VAR_5 ) ; com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEqualTo ( VAR_5 ) ; } 
public void METHOD_1 ( TYPE_1 t ) { if ( ( ++ ( VAR_2 ) ) >= ( VAR_1 . length ) ) { int VAR_3 = VAR_1 . length ; TYPE_1 [ ] VAR_4 = new TYPE_1 [ 2 * VAR_3 ] ; TYPE_3 . METHOD_2 ( VAR_1 , 0 , VAR_4 , 0 , VAR_3 ) ; VAR_1 = VAR_4 ; } VAR_1 [ VAR_2 ] = t ; } 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( ) . changes ( ) . get ( id ) ; if ( c != null ) { return new TYPE_2 ( java.util.Collections . METHOD_2 ( VAR_2 . create ( VAR_1 . get ( ) , c ) ) ) ; } else { return new TYPE_2 ( VAR_3 . Collections < com.google.gerrit.server.query.change.ChangeData > METHOD_3 ( ) ) ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ; if ( VAR_2 == null ) { VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) ; } TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_5 . getName ( ) ) . METHOD_3 ( ) ) ; return VAR_4 . get ( ) . get ( VAR_3 ) ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Change change = VAR_1 . change ( ) ; if ( change == null ) { return false ; } final TYPE_1 VAR_3 = VAR_4 . create ( VAR_2 , change . METHOD_2 ( ) ) ; return VAR_3 . METHOD_3 ( ) . contains ( VAR_5 ) ; } 
private TYPE_1 . Result METHOD_1 ( java.lang.String topic ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , git ) ; com.google.common.truth.Truth.assertThat ( topic ) . METHOD_3 ( ) ; return VAR_1 . to ( ( STRING_1 + topic ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { try ( TYPE_1 VAR_2 = VAR_3 . create ( project ) ) { TYPE_2 r = new TYPE_2 ( ) ; r . METHOD_2 ( VAR_2 ) ; VAR_4 = VAR_1 ; r . commit ( VAR_2 ) ; } } 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { this . rw = walk ; this . VAR_1 = walk . METHOD_2 ( ) ; try { revision = ( id != null ) ? walk . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { this . rw = null ; this . VAR_1 = null ; } } 
public void run ( ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_1 . METHOD_1 ( ) ) { for ( ; ; ) { final TYPE_1 VAR_2 = METHOD_3 ( ) ; if ( VAR_2 == null ) { break ; } METHOD_4 ( db , VAR_2 ) ; synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } } } catch ( com.google.gwtorm.server.OrmException e ) { e . METHOD_2 ( ) ; } } 
private static java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 . ProjectConfig config ) { java.util.Set < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; for ( TYPE_3 VAR_2 : config . METHOD_2 ( ) ) { VAR_1 . add ( VAR_2 . getName ( ) ) ; } return VAR_1 ; } 
private TYPE_1 METHOD_1 ( ) throws TYPE_3 { final TYPE_4 VAR_2 = new TYPE_4 ( server . METHOD_2 ( ) , STRING_1 ) ; try { TYPE_5 in = new TYPE_6 ( VAR_2 ) ; try { in = TYPE_7 . METHOD_3 ( in ) ; return new TYPE_1 ( in ) ; } finally { in . close ( ) ; } } catch ( java.io.IOException e ) { throw new TYPE_3 ( e ) ; } catch ( TYPE_8 e ) { throw new TYPE_3 ( e ) ; } } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.util.List < java.lang.String > add , java.util.List < java.lang.String > delete ) throws TYPE_2 { TYPE_3 in = new TYPE_3 ( ) ; in . add = add ; in . delete = delete ; try { return VAR_1 . apply ( account , in ) ; } catch ( TYPE_4 | com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
private void METHOD_1 ( ) { if ( ( ! ( VAR_1 . isEmpty ( ) ) ) && ( ! ( METHOD_2 ( ) ) ) ) { for ( TYPE_1 < java.lang.String , TYPE_2 > VAR_2 : VAR_1 . METHOD_3 ( ) ) { VAR_2 . getValue ( ) . METHOD_4 ( projectName . get ( ) , VAR_2 . getKey ( ) , VAR_3 , VAR_4 , null ) ; } } } 
public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) . METHOD_3 ( VAR_5 ) ; TYPE_2 p = new TYPE_2 ( ) ; TYPE_3 . METHOD_4 ( VAR_1 , p ) ; if ( ( p . value ) >= ( VAR_1 . length ) ) { VAR_6 = TYPE_4 . of ( ) ; return ; } VAR_6 = TYPE_4 . METHOD_5 ( METHOD_1 ( VAR_1 , p . value ) ) ; } 
public TYPE_1 . Change update ( TYPE_1 . Change c ) { c . METHOD_1 ( VAR_1 ) ; c . METHOD_2 ( true ) ; if ( ! ( VAR_2 . equals ( c . currentPatchSetId ( ) ) ) ) { try { c . METHOD_3 ( VAR_3 . get ( schema , VAR_2 ) ) ; } catch ( TYPE_2 VAR_4 ) { VAR_5 . error ( ( STRING_1 + VAR_2 ) , VAR_4 ) ; } } TYPE_3 . METHOD_4 ( c ) ; return c ; } 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return METHOD_2 ( VAR_1 ) ; } else { switch ( status . getStatus ( ) ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } } 
protected static TYPE_1 METHOD_1 ( TYPE_2 < ? extends TYPE_3 > VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_3 u : VAR_1 ) { if ( VAR_2 == null ) { VAR_2 = VAR_3 ; } else if ( ( VAR_3 ) != VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; } } return VAR_2 ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) || ( METHOD_4 ( db ) ) ) { return false ; } if ( METHOD_5 ( ) ) { return true ; } return VAR_1 . METHOD_1 ( ) ; } 
public synchronized < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > METHOD_1 ( java.lang.String name , TYPE_4 VAR_1 , TYPE_5 < TYPE_1 > VAR_2 , TYPE_5 < TYPE_2 > VAR_3 ) { TYPE_6 . METHOD_2 ( name , VAR_1 ) ; TYPE_7 m = new TYPE_7 ( this , name , VAR_1 , VAR_2 , VAR_3 ) ; METHOD_3 ( name , VAR_1 ) ; VAR_4 . put ( name , m ) ; return m . METHOD_4 ( ) ; } 
private TYPE_1 METHOD_1 ( ) { for ( final TYPE_2 VAR_1 : VAR_2 ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { continue ; } TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) { continue ; } return VAR_3 ; } for ( final TYPE_2 VAR_1 : VAR_2 ) { if ( VAR_1 instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( VAR_1 ) ) ; } } return null ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 . Change change ) throws TYPE_3 { try { final TYPE_4 . NameKey VAR_1 = change . getProject ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) . METHOD_1 ( change ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } 
private void format ( TYPE_1 out ) throws java.io.IOException { out . METHOD_2 ( TYPE_2 . METHOD_3 ( commit ) . METHOD_4 ( VAR_1 ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( out ) ; VAR_2 . METHOD_5 ( repo ) ; VAR_2 . format ( base . METHOD_6 ( ) , commit . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 ; } else if ( ( METHOD_3 ( ) ) && ( ! ( METHOD_4 ( ) ) ) ) { return VAR_2 ; } else if ( VAR_3 . get ( ) ) { return VAR_4 ; } final long VAR_5 = METHOD_5 ( VAR_6 ) ; if ( VAR_5 <= 0 ) { return VAR_7 ; } else { return VAR_8 ; } } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) ; VAR_2 = TYPE_3 . METHOD_4 ( ) ; if ( TYPE_4 . info ( ) . auth ( ) . METHOD_7 ( ) ) { VAR_3 . METHOD_6 ( VAR_2 ) ; VAR_1 . add ( TYPE_2 . METHOD_7 ( ) , VAR_2 ) ; } VAR_4 = TYPE_3 . METHOD_4 ( ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) , VAR_4 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 change , java.lang.String id ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = VAR_1 . get ( ) . patchSets ( ) . get ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , TYPE_3 . METHOD_2 ( id ) ) ) ; if ( ps != null ) { return java.util.Collections . METHOD_3 ( new TYPE_1 ( change , ps ) ) ; } return java.util.Collections . METHOD_4 ( ) ; } 
private java.util.Set < com.google.gerrit.reviewdb.client.Account > METHOD_1 ( final TYPE_1 VAR_1 , final com.google.gerrit.reviewdb.client.Project.NameKey project , final java.util.Set < TYPE_1 > VAR_2 ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( TYPE_4 . equals ( VAR_1 ) ) { return METHOD_2 ( project , VAR_2 ) ; } com.google.gerrit.reviewdb.client . AccountGroup group = VAR_3 . get ( VAR_1 ) ; if ( group != null ) { return METHOD_3 ( group , project , VAR_2 ) ; } return java.util.Collections . METHOD_4 ( ) ; } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) throws java.lang.Exception { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_5 class ) ; return METHOD_1 ( VAR_1 , VAR_3 . METHOD_3 ( VAR_6 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) , VAR_7 ) , VAR_2 ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change change , final com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return TYPE_4 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public TYPE_2 get ( ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_3 ( change . getProject ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3 . METHOD_5 ( VAR_2 , change , patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_5 . METHOD_6 ( e ) ; } } } ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String projectName = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ; java.lang.String revision = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ; java.lang.String path = VAR_1 . METHOD_3 ( INT_1 ) ; VAR_1 . METHOD_4 ( new TYPE_3 ( projectName , revision , path ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) ; } 
public TYPE_1 < TYPE_2 > . TYPE_3 METHOD_1 ( TYPE_4 . Key < TYPE_2 > VAR_1 , TYPE_5 < TYPE_2 > VAR_2 ) { TYPE_6 < TYPE_2 > n = new TYPE_6 ( VAR_2 , VAR_3 ) ; if ( ref . METHOD_2 ( VAR_4 , n ) ) { return new TYPE_3 ( VAR_1 , n , VAR_5 ) ; } return null ; } 
void METHOD_1 ( java.lang.String token ) { try { VAR_1 . METHOD_1 ( token , changes , null , false ) ; } catch ( TYPE_1 e ) { throw new TYPE_2 ( e . getMessage ( ) , e ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String , TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_1 c : db . get ( ) . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . getAccountId ( ) ) ) { VAR_1 . put ( c . getKey ( ) . get ( ) , c ) ; } return VAR_1 ; } 
protected < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > core ( final TYPE_4 < TYPE_5 < TYPE_1 , TYPE_2 > > type , final java.lang.String name ) { return core ( TYPE_6 . get ( type , TYPE_7 . METHOD_1 ( name ) ) , type ) . name ( name ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_6 , VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } 
private com.google.gerrit.reviewdb.client . AccountGroup METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb c , java.lang.String name ) throws com.google.gwtorm.server.OrmException { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( name , VAR_2 ) ; return new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_3 . NameKey ( name ) , new TYPE_3 . Id ( c . METHOD_3 ( ) ) , VAR_1 , TYPE_4 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 notes , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 ) throws TYPE_3 , TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( METHOD_2 ( notes . getChange ( ) , VAR_1 , VAR_2 . getAccountId ( ) , VAR_2 . getValue ( ) ) ) { return ; } VAR_3 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; } 
void display ( final TYPE_1 . Account account ) { info . METHOD_1 ( 0 , VAR_1 , account . METHOD_2 ( ) ) ; info . METHOD_1 ( 1 , VAR_1 , account . METHOD_3 ( ) ) ; info . METHOD_1 ( 2 , VAR_1 , TYPE_2 . METHOD_5 ( account . METHOD_6 ( ) ) ) ; info . METHOD_1 ( INT_1 , VAR_1 , account . getId ( ) . toString ( ) ) ; } 
public void run ( ) { final com.google.gerrit.reviewdb.server.ReviewDb db ; try { db = VAR_1 . METHOD_1 ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { e . METHOD_4 ( ) ; return ; } try { for ( ; ; ) { final TYPE_1 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == null ) { break ; } METHOD_3 ( db , VAR_2 ) ; synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } } } finally { db . close ( ) ; } } 
public TYPE_1 get ( ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_1 ( change . getProject ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3 . METHOD_3 ( VAR_2 , change , patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_2 . METHOD_4 ( e ) ; } } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; } 
protected boolean METHOD_1 ( ) { if ( ( VAR_1 . length ( ) ) == 0 ) { return false ; } if ( VAR_2 . isEmpty ( ) ) { return false ; } if ( ( ( ( VAR_2 . size ( ) ) == 1 ) && ( ( VAR_3 . size ( ) ) == 1 ) ) && ( VAR_3 . contains ( VAR_4 ) ) ) { return false ; } return true ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 ctx ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.server.ReviewDb db = ctx . METHOD_2 ( ) . get ( ) ; com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( id ) ; if ( c != null ) { VAR_1 . create ( VAR_2 , VAR_3 ) . index ( db , c ) ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , TYPE_1 > res = METHOD_2 ( VAR_1 , STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_3 ( 1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_4 ( STRING_2 ) ; TYPE_1 d = res . get ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { TYPE_2 < TYPE_3 > VAR_2 = ( info . METHOD_2 ( ) ) ? info . METHOD_3 ( ) : TYPE_2 . create ( ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; if ( VAR_2 . METHOD_5 ( STRING_2 ) ) { VAR_4 . METHOD_6 ( true ) ; VAR_4 . METHOD_7 ( VAR_2 . get ( STRING_2 ) . METHOD_8 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( ) ) { VAR_1 . add ( label . getName ( ) ) ; } assertEquals ( TYPE_3 . of ( STRING_2 ) , VAR_1 ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , ( INT_1 < < INT_1 ) ) ; try ( TYPE_4 VAR_4 = new TYPE_4 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( VAR_4 ) ; } return TYPE_3 . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) ; } 
private void METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { METHOD_2 ( ) ; TYPE_1 . METHOD_1 ( project . get ( ) , changeId . get ( ) , path , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( project , changeId ) ) ; } public void METHOD_4 ( TYPE_6 VAR_2 ) { } } ) ; } 
public synchronized void METHOD_1 ( final TYPE_1 . NameKey branch ) { TYPE_2 e = VAR_1 . get ( branch ) ; if ( e == null ) { e = new TYPE_2 ( branch ) ; VAR_1 . put ( branch , e ) ; VAR_2 = true ; METHOD_2 ( e ) ; } else { VAR_2 = true ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId , int ps ) throws java.io.IOException { java.lang.String url = java.lang.String.format ( STRING_1 , changeId . get ( ) , ps ) ; return METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( url ) . METHOD_4 ( ) , VAR_2 class ) . changes ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < java.util.List < TYPE_3 . AccountGroup > > ( this ) { protected void METHOD_3 ( final java.util.List < TYPE_3 . AccountGroup > result ) { VAR_1 . display ( result ) ; VAR_1 . METHOD_4 ( ) ; } } ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 ) ; bind ( VAR_3 class ) . in ( VAR_2 ) ; bind ( VAR_4 class ) . to ( VAR_3 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; } 
static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > create ( TYPE_3 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_3 = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Account.Id id : VAR_1 ) { VAR_3 . add ( new TYPE_5 ( id ) ) ; } return TYPE_1 . METHOD_2 ( VAR_3 ) ; } 
private TYPE_1 user ( TYPE_2 . AccountGroup ... VAR_1 ) { TYPE_3 . Factory VAR_2 = new TYPE_3 . Factory ( ) { public TYPE_3 create ( final TYPE_1 VAR_3 , final java.lang.String ref ) { return new TYPE_3 ( VAR_4 , VAR_3 , ref ) ; } } ; return new TYPE_1 ( VAR_4 , VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_2 , new TYPE_5 ( VAR_1 ) , METHOD_2 ( ) ) ; } 
private void METHOD_1 ( ) throws TYPE_1 { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; if ( ( METHOD_5 ( ) ) != null ) { METHOD_4 ( ) ; VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( METHOD_5 ( ) ) ; VAR_1 . append ( STRING_2 ) ; } msg . METHOD_6 ( VAR_1 . toString ( ) , STRING_3 ) ; TYPE_2 . METHOD_1 ( msg ) ; } } 
protected void METHOD_1 ( final java.lang.String VAR_1 ) { final java.lang.String VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_1 . isEmpty ( ) ) { VAR_4 . METHOD_3 ( false ) ; } else { VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_4 . METHOD_3 ( true ) ; } if ( ( ( VAR_5 ) == null ) || ( VAR_5 . equals ( VAR_2 ) ) ) { METHOD_5 ( VAR_1 ) ; } } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 . METHOD_2 ( change . getProject ( ) . equals ( project ) , ( STRING_1 + STRING_2 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , change ) . METHOD_3 ( ) ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > refs ) { if ( user . get ( ) . METHOD_3 ( ) ) { TYPE_1 r = refs . get ( TYPE_2 . METHOD_4 ( user . get ( ) . getAccountId ( ) ) ) ; if ( r != null ) { TYPE_3 s = new TYPE_3 ( VAR_2 , r ) ; refs = new TYPE_4 ( refs ) ; refs . put ( s . getName ( ) , s ) ; } } return refs ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_6 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_4 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; bind ( VAR_2 class ) ; bind ( VAR_3 class ) . to ( VAR_2 class ) ; bind ( VAR_4 class ) . to ( VAR_5 class ) ; METHOD_2 ( ) . to ( VAR_5 class ) ; } 
private java.lang.String METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 res = METHOD_2 ( path ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_3 ( VAR_2 ) ) . isEqualTo ( VAR_1 ) ; java.lang.String VAR_3 = res . METHOD_4 ( ) ; return new java.lang.String ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) , VAR_4 ) ; } 
void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } else if ( ( VAR_1 ) == null ) { METHOD_7 ( ) ; } else { METHOD_11 ( ) ; } } 
protected void METHOD_1 ( java.lang.String msg , TYPE_1 t ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( t != null ) { VAR_1 . error ( ( ( VAR_2 ) + msg ) , t ) ; } else { VAR_1 . error ( ( ( VAR_2 ) + msg ) ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . METHOD_5 ( VAR_6 , VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } 
boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { if ( ! ( METHOD_2 ( project ) ) ) { return false ; } java.util.List < java.lang.String > projects = config . METHOD_3 ( ) ; if ( projects . isEmpty ( ) ) { return true ; } return new TYPE_1 ( projects ) . METHOD_5 ( project ) ; } 
protected TYPE_1 < ? > METHOD_1 ( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ; METHOD_3 ( project , STRING_1 , VAR_4 ) ; METHOD_3 ( project , STRING_2 , VAR_5 ) ; return METHOD_4 ( project ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) throws java.io.IOException { if ( path . isEmpty ( ) ) { return null ; } TYPE_4 . Result result = METHOD_3 ( req , path ) ; if ( result == null ) { return null ; } if ( ( result . METHOD_4 ( ) ) != null ) { return METHOD_5 ( VAR_1 , result ) ; } else { return METHOD_6 ( VAR_1 , result ) ; } } 
protected TYPE_1 . ChangeInfo getChange ( java.lang.String changeId , TYPE_2 ... VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = ( ( VAR_1 . length ) > 0 ) ? STRING_1 + ( TYPE_3 . on ( STRING_2 ) . METHOD_1 ( VAR_1 ) ) : STRING_3 ; TYPE_4 r = VAR_3 . get ( ( ( STRING_4 + changeId ) + VAR_2 ) ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ; return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 . ChangeInfo class ) ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; try { new TYPE_1 ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_2 , VAR_1 ) ; org.junit.Assert . METHOD_4 ( STRING_3 ) ; } catch ( TYPE_2 e ) { org.junit.Assert.assertEquals ( ( STRING_4 + VAR_1 ) , e . getMessage ( ) ) ; } } 
public static long METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) throws java.io.IOException { if ( err != null ) { TYPE_5 . METHOD_2 ( req , err ) ; } TYPE_6 . METHOD_3 ( req , res , null , null , c ) ; res . METHOD_4 ( VAR_1 ) ; return TYPE_6 . METHOD_5 ( req , res , msg ) ; } 
private void METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.lang.String message ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { VAR_2 . METHOD_3 ( ( message + STRING_1 ) ) ; VAR_2 . METHOD_3 ( TYPE_2 . on ( STRING_2 ) . METHOD_4 ( VAR_1 ) ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; } } 
protected void run ( ) throws TYPE_1 { boolean VAR_1 = true ; for ( TYPE_2 rsrc : changes . values ( ) ) { try { index . apply ( rsrc , new TYPE_3 ( ) ) ; } catch ( java.lang.Exception e ) { VAR_1 = false ; METHOD_1 ( STRING_1 , java.lang.String.format ( STRING_2 , rsrc . getId ( ) , e . getMessage ( ) ) ) ; } } if ( ! VAR_1 ) { throw METHOD_2 ( STRING_3 ) ; } } 
public void delete ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( id ) ; try { TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ; } catch ( TYPE_4 | TYPE_5 e ) { throw new java.io.IOException ( e ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Set < TYPE_1 > VAR_3 ) { TYPE_3 VAR_4 = METHOD_2 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_4 ( ) ) . METHOD_5 ( VAR_3 ) ; } 
private void METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , TYPE_1 c , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_2 r = VAR_3 . put ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) , c ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_4 ) ; } 
public void onSuccess ( TYPE_1 result ) { METHOD_1 ( ( VAR_1 ? 1 : 0 ) ) ; VAR_2 = TYPE_2 . METHOD_2 ( psId , VAR_2 . getKey ( ) . getParentKey ( ) . get ( ) , result ) ; VAR_3 . METHOD_3 ( false ) ; VAR_4 . METHOD_4 ( true ) ; VAR_5 . METHOD_4 ( true ) ; VAR_6 . METHOD_4 ( true ) ; METHOD_5 ( ) ; VAR_7 . onSuccess ( VAR_8 ) ; } 
private java.lang.String METHOD_1 ( java.lang.String branch , TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . append ( STRING_1 , project . get ( ) ) ; VAR_2 . append ( STRING_2 , branch ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; for ( TYPE_3 VAR_7 : METHOD_4 ( VAR_1 ) ) { VAR_2 . METHOD_5 ( VAR_8 , VAR_7 ) ; } return VAR_2 . toString ( ) ; } 
protected void METHOD_1 ( java.lang.String changeId ) throws java.lang.Exception { TYPE_1 . ChangeInfo c = get ( changeId , VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_2 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . get ( 0 ) . value ) . isEqualTo ( 2 ) ; com.google.common.truth.Truth.assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( VAR_4 . get ( 0 ) . VAR_5 ) ) . isEqualTo ( admin . getId ( ) ) ; } 
protected void METHOD_1 ( ) throws TYPE_1 { super . METHOD_1 ( ) ; METHOD_2 ( ) ; add ( VAR_1 , to ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { METHOD_3 ( TYPE_2 . METHOD_4 ( ) , VAR_2 ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) throws TYPE_7 , TYPE_8 { return VAR_6 . create ( VAR_3 , db , VAR_1 . repo , VAR_1 . rw , VAR_7 , VAR_8 , METHOD_2 ( VAR_1 , VAR_4 ) , VAR_2 , VAR_5 , VAR_9 ) ; } 
public void METHOD_1 ( ) { org.junit.Assert . METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) ; org.junit.Assert . METHOD_5 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) ; } 
protected void METHOD_1 ( ) { bind ( new TYPE_2 < TYPE_3 < TYPE_4 . ReviewDb > > ( ) { } ) . to ( new TYPE_2 < TYPE_5 < TYPE_4 . ReviewDb > > ( ) { } ) . in ( VAR_1 ) ; bind ( new TYPE_2 < TYPE_5 < TYPE_4 . ReviewDb > > ( ) { } ) . METHOD_2 ( VAR_2 class ) . in ( VAR_1 ) ; } 
private static void METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 , java.lang.String name , java.lang.String value ) { if ( ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ) { VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ; org.junit.Assert . METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_2 ( com.google.gerrit.reviewdb.client.Change . Id changeId , TYPE_2 user ) throws TYPE_3 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = db . get ( ) . changes ( ) . get ( changeId ) ; if ( change == null ) { throw new TYPE_3 ( changeId ) ; } return METHOD_2 ( change , user ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Account account , java.lang.String VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_1 event = new TYPE_1 ( util . METHOD_4 ( account ) , VAR_1 ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { try { VAR_3 . METHOD_5 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_6 ( this , VAR_3 , e ) ; } } } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 , TYPE_3 u , TYPE_4 VAR_4 ) { TYPE_5 . METHOD_2 ( u ) ; if ( u instanceof TYPE_6 ) { return VAR_1 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 , VAR_2 ) ; } else if ( u instanceof TYPE_7 ) { return VAR_2 ; } throw new TYPE_8 ( ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; } 
private void METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_1 r = VAR_3 . delete ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 . HttpServletResponse VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . HttpServletResponse class ) ; servlet . METHOD_3 ( null , VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_3 ) ; VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . HttpServletResponse class ) ; TYPE_2 . METHOD_6 ( new java.io.IOException ( STRING_1 ) ) . METHOD_7 ( VAR_1 ) . METHOD_8 ( VAR_4 ) ; servlet . METHOD_9 ( null , VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_3 < java.lang.String > n = TYPE_3 . not ( p ) ; org.junit.Assert . METHOD_3 ( ( n instanceof TYPE_4 ) ) ; org.junit.Assert . METHOD_4 ( p , n ) ; org.junit.Assert . METHOD_5 ( p , TYPE_3 . not ( n ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { display ( result ) ; VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_4 ) ) ; } } ) ; } 
private boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ; } for ( java.lang.String name : VAR_2 ) { VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) ; VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) ; } return ! ( VAR_2 . isEmpty ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { if ( VAR_1 ) { throw new TYPE_1 ( STRING_1 ) ; } for ( TYPE_2 VAR_2 : VAR_3 ) { TYPE_3 args = VAR_2 . args ; if ( VAR_4 . METHOD_2 ( ) . equals ( VAR_4 . METHOD_3 ( ) ) ) { continue ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = insert ( repo , METHOD_4 ( repo , commit ) ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 ) ; METHOD_5 ( STRING_9 , change ) ; } 
void METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_3 ; VAR_3 += VAR_1 ; int VAR_4 = ( VAR_3 ) - ( VAR_5 ) ; VAR_6 . add ( new TYPE_1 ( VAR_5 , ( - 1 ) , VAR_4 ) ) ; VAR_7 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) ; } 
private void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( 1 , VAR_2 ) ; final TYPE_2 VAR_3 = new TYPE_2 ( ( ( TYPE_1 . METHOD_2 ( VAR_4 , VAR_5 ) ) + ( TYPE_1 . METHOD_2 ( INT_1 , VAR_6 ) ) ) ) ; TYPE_3 . METHOD_3 ( new TYPE_4 ( ) { public long METHOD_4 ( ) { return VAR_3 . METHOD_5 ( VAR_1 ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; TYPE_2 . ChangeInfo result = TYPE_3 . METHOD_3 ( query ( r . getChangeId ( ) ) ) ; org.junit.Assert . METHOD_4 ( VAR_2 ) ; org.junit.Assert . METHOD_4 ( VAR_3 ) ; org.junit.Assert . METHOD_4 ( VAR_4 ) ; org.junit.Assert . METHOD_4 ( VAR_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( ( ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) ) ) ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { TYPE_3 < TYPE_1 > r = VAR_1 . apply ( change , null ) ; return r . METHOD_2 ( ) ? null : r . value ( ) ; } catch ( TYPE_4 | com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
protected TYPE_1 < ? > METHOD_1 ( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_4 , project , STRING_1 ) ; METHOD_3 ( VAR_5 , project , STRING_2 ) ; return METHOD_4 ( project ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { try { VAR_3 . projects ( ) . name ( VAR_1 . get ( ) ) . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_1 e ) { com.google.common.truth.Truth.assertThat ( e . getMessage ( ) ) . contains ( VAR_2 ) ; } } 
public void run ( ) { int line = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ; int res = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , line , 0 , 0 , false ) ) ; METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( final java.lang.String name , final java.lang.String email ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_1 = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ; final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( name ) ; account . METHOD_4 ( email ) ; return new TYPE_1 ( account , VAR_2 . Collections < TYPE_3 > METHOD_5 ( ) , VAR_2 . Collections < TYPE_4 > METHOD_5 ( ) ) ; } 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 VAR_2 , TYPE_4 < TYPE_1 > VAR_3 ) { TYPE_5 < TYPE_1 > VAR_4 = METHOD_1 ( name , VAR_1 , VAR_2 ) ; METHOD_2 ( VAR_4 , ( ) - > VAR_4 . set ( VAR_3 . get ( ) ) ) ; } 
TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final java.util.List < TYPE_4 > VAR_3 ) throws java.io.IOException { VAR_4 = db . METHOD_2 ( ) ; try { return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; } finally { VAR_4 . close ( ) ; } } 
protected synchronized void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_4 VAR_5 = new TYPE_4 ( VAR_1 ) ; if ( METHOD_4 ( ) ) { new TYPE_5 ( VAR_5 , VAR_5 . toString ( ) ) . METHOD_5 ( ) ; } else { VAR_6 = VAR_7 . submit ( VAR_5 ) ; } } 
private static boolean METHOD_1 ( ) { final java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( FLOAT_1 <= ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) { return true ; } VAR_2 . METHOD_4 ( STRING_2 ) ; VAR_2 . METHOD_4 ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ; return false ; } 
public void delete ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( id ) ; try { TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ; } catch ( TYPE_4 | TYPE_5 e ) { throw new java.io.IOException ( e ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; return TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) . get ( change.getId ( ) ) ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String err , java.lang.Exception e ) { if ( VAR_1 ) { if ( e == null ) { VAR_2 . error ( err ) ; } else { VAR_2 . error ( err , e ) ; } return TYPE_2 . METHOD_2 ( ) ; } else { return TYPE_1 . error ( err ) ; } } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; VAR_1 = null ; } if ( ( rw ) != null ) { rw . close ( ) ; rw = null ; } if ( ( repo ) != null ) { repo . close ( ) ; repo = null ; } } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 ; if ( VAR_1 == null ) { VAR_1 = VAR_3 . METHOD_2 ( METHOD_3 ( ) , config . METHOD_4 ( ) ) ; VAR_2 = VAR_1 ; } return VAR_4 . create ( VAR_1 ) ; } 
Account . Id getAccountId ( ) { com.google.gerrit.reviewdb.client.Account.Id id = get ( 0 ) . user ; for ( int i = 1 ; i < ( size ( ) ) ; i ++ ) { TYPE_1 . METHOD_1 ( TYPE_2 . equals ( id , get ( i ) . user ) , STRING_1 , id , get ( i ) . user ) ; } return id ; } 
public static TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 . METHOD_2 ( name ) ; java.util.List < TYPE_2 > values = new java.util.ArrayList < TYPE_2 > ( 2 ) ; values . add ( new TYPE_2 ( ( ( short ) ( 0 ) ) , STRING_1 ) ) ; values . add ( new TYPE_2 ( ( ( short ) ( 1 ) ) , STRING_2 ) ) ; return new TYPE_1 ( name , values ) ; } 
static TYPE_1 METHOD_1 ( ) { TYPE_1 i = new TYPE_1 ( ) ; i . i = 1 ; VAR_1 = 2 ; i . id = INT_1 ; VAR_2 = INT_2 ; VAR_3 = INT_3 ; VAR_4 = INT_4 ; i . b = true ; VAR_5 = false ; VAR_6 = true ; i . s = STRING_1 ; VAR_7 = STRING_2 ; i . t = VAR_9 ; VAR_10 = VAR_9 ; return i ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_2 VAR_5 = user ( VAR_1 , VAR_4 ) ; METHOD_3 ( VAR_5 ) ; METHOD_5 ( STRING_2 , VAR_5 ) ; METHOD_5 ( STRING_3 , VAR_5 ) ; METHOD_5 ( STRING_4 , VAR_5 ) ; METHOD_3 ( STRING_1 , VAR_5 ) ; METHOD_3 ( STRING_5 , VAR_5 ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { VAR_1 . set ( STRING_1 , VAR_2 ) ; } if ( ( VAR_3 != null ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ) { VAR_4 . set ( STRING_2 , null , STRING_3 , VAR_3 ) ; } } 
public void METHOD_1 ( java.lang.String changeId ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( changeId ) ) ; VAR_2 . METHOD_4 ( rsrc ) ; VAR_2 . apply ( account , new TYPE_4 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( final TYPE_1 event ) { if ( ( VAR_1 ) == null ) { TYPE_2 . METHOD_2 ( patchSet . getId ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( final TYPE_4 result ) { METHOD_3 ( result ) ; } } ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 = VAR_3 ; VAR_4 = VAR_5 ; switch ( type ) { case VAR_6 : case VAR_7 : VAR_8 = VAR_9 ; case VAR_10 : path = VAR_1 . path ; case VAR_11 : revision = VAR_1 . revision ; case VAR_12 : VAR_13 = VAR_14 ; default : break ; } return this ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.util.List < TYPE_2 > VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } if ( VAR_4 != null ) { VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } VAR_1 . append ( CHAR_3 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; } else if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) { METHOD_5 ( VAR_1 , VAR_2 ) ; } else { VAR_3 . METHOD_6 ( java.lang.String.format ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , VAR_1 ) ) ; } } 
public TYPE_1 METHOD_1 ( ) { if ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) { java.lang.String VAR_3 = VAR_4 . getProject ( ) . getName ( ) ; return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; } if ( VAR_4 . METHOD_3 ( ) ) { return METHOD_4 ( ) ; } return VAR_5 ; } 
protected void METHOD_1 ( ) { factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; factory ( VAR_10 . Factory class ) ; factory ( VAR_11 . Factory class ) ; } 
private void METHOD_1 ( final TYPE_1 m ) { m . METHOD_2 ( ) ; m . METHOD_3 ( STRING_1 ) ; m . METHOD_5 ( ) ; m . METHOD_2 ( ) ; m . METHOD_6 ( STRING_2 ) ; m . METHOD_6 ( STRING_3 ) ; m . METHOD_5 ( ) ; } 
private TYPE_1 not ( TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) throws TYPE_4 { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > n = p . METHOD_1 ( 0 ) ; if ( n instanceof TYPE_5 ) { return METHOD_2 ( ( ( TYPE_5 < com.google.gerrit.server.query.change.ChangeData > ) ( n ) ) ) ; } TYPE_7 VAR_1 = new TYPE_7 ( ) ; VAR_1 . add ( new TYPE_8 ( ) , VAR_2 ) ; VAR_1 . add ( METHOD_3 ( n ) , VAR_3 ) ; return VAR_1 ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { switch ( VAR_1 ) { case VAR_2 : return ( ( ! ( METHOD_2 ( ) ) ) && ( ( user . METHOD_3 ( ) ) || ( METHOD_4 ( VAR_3 ) ) ) ) || ( METHOD_5 ( ) ) ; case VAR_4 : return ( ! ( METHOD_2 ( ) ) ) && ( METHOD_6 ( java.util.Collections . METHOD_7 ( ) ) ) ; } throw new TYPE_2 ( ( VAR_1 + STRING_1 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) && ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ) { VAR_2 . METHOD_4 ( true ) ; } else if ( ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_6 ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( ) ) ) { VAR_2 . METHOD_4 ( false ) ; } } 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) throws java.io.IOException { if ( err != null ) { TYPE_6 . METHOD_5 ( req , err ) ; } TYPE_5 . METHOD_3 ( req , res , null , c ) ; res . METHOD_2 ( VAR_1 ) ; TYPE_5 . METHOD_4 ( req , res , msg ) ; } 
private TYPE_1 . Result METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { java.lang.String VAR_3 = STRING_1 ; java.lang.String VAR_4 = STRING_2 ; TYPE_2 VAR_5 = VAR_6 . create ( db , admin . METHOD_2 ( ) , git , VAR_3 , VAR_4 , VAR_1 , VAR_2 ) ; TYPE_2 . Result r = VAR_5 . to ( STRING_3 ) ; r . METHOD_3 ( ) ; return r ; } 
private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_3 = TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ; if ( TYPE_2 . isEmpty ( VAR_3 ) ) { return false ; } boolean VAR_4 = TYPE_3 . contains ( VAR_3 . METHOD_4 ( ) ) ; return VAR_4 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 , VAR_2 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_5 , VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String config = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_4 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( new TYPE_3 ( STRING_5 ) . get ( ) , projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . create ( STRING_1 ) ; TYPE_2 ctl = METHOD_2 ( VAR_1 ) ; VAR_3 . create ( ) . METHOD_3 ( VAR_1 . getId ( ) ) ; METHOD_4 ( ctl , null , TYPE_3 . METHOD_5 ( ( STRING_2 + ( VAR_1 . getId ( ) ) ) ) ) ; } 
private TYPE_1 . AccountGroup METHOD_1 ( final TYPE_3 . NameKey VAR_1 ) throws TYPE_2 . OrmException { final TYPE_1 . ReviewDb db = schema . METHOD_2 ( ) ; try { return db . METHOD_3 ( ) . get ( VAR_1 ) ; } finally { db . close ( ) ; } } 
private java.lang.String METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , git ) ; TYPE_2 . Result result = VAR_1 . to ( STRING_1 ) ; VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , git , VAR_3 , STRING_2 , STRING_3 , result . getChangeId ( ) ) ; return VAR_1 . to ( STRING_1 ) . getChangeId ( ) ; } 
public TYPE_1 . AccountGroup METHOD_1 ( final TYPE_2 . Id key ) { final TYPE_2 . NameKey name = new TYPE_2 . NameKey ( ( STRING_1 + ( key . toString ( ) ) ) ) ; final TYPE_1 . AccountGroup VAR_1 = new TYPE_1 . AccountGroup ( name , key , null ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; return VAR_1 ; } 
private static void METHOD_1 ( ) { final java.lang.String name = TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; final TYPE_1 me = VAR_1 . METHOD_2 ( name , ( ( TYPE_4 ) ( null ) ) ) ; me . METHOD_5 ( STRING_1 ) ; me . METHOD_6 ( STRING_2 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert . METHOD_4 ( VAR_1 , n ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + STRING_7 ) + STRING_8 ) , n . METHOD_6 ( ) ) ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { TYPE_2 p = new TYPE_2 ( ) ; try ( TYPE_3 VAR_1 = repo . METHOD_2 ( ) ; org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { p . METHOD_3 ( VAR_1 , rw . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ; return p ; } } 
public void onSuccess ( TYPE_1 . ChangeInfo info ) { info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ; TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_1 ( ) . values ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 , diff ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 user ) { if ( user . METHOD_2 ( ) ) { return user . getAccountId ( ) . toString ( ) ; } if ( user instanceof TYPE_3 ) { return STRING_1 + ( user . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . toString ( ) ) ; } return user . toString ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_3 = METHOD_3 ( VAR_2 . getName ( ) ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_1 ( VAR_2 ) ; } else { VAR_4 . add ( VAR_2 ) ; } } } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; try { org.junit.Assert . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; try { new TYPE_3 ( VAR_1 ) ; org.junit.Assert . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_4 e ) { org.junit.Assert.assertEquals ( ( STRING_2 + ( VAR_1 . METHOD_6 ( ) ) ) , e . getMessage ( ) ) ; } } finally { VAR_1 . delete ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ; cfg = new TYPE_3 ( ) ; cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) ; VAR_2 = new TYPE_4 ( VAR_1 , cfg ) ; VAR_2 . METHOD_9 ( ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; } TYPE_1 . METHOD_6 ( true ) ; TYPE_2 . METHOD_7 ( true ) ; } 
protected < TYPE_1 extends TYPE_2 , TYPE_3 extends TYPE_2 > TYPE_4 < TYPE_1 , TYPE_3 > METHOD_1 ( final TYPE_5 < TYPE_6 < TYPE_1 , TYPE_3 > > type , final java.lang.String name ) { return METHOD_1 ( TYPE_7 . get ( type , TYPE_8 . METHOD_2 ( name ) ) , type ) . name ( name ) ; } 
public void METHOD_1 ( TYPE_1 . NameKey projectName , java.lang.String VAR_1 , java.lang.String msg , java.util.List < TYPE_2 > VAR_2 , TYPE_3 < TYPE_4 > VAR_3 ) { org.eclipse.jgit.lib.ObjectId base ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { base = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_1 ) ; } else { base = null ; } VAR_4 . create ( projectName , base , VAR_2 , msg ) . to ( VAR_3 ) ; } 
protected void METHOD_1 ( int row , int VAR_1 ) { super . METHOD_1 ( row , VAR_1 ) ; if ( ( VAR_1 == 1 ) || ( VAR_1 == 2 ) ) { if ( ! ( STRING_1 . equals ( table . METHOD_2 ( row , VAR_1 ) ) ) ) { METHOD_3 ( row , VAR_1 ) ; } } } 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; if ( ( view ) != null ) { view . METHOD_6 ( STRING_1 , VAR_1 ) ; } } } 
TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_2 VAR_3 = new TYPE_2 ( ( ( VAR_4 . get ( ) . METHOD_2 ( ) ) + VAR_1 ) ) ; if ( ! ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ) { VAR_3 . METHOD_4 ( STRING_1 , TYPE_4 . toString ( ) ) ; VAR_3 . METHOD_5 ( new TYPE_5 ( VAR_2 , VAR_5 ) ) ; } return VAR_6 . METHOD_6 ( VAR_3 , new TYPE_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . account = user . email ; VAR_3 = STRING_2 ; in . ref = STRING_3 ; VAR_1 . METHOD_2 ( VAR_2 class ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = name ( STRING_1 ) ; TYPE_1 in = new TYPE_1 ( ) ; in . name = VAR_1 ; VAR_2 = true ; VAR_3 . projects ( ) . create ( in ) ; METHOD_2 ( VAR_1 , VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_3 , int VAR_4 , boolean edit ) { VAR_5 . add ( new TYPE_2 ( VAR_6 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) ; } 
public void METHOD_1 ( final TYPE_1 req , final TYPE_2 VAR_1 ) { TYPE_5 . METHOD_3 ( req . METHOD_4 ( ) , req . METHOD_5 ( ) , new TYPE_6 < TYPE_5 > ( ) { public void onSuccess ( TYPE_5 VAR_2 ) { VAR_1 . METHOD_6 ( req , new TYPE_7 ( TYPE_8 . METHOD_7 ( VAR_2 . values ( ) ) ) ) ; } } ) ; } 
private void METHOD_1 ( final TYPE_1 . ReceiveCommand cmd ) { TYPE_2 ctl = VAR_1 . METHOD_2 ( cmd . getRefName ( ) ) ; if ( ctl . METHOD_3 ( ) ) { if ( ( TYPE_3 . METHOD_4 ( cmd ) ) && ( ! ( METHOD_5 ( cmd ) ) ) ) { return ; } METHOD_6 ( ctl , cmd ) ; cmd . METHOD_7 ( rp ) ; } else { reject ( cmd , STRING_1 ) ; } } 
static TYPE_1 < com.google.gerrit.server.query.change.ChangeData , ? > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String id ) { if ( ( ( ( id . length ( ) ) == ( VAR_1 ) ) && ( schema != null ) ) && ( schema . METHOD_2 ( VAR_2 ) ) ) { return VAR_2 ; } return VAR_3 ; } 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > p ) { if ( p instanceof TYPE_4 < ? > ) { return METHOD_2 ( p ) ; } return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { try { for ( com.google.gerrit.server.query.change.ChangeData VAR_2 : index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( args , VAR_1 . getId ( ) ) , this ) , 0 , 1 ) . METHOD_4 ( ) ) { if ( VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ) { return true ; } } } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return false ; } 
private TYPE_1 message ( final TYPE_2 . Change c , final java.lang.String VAR_1 ) { final java.lang.String VAR_2 ; try { VAR_2 = TYPE_3 . METHOD_1 ( schema ) ; } catch ( TYPE_4 . OrmException e ) { return null ; } final TYPE_1 m = new TYPE_1 ( new TYPE_1 . Key ( c . getId ( ) , VAR_2 ) , null , c . currentPatchSetId ( ) ) ; m . METHOD_2 ( VAR_1 ) ; return m ; } 
protected java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , org.eclipse.jgit.revwalk.RevWalk VAR_2 ) throws TYPE_2 { try { return METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ; } catch ( TYPE_2 e ) { throw e ; } catch ( java.io.IOException e ) { TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_5 ( e ) ; throw VAR_4 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { repo . METHOD_2 ( 2 ) ; TYPE_1 VAR_1 = repo . METHOD_3 ( STRING_1 , repo . commit ( ) . create ( ) ) ; repo . METHOD_2 ( ( - 1 ) ) ; TYPE_1 VAR_2 = repo . METHOD_3 ( STRING_2 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( METHOD_4 ( VAR_1 ) ) . isEqualTo ( ( ( VAR_3 ) + INT_1 ) ) ; com.google.common.truth.Truth.assertThat ( METHOD_4 ( VAR_2 ) ) . isEqualTo ( ( ( VAR_3 ) + 2 ) ) ; } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = repo . METHOD_2 ( ) ; try { org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ; VAR_1 . METHOD_3 ( ) ; return id ; } finally { VAR_1 . close ( ) ; } } 
public TYPE_1 create ( ) { final java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( out . size ( ) ) ; for ( final com.google.gerrit.reviewdb.client . AccountGroup a : out . values ( ) ) { if ( a == null ) continue ; r . add ( new TYPE_2 ( a ) ) ; } return new TYPE_1 ( r ) ; } 
private java.util.List < java.lang.String > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.ArrayList < java.lang.String > result = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { for ( TYPE_2 VAR_4 : VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) { java.lang.String [ ] VAR_5 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) ; result . add ( VAR_5 [ 0 ] ) ; } } return result ; } 
protected void insert ( final int row , final TYPE_1 VAR_1 ) { table . METHOD_1 ( row ) ; METHOD_2 ( row ) ; final TYPE_2 VAR_2 = table . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( row , 1 , TYPE_3 . css ( ) . METHOD_5 ( ) ) ; VAR_2 . METHOD_4 ( row , 2 , TYPE_3 . css ( ) . METHOD_5 ( ) ) ; METHOD_7 ( row , VAR_1 ) ; } 
public void run ( ) { try { TYPE_1 cm = VAR_1 . create ( ctx . getProject ( ) , psId . getParentKey ( ) ) ; cm . METHOD_1 ( ctx . getAccountId ( ) ) ; cm . METHOD_3 ( patchSet , info ) ; cm . METHOD_4 ( ) ; } catch ( java.lang.Exception e ) { VAR_2 . error ( ( STRING_1 + ( psId ) ) , e ) ; } } 
public void run ( ) { try { METHOD_1 ( ) ; } catch ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( 1 ) ; } catch ( TYPE_3 e ) { VAR_2 . METHOD_5 ( e . toString ( ) ) ; } catch ( java.lang.Exception e ) { METHOD_4 ( e ) ; } METHOD_6 ( ) ; } 
private TYPE_3 METHOD_1 ( TYPE_2 cfg , java.lang.String revision ) { TYPE_3 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( cfg . METHOD_4 ( VAR_2 , true ) ) . METHOD_5 ( STRING_1 ) ; for ( java.lang.String name : VAR_3 . METHOD_6 ( ) ) { VAR_1 . METHOD_7 ( name , VAR_3 . METHOD_8 ( name ) ) ; } VAR_1 . METHOD_7 ( STRING_2 ) ; VAR_1 . METHOD_7 ( STRING_3 , revision ) ; return VAR_1 ; } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 in ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( VAR_1 . get ( ) ) != ( rsrc . METHOD_1 ( ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , rsrc . getChange ( ) . getProject ( ) , rsrc . getChange ( ) . getId ( ) ) ; return TYPE_1 . METHOD_3 ( ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , java.util.Set < TYPE_2 > VAR_3 ) throws java.io.IOException { java.lang.String VAR_5 = java.lang.String . METHOD_3 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; if ( ! ( TYPE_4 . METHOD_4 ( VAR_5 ) ) ) { VAR_6 . METHOD_5 ( VAR_1 , VAR_5 ) ; } } 
private java.lang.String METHOD_1 ( int VAR_1 , java.lang.String topic ) throws TYPE_1 { if ( ( topic == null ) || ( topic . isEmpty ( ) ) ) { topic = STRING_1 + ( TYPE_2 . METHOD_2 ( ) . toString ( ) ) ; VAR_2 . METHOD_3 ( STRING_2 , VAR_1 , topic ) ; VAR_3 . changes ( ) . id ( VAR_1 ) . topic ( topic ) ; } return topic ; } 
java.util.Map < java.lang.String , ? > METHOD_1 ( TYPE_1 req ) throws java.io.IOException { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( req ) . METHOD_3 ( ) ; return TYPE_3 . of ( STRING_1 , VAR_3 , STRING_2 , TYPE_4 . METHOD_4 ( VAR_4 ) , STRING_3 , METHOD_5 ( req , VAR_5 ) , STRING_4 , METHOD_5 ( req , VAR_7 ) ) ; } 
public int METHOD_1 ( TYPE_1 b ) { int VAR_1 = ( TYPE_1 . index ( this ) ) - ( TYPE_1 . index ( b ) ) ; if ( VAR_1 == 0 ) { VAR_1 = getName ( ) . METHOD_1 ( b . getName ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 VAR_1 = db . METHOD_2 ( ) ; final TYPE_2 VAR_2 = db . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_3 , VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 ctl , com.google.gerrit.reviewdb.client.PatchSet in ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) ; try ( org.eclipse.jgit.lib.Repository repo = METHOD_3 ( ctl ) ) { TYPE_1 VAR_4 = METHOD_4 ( ctl , VAR_5 . create ( db . get ( ) , ctl ) , in , repo , true , null ) ; VAR_1 . METHOD_5 ( ) ; return VAR_4 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ; METHOD_3 ( ) ; org.junit.Assert.assertEquals ( ( STRING_1 + ( STRING_2 + STRING_4 ) ) , METHOD_2 ( STRING_1 ) ) ; METHOD_3 ( ) ; org.junit.Assert.assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) ; } 
protected int METHOD_1 ( TYPE_1 cfg , java.lang.String name , int VAR_1 ) { try { return cfg . METHOD_1 ( name , VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . error ( java.lang.String.format ( STRING_1 , name , VAR_1 ) ) ; VAR_2 . METHOD_2 ( ( STRING_2 + ( e . getMessage ( ) ) ) , e ) ; return VAR_1 ; } } 
public TYPE_1 add ( final TYPE_2 < TYPE_3 > VAR_1 ) { final TYPE_4 < TYPE_2 < TYPE_3 > > ref = new TYPE_4 ( VAR_1 ) ; VAR_2 . add ( ref ) ; return new TYPE_1 ( ) { public void METHOD_1 ( ) { if ( ref . METHOD_2 ( VAR_1 , null ) ) { VAR_2 . METHOD_1 ( ref ) ; } } } ; } 
private synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 . getName ( ) ) ; java.lang.String name = VAR_1 . getName ( ) ; VAR_3 . info ( java.lang.String.format ( STRING_1 , name , VAR_1 . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; VAR_5 . METHOD_6 ( name ) ; VAR_6 . METHOD_6 ( name ) ; VAR_7 . add ( VAR_1 ) ; } 
private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { TYPE_1 result = new TYPE_1 ( ) { public void METHOD_2 ( TYPE_3 VAR_2 ) throws java.io.IOException { VAR_1 . METHOD_3 ( VAR_2 ) ; } } ; result . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; return result ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { display ( r ) ; } public void METHOD_6 ( final TYPE_4 VAR_5 ) { TYPE_5 . log ( STRING_1 , VAR_5 ) ; } } ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( ( VAR_1 instanceof TYPE_3 ) ) ; org.junit.Assert . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ; final TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) ; org.junit.Assert . METHOD_3 ( ( VAR_2 instanceof TYPE_5 ) ) ; org.junit.Assert . METHOD_5 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = ( cd != null ) ? cd . reviewers ( ) . values ( ) : VAR_2 . METHOD_4 ( db , change.getId ( ) ) . values ( ) ; TYPE_3 user = ( ( TYPE_3 ) ( METHOD_2 ( ) ) ) ; return VAR_1 . contains ( user . getAccountId ( ) ) ; } return false ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_4 { TYPE_5 VAR_5 = METHOD_2 ( VAR_1 , VAR_3 ) ; TYPE_6 VAR_6 = TYPE_6 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( VAR_4 ) . METHOD_6 ( ) ; METHOD_7 ( VAR_2 , VAR_5 , VAR_6 ) ; } 
protected void METHOD_1 ( ) { for ( TYPE_1 w = METHOD_2 ( ) ; w != null ; w = w . METHOD_2 ( ) ) { if ( w instanceof TYPE_2 ) { ( ( TYPE_2 ) ( w ) ) . METHOD_1 ( ) ; break ; } } } 
private java.lang.String METHOD_1 ( ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { org.eclipse.jgit.lib.ObjectId VAR_2 = repo . METHOD_3 ( STRING_1 ) ; org.eclipse.jgit.lib.ObjectId VAR_3 = repo . METHOD_3 ( STRING_2 ) ; return METHOD_4 ( repo , VAR_2 , VAR_3 ) ; } finally { rw . close ( ) ; } } finally { repo . close ( ) ; } } 
public void onSuccess ( TYPE_1 result ) { VAR_1 . METHOD_1 ( ) ; if ( TYPE_2 . info ( ) . auth ( ) . METHOD_3 ( ) ) { VAR_2 = VAR_3 ; if ( ( VAR_4 . METHOD_4 ( ) ) == 0 ) { final com.google.gerrit.reviewdb.client.Account me = TYPE_2 . METHOD_5 ( ) ; me . METHOD_6 ( VAR_3 ) ; METHOD_7 ( me ) ; } else { VAR_5 . METHOD_8 ( true ) ; } METHOD_9 ( ) ; } } 
static int METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = VAR_1 . change ( ) . getProject ( ) ; try { return ( ( VAR_2 . config ) == null ) || ( project == null ) ? VAR_3 : VAR_4 . METHOD_2 ( project , VAR_5 ) . METHOD_3 ( VAR_6 , VAR_3 ) ; } catch ( TYPE_1 e ) { VAR_7 . error ( ( STRING_1 + project ) , e ) ; return VAR_3 ; } } 
private void METHOD_1 ( TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { for ( TYPE_2 VAR_1 : VAR_2 . values ( ) ) { if ( METHOD_2 ( event , VAR_1 . user , db ) ) { VAR_3 . METHOD_3 ( event ) ; } } METHOD_4 ( event ) ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) ) ; bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( project ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( cfg , VAR_3 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) ; METHOD_6 ( project , cfg ) ; } 
public void name ( java.lang.String name ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . name = name ; try { VAR_1 . apply ( rsrc , in ) ; } catch ( java.lang.Exception e ) { throw TYPE_5 . METHOD_1 ( STRING_1 , e ) ; } } 
public java.lang.String METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String name , final java.lang.String VAR_2 , final boolean VAR_3 ) { final java.lang.String VAR_4 = get ( name ) ; java.lang.String VAR_5 = ui . METHOD_2 ( ( VAR_4 != null ? VAR_4 : VAR_2 ) , STRING_1 , VAR_1 ) ; if ( VAR_3 && ( VAR_5 . equals ( VAR_2 ) ) ) { VAR_5 = null ; } if ( ! ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_5 ) ) ) { set ( name , VAR_5 ) ; } return VAR_5 ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < TYPE_3 . Account > ( ) { public void onSuccess ( final TYPE_3 . Account result ) { display ( result . METHOD_3 ( ) ) ; METHOD_4 ( true ) ; } } ) ; } 
public void METHOD_1 ( ) { org.junit.Assert . METHOD_2 ( ( ( METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) ; org.junit.Assert . METHOD_5 ( ( ( METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; TYPE_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) , VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { for ( int i = 1 ; i < INT_1 ; i ++ ) { java.lang.String p = STRING_1 + i ; METHOD_2 ( p ) ; TYPE_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( p ) , VAR_1 ) ; } return null ; } 
private TYPE_1 . Result METHOD_1 ( java.lang.String ref , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , git , VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . to ( ref ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , STRING_1 ) ; try { org.junit.Assert . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; org.junit.Assert . METHOD_3 ( VAR_2 . METHOD_5 ( ) ) ; final TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 ) ; org.junit.Assert . METHOD_6 ( VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_5 ) ; } finally { VAR_2 . delete ( ) ; VAR_1 . delete ( ) ; } } 
TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_1 < TYPE_2 > ( ) { private static final long VAR_1 = INT_1 ; public void METHOD_1 ( TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { try ( TYPE_4 VAR_4 = new TYPE_4 ( new TYPE_5 ( VAR_3 ) ) ) { VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( ) ; } catch ( java.io.IOException err ) { throw new TYPE_6 ( STRING_1 , err ) ; } } } ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change change = insert ( repo , METHOD_3 ( repo ) ) ; TYPE_3 query = METHOD_4 ( STRING_2 ) . METHOD_5 ( INT_1 ) ; METHOD_6 ( query , change ) ; METHOD_6 ( query . METHOD_7 ( 1 ) ) ; METHOD_6 ( query . METHOD_7 ( INT_2 ) ) ; METHOD_8 ( query . METHOD_7 ( INT_3 ) ) ; METHOD_6 ( query . METHOD_5 ( INT_3 ) . METHOD_7 ( INT_3 ) ) ; } 
private void METHOD_1 ( TYPE_1 i ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_4 , TYPE_5 { TYPE_6 VAR_1 = TYPE_6 . create ( user . getAccountId ( ) , VAR_2 , VAR_3 ) ; VAR_4 . apply ( new TYPE_7 ( user . METHOD_2 ( ) , VAR_1 ) , null ) ; } 
public java.util.Set < com.google.gerrit.reviewdb.client.PatchSet.Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.PatchSet.Id > VAR_1 = new TYPE_1 < > ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . values ( ) ) { VAR_1 . add ( cd . change ( ) . currentPatchSetId ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . delete ( ) ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_9 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_10 ( ) . METHOD_11 ( ) ) . METHOD_3 ( ) ; } 
private Account . Id user ( java.lang.String name , java.lang.String email ) { final TYPE_1 s = METHOD_1 ( name , email ) ; TYPE_2 . METHOD_2 ( VAR_1 . get ( TYPE_2 . METHOD_4 ( s . METHOD_5 ( ) . getId ( ) ) ) ) . METHOD_6 ( TYPE_3 . of ( s ) ) ; return s . METHOD_5 ( ) . getId ( ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_5 ( STRING_1 ) ; TYPE_4 VAR_5 = new TYPE_4 ( ) ; org.eclipse.jgit.lib.ObjectId VAR_6 = METHOD_6 ( VAR_1 , VAR_5 ) ; if ( VAR_5 . get ( ) ) { return null ; } VAR_2 . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_6 ) ) ; return VAR_2 ; } 
public TYPE_1 format ( TYPE_1 out , TYPE_2 ctl , TYPE_3 VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctl . getChange ( ) . currentPatchSetId ( ) ; return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , ctl , psId , VAR_3 ) ) ; } 
protected TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( ) ; } catch ( TYPE_3 . OrmException e ) { throw new TYPE_2 ( INT_1 , STRING_1 , e ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( INT_1 , STRING_1 , e ) ; } } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { if ( ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ) { return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; } throw new TYPE_3 ( rsrc . METHOD_2 ( ) . getProject ( ) . getName ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return new TYPE_2 ( ) { public java.util.Set < TYPE_3 > METHOD_3 ( TYPE_4 < TYPE_3 > VAR_1 ) { return null ; } public java.util.Set < TYPE_3 > METHOD_4 ( ) { return null ; } public boolean METHOD_5 ( TYPE_4 < TYPE_3 > VAR_1 ) { return true ; } public boolean contains ( TYPE_3 VAR_2 ) { return true ; } } ; } } ; } 
private static TYPE_1 METHOD_1 ( ) throws TYPE_2 { final TYPE_3 factory = TYPE_3 . METHOD_2 ( ) ; factory . METHOD_3 ( false ) ; factory . METHOD_4 ( false ) ; factory . METHOD_5 ( true ) ; factory . METHOD_6 ( true ) ; return factory . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_3 ( repo , null , null , null , null ) ) ; java.lang.String key = change . getKey ( ) . get ( ) ; METHOD_4 ( STRING_2 ) ; for ( int i = 0 ; i <= INT_1 ; i ++ ) { java.lang.String VAR_1 = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ; METHOD_4 ( VAR_1 , change ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; TYPE_2 < TYPE_3 > repo = METHOD_3 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = insert ( repo , METHOD_4 ( repo ) ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( repo , METHOD_4 ( repo ) ) ; TYPE_1 . METHOD_5 ( 0 , VAR_4 ) ; METHOD_6 ( STRING_2 ) ; METHOD_6 ( STRING_3 , VAR_3 ) ; METHOD_6 ( STRING_4 , VAR_3 ) ; METHOD_6 ( STRING_5 , VAR_3 ) ; METHOD_6 ( STRING_6 , VAR_3 , VAR_2 ) ; } 
public TYPE_1 get ( ) { try { return new TYPE_2 ( server , schema ) ; } catch ( final TYPE_3 VAR_1 ) { return new TYPE_1 ( ) { public void METHOD_1 ( TYPE_4 . Account account , TYPE_5 info ) throws TYPE_3 { throw VAR_1 ; } } ; } } 
public static com.google.gerrit.reviewdb.client.Change . Id METHOD_1 ( java.lang.String ref ) { int VAR_1 = ( ref . METHOD_2 ( TYPE_1 ) ) + ( TYPE_1 . length ( ) ) ; int VAR_2 = TYPE_2 . METHOD_3 ( ref , VAR_1 ) ; java.lang.String id = ref . METHOD_4 ( VAR_1 , VAR_2 ) ; if ( ( id != null ) && ( ! ( id . isEmpty ( ) ) ) ) { return new com.google.gerrit.reviewdb.client.Change . Id ( TYPE_3 . METHOD_5 ( id ) ) ; } return null ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > in ) { java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList ( in . size ( ) ) ; for ( TYPE_1 m : in ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( TYPE_2 c : VAR_1 . METHOD_3 ( ) ) { r . add ( new TYPE_1 ( c , VAR_2 ) ) ; } } else { r . add ( m ) ; } } return r ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . HttpServletResponse res ) throws java.io.IOException { byte [ ] msg = TYPE_3 . message ( VAR_1 ) ; res . METHOD_2 ( TYPE_4 . METHOD_3 ( ) , STRING_1 ) ; res . METHOD_4 ( msg . length ) ; try { TYPE_5 . METHOD_5 ( res ) ; } finally { try ( TYPE_6 out = res . METHOD_6 ( ) ) { out . METHOD_7 ( msg ) ; } } } 
public java.lang.String METHOD_1 ( ) { final java.lang.String s = METHOD_2 ( ) ; if ( ( s == null ) || ( ( s . length ( ) ) == 0 ) ) { return STRING_1 ; } final java.lang.String [ ] VAR_1 = s . METHOD_3 ( STRING_2 , INT_1 ) ; if ( ( VAR_1 . length ) < INT_1 ) { return STRING_1 ; } return VAR_1 [ 2 ] ; } 
private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id id ; try { id = TYPE_2 . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_3 VAR_2 ) { return null ; } try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_3 ( ) ) { return auth ( db . METHOD_4 ( ) . get ( id ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_5 ( ) . log ( STRING_1 , e ) ; return null ; } } 
public void close ( ) throws java.io.IOException { try { TYPE_1 VAR_1 = METHOD_1 ( ) ; if ( VAR_1 != null ) { while ( ( VAR_1 . METHOD_2 ( ) ) != ( - 1 ) ) { } } } finally { VAR_2 . close ( ) ; } } 
private void METHOD_1 ( ) { VAR_2 = new TYPE_2 ( ) ; VAR_2 . add ( new TYPE_3 ( TYPE_4 . METHOD_2 ( ) ) ) ; VAR_3 = new TYPE_5 ( STRING_1 , STRING_1 ) ; VAR_2 . add ( VAR_3 ) ; add ( VAR_2 ) ; } 
private static java.util.List < com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( TYPE_1 . ChangeInfo info ) { TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_2 ( ) . values ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; java.util.List < com.google.gerrit.reviewdb.client.PatchSet > r = new java.util.ArrayList ( VAR_1 . length ( ) ) ; for ( TYPE_3 VAR_2 : TYPE_4 . METHOD_4 ( VAR_1 ) ) { r . add ( TYPE_5 . METHOD_5 ( info , VAR_2 ) ) ; } return r ; } 
public boolean METHOD_1 ( java.io.IOException VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { if ( ( VAR_2 > ( cfg . METHOD_2 ( ) ) ) || ( VAR_1 instanceof TYPE_2 ) ) { return false ; } METHOD_3 ( VAR_1 . getMessage ( ) , VAR_3 ) ; try { TYPE_3 . METHOD_4 ( cfg . METHOD_5 ( ) ) ; } catch ( TYPE_4 e ) { TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) ; return false ; } return true ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; com.google.common.truth.Truth.assertThat ( a . METHOD_2 ( ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( a . METHOD_4 ( VAR_1 ) ) . isEqualTo ( STRING_3 ) ; com.google.common.truth.Truth.assertThat ( a . toString ( ) ) . isEqualTo ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < java.lang.String , TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) ) ; for ( java.lang.String VAR_2 : TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) ) { com.google.common.truth.Truth.assertThat ( TYPE_5 . METHOD_4 ( ) . get ( VAR_2 ) . METHOD_6 ( ) ) . isEqualTo ( VAR_1 . get ( VAR_2 ) . METHOD_6 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_1 t ) { if ( t instanceof TYPE_2 ) return new TYPE_2 ( ( ( this . METHOD_3 ( ) ) - ( t . METHOD_3 ( ) ) ) ) ; return new TYPE_3 ( ( ( this . VAR_1 ) - ( t . METHOD_4 ( ) ) ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String query , final int VAR_2 ) { return TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( query , VAR_1 ) , ( VAR_2 <= 0 ? INT_1 : TYPE_3 . METHOD_2 ( VAR_2 , INT_1 ) ) ) ) ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = TYPE_8 . of ( VAR_1 . METHOD_1 ( ) . get ( ) ) ; return delete . get ( ) . apply ( VAR_1 , in ) ; } 
public TYPE_1 METHOD_1 ( int index ) { int VAR_2 = METHOD_2 ( index , false , VAR_3 ) ; if ( VAR_2 < 0 ) { return null ; } return METHOD_3 ( VAR_2 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ; } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; modules.add ( VAR_3 . METHOD_2 ( VAR_4 class ) ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_5 class ) ) ; modules.add ( TYPE_3 . METHOD_3 ( ) ) ; modules.add ( TYPE_4 . METHOD_3 ( ) ) ; return VAR_3 . METHOD_4 ( modules ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_2 = METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_3 class ) ; TYPE_3 . METHOD_7 ( user , VAR_2 ) ; METHOD_8 ( STRING_2 , admin , user ) ; r . METHOD_9 ( ) ; com.google.common.truth.Truth.assertThat ( METHOD_10 ( STRING_1 ) ) . isEqualTo ( VAR_4 ) ; METHOD_8 ( STRING_2 , admin ) ; } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; id = new com.google.gerrit.reviewdb.client.Change . Id ( VAR_4 ) ; TYPE_3 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) . METHOD_5 ( ( STRING_1 + ( VAR_4 ) ) ) ; change = new com.google.gerrit.reviewdb.client.Change ( null , id , null , null , TYPE_4 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( java.lang.String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; TYPE_4 VAR_2 = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ; VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
private static TYPE_1 METHOD_1 ( ) { if ( TYPE_2 . METHOD_2 ( ) ) { return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; } else { TYPE_1 r = new TYPE_3 ( null ) ; r . METHOD_4 ( true ) ; return r ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client . AccountGroup VAR_1 = VAR_2 . get ( new TYPE_1 . NameKey ( STRING_1 ) ) ; METHOD_1 ( VAR_1 . METHOD_2 ( ) . get ( ) , VAR_1 ) ; METHOD_1 ( VAR_1 . getName ( ) , VAR_1 ) ; METHOD_1 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) ; } 
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id , TYPE_2 > i : METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( id ) ; TYPE_3 < TYPE_2 > VAR_2 = VAR_1 . get ( id ) ; if ( VAR_2 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_2 . get ( ) ) ; } else { i . delete ( id ) ; } } METHOD_5 ( id . get ( ) ) ; } 
private static boolean METHOD_1 ( TYPE_1 view , java.lang.String name ) { java.util.List < java.lang.String > values = view . METHOD_2 ( ) . get ( name ) ; return ( ! ( values . isEmpty ( ) ) ) && ( ( values . get ( 0 ) . isEmpty ( ) ) || ( values . get ( 0 ) . equals ( STRING_2 ) ) ) ; } 
private static void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; for ( java.lang.String s : new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 } ) { VAR_1 . METHOD_3 ( s ) ; } TYPE_2 . METHOD_4 ( STRING_8 , VAR_1 ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.util.Set < TYPE_2 > VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } if ( VAR_4 != null ) { VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } VAR_1 . append ( CHAR_3 ) ; } 
public static void METHOD_1 ( TYPE_1 a , TYPE_2 VAR_1 ) { com.google.common.truth.Truth.assertThat ( VAR_2 . get ( ) ) . isEqualTo ( VAR_3 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( VAR_1 . name ) ; com.google.common.truth.Truth.assertThat ( a . email ) . isEqualTo ( VAR_1 . email ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String projectName , java.lang.String revision , java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) { return METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 , METHOD_4 ( projectName ) ) . METHOD_3 ( STRING_2 , METHOD_4 ( revision ) ) . METHOD_3 ( STRING_3 , METHOD_4 ( VAR_1 ) ) . toString ( ) ) ; } return null ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert . METHOD_4 ( VAR_1 , n ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( STRING_2 + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) ; } 
private java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( ( VAR_2 . get ( VAR_1 ) ) == null ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_2 . put ( VAR_1 , VAR_3 . METHOD_1 ( ) ) ; } return VAR_2 . get ( VAR_1 ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( false ) ; super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; display ( result ) ; } } ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { for ( TYPE_3 VAR_3 : VAR_2 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ) ; } } VAR_4 . put ( VAR_1 . getName ( ) , VAR_1 ) ; } 
private void METHOD_1 ( ) { if ( ( db ) != null ) { final TYPE_1 ps = METHOD_2 ( ) ; if ( ps != null ) { for ( final TYPE_2 w : METHOD_3 ( ) ) { if ( w . METHOD_4 ( ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 , VAR_7 , VAR_4 ) . to ( VAR_8 ) . METHOD_10 ( VAR_10 ) . METHOD_10 ( VAR_9 , VAR_11 ) . METHOD_9 ( VAR_3 ) ; } 
public java.lang.String METHOD_1 ( final TYPE_1 . NameKey project , final TYPE_2 . PatchSet ps ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; TYPE_4 . p ( r , project ) ; TYPE_4 . METHOD_2 ( r , ps ) ; return ( VAR_1 ) + r ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 ) . METHOD_10 ( VAR_8 ) . METHOD_10 ( VAR_7 , VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 in = new TYPE_2 ( ) ; VAR_2 = VAR_1 ; VAR_3 = VAR_4 . FALSE ; TYPE_3 r = VAR_5 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_6 ) ; r . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , admin , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . METHOD_5 ( VAR_6 , VAR_7 , admin ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 cfg , TYPE_3 VAR_1 , TYPE_4 . Factory VAR_2 , TYPE_5 < TYPE_6 > VAR_3 , TYPE_7 VAR_4 ) throws TYPE_8 { TYPE_1 s = new TYPE_1 ( cfg , null , VAR_1 , VAR_2 , VAR_3 , null , null , null , null ) ; for ( TYPE_9 view : TYPE_10 . values ( ) ) { s . METHOD_2 ( view , VAR_4 ) ; } return s ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; com.google.common.truth.Truth.assertThat ( a . METHOD_2 ( ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( a . METHOD_4 ( VAR_1 ) ) . isEqualTo ( VAR_2 ) ; com.google.common.truth.Truth.assertThat ( a . toString ( ) ) . isEqualTo ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet patchSet , TYPE_1 VAR_1 ) throws TYPE_2 { VAR_4 . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) ; } 
public java.lang.String METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( 0 , VAR_2 . METHOD_3 ( STRING_1 ) ) ; java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( STRING_1 ) ) + 1 ) ) ; METHOD_4 ( VAR_4 , VAR_1 , VAR_3 ) ; return VAR_4 ; } 
private boolean METHOD_1 ( final int i ) { final int s = VAR_1 . get ( i ) . METHOD_2 ( ) ; final int e = VAR_1 . get ( ( i - 1 ) ) . METHOD_3 ( ) ; return ( s - e ) <= ( ( 2 * ( VAR_2 ) ) + 1 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { try { return VAR_2 . get ( VAR_3 . get ( ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getParentKey ( ) , ( ( VAR_1 . get ( ) ) - 1 ) ) ) ; } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } 
public void run ( ) { assert ( VAR_1 ) != null ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( VAR_2 ) != null ) { VAR_3 . METHOD_4 ( VAR_4 , VAR_2 . METHOD_5 ( ) ) ; } else { assert ( VAR_5 ) != null ; VAR_5 . METHOD_6 ( ) ; } } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet ps ) throws TYPE_1 { try { return org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ps . getRevision ( ) . get ( ) ) ; } catch ( TYPE_2 e ) { VAR_1 . error ( ( ( STRING_1 + ( ps . getId ( ) ) ) + STRING_2 ) ) ; throw new TYPE_1 ( ) ; } } 
private static java.lang.String METHOD_1 ( java.lang.String branch , java.lang.String topic ) { if ( ( topic != null ) && ( ! ( topic . isEmpty ( ) ) ) ) { return ( ( branch + STRING_1 ) + topic ) + STRING_2 ; } return branch ; } 
public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.Repository repo , java.lang.String message , java.util.Set < TYPE_1 > VAR_1 ) throws java.io.IOException , TYPE_2 { java.util.Map < TYPE_1 , byte [ ] > VAR_2 = new TYPE_3 < > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_2 . put ( VAR_3 , null ) ; } return TYPE_4 . METHOD_1 ( rw , repo , message , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_2 ) . METHOD_6 ( VAR_6 , VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ; } 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ) { METHOD_3 ( db ) ; } else { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ) { METHOD_3 ( db ) ; } } synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } return null ; } 
public void METHOD_1 ( final int VAR_1 ) { assert ( 0 <= VAR_1 ) && ( VAR_1 <= INT_1 ) ; value = VAR_1 ; VAR_2 . METHOD_2 ( ( ( 2 * VAR_1 ) + STRING_2 ) ) ; msg . METHOD_3 ( ( ( ( VAR_3 ) + VAR_1 ) + STRING_3 ) ) ; } 
public static < TYPE_1 > void setOf ( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 . Key < com.google.gerrit.extensions.registration.DynamicSet < TYPE_1 > > key = ( ( TYPE_4 . Key < com.google.gerrit.extensions.registration.DynamicSet < TYPE_1 > > ) ( TYPE_5 . get ( TYPE_6 . METHOD_1 ( VAR_2 . DynamicSet class , VAR_1 . METHOD_2 ( ) ) ) ) ) ; binder . bind ( key ) . METHOD_3 ( new TYPE_7 ( VAR_1 ) ) . in ( VAR_3 ) ; } 
protected com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_2 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ; TYPE_3 u = METHOD_2 ( c , VAR_1 ) ; u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) ; u . commit ( ) ; return c ; } 
public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { TYPE_2 r = ( ( TYPE_2 ) ( VAR_1 ) ) ; return ( ( ( ( TYPE_3 . equals ( name , r . name ) ) && ( TYPE_3 . equals ( id , r . id ) ) ) && ( ( type ) == ( r . type ) ) ) && ( TYPE_3 . equals ( VAR_2 , VAR_3 ) ) ) && ( ( VAR_4 ) == ( VAR_5 ) ) ; } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_1 = METHOD_3 ( repo , VAR_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( repo , VAR_1 ) ; TYPE_3 VAR_4 = METHOD_3 ( repo , VAR_5 ) ; com.google.gerrit.reviewdb.client.Change VAR_6 = insert ( repo , VAR_4 ) ; METHOD_4 ( STRING_2 , VAR_3 ) ; METHOD_4 ( STRING_3 , VAR_3 ) ; METHOD_4 ( STRING_4 , VAR_3 ) ; METHOD_4 ( STRING_5 , VAR_6 ) ; METHOD_4 ( STRING_6 , VAR_6 ) ; } 
public void METHOD_1 ( TYPE_1 event ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; } if ( VAR_2 . METHOD_4 ( event ) ) { if ( ( VAR_3 ) > 0 ) { TYPE_2 . METHOD_5 ( STRING_1 , VAR_3 ) ; VAR_3 = 0 ; } } else { if ( ( ( ( VAR_3 ) ++ ) % INT_1 ) == 0 ) { TYPE_2 . error ( STRING_2 , VAR_3 ) ; } } } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) ; int e = VAR_1 . METHOD_4 ( CHAR_1 ) ; TYPE_2 . METHOD_2 ( ( e >= 0 ) , STRING_2 , VAR_1 ) ; return TYPE_1 . create ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) , VAR_1 . length ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( STRING_1 ) ; name = new TYPE_1 . NameKey ( STRING_2 ) ; VAR_2 = METHOD_3 ( ) ; VAR_3 = TYPE_2 . METHOD_4 ( VAR_4 . Repository class ) ; VAR_5 = TYPE_2 . METHOD_4 ( VAR_6 class ) ; VAR_7 = TYPE_2 . METHOD_4 ( VAR_8 . Factory class ) ; VAR_9 = TYPE_2 . METHOD_4 ( VAR_10 class ) ; VAR_11 = new java.util.ArrayList < TYPE_3 > ( ) ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { TYPE_3 VAR_1 = VAR_2 . get ( req . METHOD_2 ( ) ) ; if ( VAR_1 == null ) { rsp . METHOD_3 ( VAR_3 ) ; return ; } switch ( VAR_1 . METHOD_4 ( ) ) { case VAR_4 : METHOD_5 ( VAR_1 , rsp ) ; break ; case VAR_5 : METHOD_6 ( VAR_1 , req , rsp ) ; break ; default : rsp . METHOD_3 ( VAR_3 ) ; break ; } } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . revision ( r . METHOD_3 ( ) . name ( ) ) . METHOD_1 ( ) ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Exception error ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_4 ( ) . getName ( ) ) , error ) ; } else { VAR_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_4 ( ) . getName ( ) , error . getMessage ( ) ) ; } } 
private boolean METHOD_1 ( ) { if ( ( TYPE_1 . equals ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { if ( ! ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( VAR_2 . METHOD_5 ( ) ) ) ) { return false ; } } return METHOD_6 ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_2 = new TYPE_2 ( TYPE_3 . of ( TYPE_4 . METHOD_3 ( STRING_3 ) ) , VAR_3 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . format ( VAR_1 ) ) . isEqualTo ( STRING_4 ) ; } 
public void run ( ) { try { final TYPE_1 cm = VAR_1 . create ( id ) ; cm . METHOD_1 ( VAR_3 . getAccountId ( ) ) ; cm . METHOD_2 ( VAR_4 , result . info ) ; cm . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_5 = VAR_4 . getId ( ) ; VAR_6 . error ( ( STRING_1 + VAR_5 ) , e ) ; } } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != ( this ) ) return VAR_2 . METHOD_1 ( VAR_1 ) ; if ( ! ( VAR_1 instanceof TYPE_2 ) ) return VAR_3 ; if ( ( this ) == VAR_1 ) return VAR_4 ; int VAR_5 = ( this . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ; if ( VAR_5 != 0 ) return VAR_5 ; throw new TYPE_3 ( STRING_1 ) ; } 
private static < C extends TYPE_1 > C METHOD_1 ( C c , java.lang.String path , TYPE_2 VAR_1 , int line , java.lang.String message ) { c . path = path ; VAR_2 = VAR_1 ; c . line = ( line != 0 ) ? line : null ; c . message = message ; if ( line != 0 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_4 = line ; VAR_5 = 1 ; VAR_6 = line ; VAR_7 = INT_1 ; VAR_8 = VAR_3 ; } return c ; } 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class , VAR_2 ) ; bind ( VAR_3 class ) ; bind ( VAR_5 class ) . METHOD_3 ( this ) ; bind ( VAR_6 class ) . METHOD_3 ( config . METHOD_4 ( ) ) ; install ( new TYPE_1 ( ) . METHOD_5 ( VAR_7 . Factory class ) ) ; } 
protected void METHOD_1 ( ) { rpc ( VAR_2 class ) ; rpc ( VAR_3 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; install ( new TYPE_3 ( ) ) ; install ( new TYPE_4 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 rsrc ) { TYPE_2 user = ( ( TYPE_2 ) ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; try { VAR_1 . METHOD_4 ( change , user . METHOD_5 ( ) , rsrc . METHOD_6 ( ) , message . getMessage ( ) , VAR_2 , db . get ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_3 . METHOD_7 ( STRING_1 , e ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 r = VAR_2 . get ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_1 > > ( ) { } . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( name ( STRING_1 ) ) . getChangeId ( ) ; java.util.Map < java.lang.String , TYPE_1 > VAR_1 = METHOD_3 ( changeId ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { boolean VAR_1 = ( VAR_2 . METHOD_2 ( VAR_3 class ) ) == null ; boolean VAR_4 = ( ( VAR_2 . METHOD_2 ( VAR_5 class ) ) == null ) && ( ( VAR_2 . METHOD_3 ( ) . METHOD_2 ( VAR_5 class ) ) == null ) ; METHOD_4 ( VAR_2 , VAR_1 , VAR_4 ) ; base . METHOD_1 ( ) ; METHOD_5 ( ) ; } 
private void METHOD_1 ( TYPE_1 ctx , java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSet > patchSets ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ; if ( METHOD_2 ( ) ) { VAR_1 = VAR_2 . get ( ) ; VAR_1 . METHOD_3 ( ctx ) ; return ; } if ( c . currentPatchSetId ( ) . equals ( psId ) ) { c . METHOD_4 ( METHOD_5 ( ctx , patchSets ) ) ; } } 
public TYPE_1 get ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 , TYPE_2 VAR_5 ) throws TYPE_5 { TYPE_6 VAR_6 = VAR_7 . get ( ) ; return new TYPE_1 ( METHOD_1 ( VAR_1 ) , VAR_4 , VAR_2 , VAR_1 , VAR_3 , new TYPE_7 ( METHOD_1 ( VAR_1 ) , VAR_6 , VAR_1 ) , VAR_5 , VAR_6 . METHOD_2 ( ) ) ; } 
private void METHOD_1 ( final TYPE_1 . Change change , final TYPE_2 . Id psId , final TYPE_3 . Id VAR_1 , final TYPE_4 . Id VAR_2 , final TYPE_1 . ReviewDb db ) throws TYPE_6 . OrmException { final TYPE_1 . PatchSetApproval VAR_4 = new TYPE_1 . PatchSetApproval ( new TYPE_7 . Key ( psId , VAR_1 , VAR_2 ) , ( ( short ) ( 0 ) ) ) ; VAR_4 . METHOD_2 ( change ) ; db . METHOD_3 ( ) . insert ( java.util.Collections.singleton ( VAR_4 ) ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String name ) { if ( name . METHOD_2 ( STRING_1 ) ) { name = name . METHOD_3 ( 0 , name . METHOD_4 ( CHAR_1 ) ) ; } int VAR_2 = name . METHOD_4 ( CHAR_1 ) ; return 0 < VAR_2 ? name . METHOD_3 ( 0 , VAR_2 ) : name ; } 
private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { com.google.gerrit.reviewdb.client.Account.Id id = METHOD_2 ( ) . METHOD_4 ( ) . getAccountId ( ) ; return id . equals ( getChange ( ) . METHOD_5 ( ) ) ; } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo in = new TYPE_1 . ChangeInfo ( ) ; in . branch = VAR_1 ; VAR_2 = STRING_1 ; in . project = project . get ( ) ; TYPE_1 . ChangeInfo info = VAR_3 . changes ( ) . create ( in ) . get ( ) ; com.google.common.truth.Truth.assertThat ( info . project ) . isEqualTo ( in . project ) ; com.google.common.truth.Truth.assertThat ( info . branch ) . isEqualTo ( in . branch ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( VAR_2 ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { } protected void METHOD_4 ( ) { TYPE_4 . METHOD_5 ( VAR_2 , true ) ; } } ) ; } 
protected TYPE_1 . Result METHOD_1 ( TYPE_2 git , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , git , VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . to ( STRING_1 ) ; } 
private TYPE_1 METHOD_1 ( final TYPE_2 cm ) { return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_2 ( ) . METHOD_3 ( ) ) { cm . METHOD_2 ( ) . METHOD_4 ( STRING_1 ) ; } else { METHOD_5 ( ) . METHOD_6 ( cm , VAR_1 ) . run ( ) ; } } } ; } 
private boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_2 ; } else { final java.lang.StringBuilder msg = new java.lang.StringBuilder ( ) ; msg . append ( STRING_1 ) ; msg . append ( STRING_2 ) ; if ( VAR_2 ) { msg . append ( STRING_3 ) ; } else { msg . append ( STRING_4 ) ; msg . append ( STRING_5 ) ; } msg . append ( STRING_6 ) ; return VAR_1 . METHOD_3 ( true , msg . toString ( ) , name ) ; } } 
public org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 ) { return getRevision ( ) ; } else if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { return null ; } try ( org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_3 ( METHOD_4 ( ) ) ) { TYPE_2 ref = repo . METHOD_5 ( ) . METHOD_6 ( getRefName ( ) ) ; return ref != null ? ref . METHOD_7 ( ) : null ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 . getAccountId ( ) , 1 ) ; TYPE_2 update = METHOD_3 ( c , VAR_1 ) ; update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) ; update . commit ( ) ; org.junit.Assert.assertEquals ( STRING_3 , update . getRefName ( ) ) ; METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; java.lang.String id = VAR_4 . METHOD_5 ( VAR_1 ) ; if ( id != null ) { VAR_3 . METHOD_4 ( STRING_2 , id ) ; } METHOD_6 ( VAR_1 ) ; VAR_3 . close ( VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 event = new TYPE_1 ( VAR_1 ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey p : VAR_2 . METHOD_2 ( ) ) { long size = VAR_3 . get ( p ) ; if ( size > 0 ) { event . METHOD_3 ( size , p . get ( ) ) ; } } return event ; } 
public static void METHOD_1 ( java.lang.String project , int id , java.lang.String commit , java.lang.String base , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 VAR_2 = TYPE_3 . create ( ) ; VAR_2 . METHOD_2 ( base ) ; TYPE_4 . METHOD_3 ( project , id , commit , STRING_1 ) . METHOD_4 ( VAR_2 , VAR_1 ) ; } 
private static java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 req ) { java.util.Set < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.String [ ] values = req . METHOD_3 ( STRING_1 ) ; if ( values != null ) { java.util.Collections . METHOD_4 ( VAR_1 , values ) ; } values = req . METHOD_3 ( STRING_2 ) ; if ( values != null ) { java.util.Collections . METHOD_4 ( VAR_1 , values ) ; } return VAR_1 ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.ObjectId [ ] VAR_1 , long [ ] VAR_2 , boolean [ ] VAR_3 ) { java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList ( VAR_1 . length ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_4 . add ( new TYPE_1 ( VAR_1 [ i ] . name ( ) , VAR_2 [ i ] , VAR_3 [ i ] ) ) ; } return VAR_4 ; } 
public static boolean METHOD_1 ( final TYPE_1 . Id VAR_1 , final TYPE_3 e ) { if ( e == null ) { return false ; } final java.util.Set < TYPE_5 . Id > VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; return TYPE_6 . METHOD_5 ( VAR_3 , e , VAR_4 , ( ( short ) ( 1 ) ) , true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 . getAccountId ( ) , 1 ) ; TYPE_2 update = METHOD_3 ( c , VAR_1 ) ; update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) ; update . commit ( ) ; com.google.common.truth.Truth.assertThat ( update . getRefName ( ) ) . isEqualTo ( STRING_3 ) ; METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) ; } 
public void run ( ) { try ( TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ) { java.lang.String line ; while ( ( line = VAR_1 . METHOD_1 ( ) ) != null ) { VAR_2 . error ( ( STRING_2 + line ) ) ; } } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_3 , e ) ; } } 
public void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { METHOD_3 ( ctx ) ; ctx . METHOD_4 ( new TYPE_4 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_5 ( ) , commit , METHOD_6 ( ) . METHOD_7 ( ) , VAR_1 ) ) ; } 
public TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk VAR_1 , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) { return METHOD_1 ( db , VAR_1 , change , patchSet ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_2 . error ( STRING_1 , e ) ; return new TYPE_1 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ( ( VAR_3 ) + STRING_1 ) , VAR_1 , VAR_2 ) ; TYPE_1 input = new TYPE_1 ( ) ; input . ref = STRING_2 ; VAR_4 . METHOD_3 ( VAR_5 class ) ; VAR_4 . METHOD_4 ( STRING_3 ) ; METHOD_5 ( input . ref ) . create ( input ) ; } 
public void submit ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_1 ( ) ; VAR_2 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_2 ( ) . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ; VAR_2 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_2 ( ) . submit ( ) ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( id . name ( ) ) ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; } 
public java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > METHOD_1 ( ) throws TYPE_1 , com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.reviewdb.client.Project > VAR_1 = METHOD_2 ( ) ; final java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > VAR_2 = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Project p : VAR_1 ) { VAR_2 . add ( p . METHOD_3 ( ) ) ; } return VAR_2 ; } 
public TYPE_1 METHOD_1 ( ) { final TYPE_1 user = VAR_1 . METHOD_1 ( ) ; if ( ( user != null ) && ( user . METHOD_2 ( ) ) ) { TYPE_2 VAR_2 = VAR_3 . create ( ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) ) ; VAR_2 . METHOD_3 ( user . METHOD_4 ( ) ) ; return VAR_2 ; } return user ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( true ) ; VAR_2 . METHOD_5 ( id . get ( ) ) ; VAR_2 . METHOD_6 ( id . get ( ) ) ; TYPE_2 . METHOD_7 ( ) ; METHOD_8 ( ) ; } 
private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_3 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) ; } VAR_2 . METHOD_1 ( ) ; VAR_4 . METHOD_6 ( ) . METHOD_7 ( VAR_5 ) ; VAR_5 = null ; } 
private static void codemirror ( final java.lang.String token , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , final TYPE_1 . Key id , final TYPE_2 VAR_2 , final int line , final boolean edit ) { TYPE_3 . METHOD_2 ( new TYPE_4 ( token ) { public void onSuccess ( ) { TYPE_5 . display ( token , ( edit ? new TYPE_6 ( id , line ) : new TYPE_7 ( VAR_1 , id . getParentKey ( ) , id . get ( ) , VAR_2 , line ) ) ) ; } } ) ; } 
private java.util.Map < java.lang.String , java.util.List < TYPE_1 > > METHOD_1 ( TYPE_2 config ) { java.util.Map < java.lang.String , java.util.List < TYPE_1 > > result = TYPE_3 . METHOD_2 ( ) ; java.util.Set < java.lang.String > VAR_2 = config . METHOD_3 ( VAR_3 , true ) ; for ( java.lang.String key : VAR_2 ) { if ( key . METHOD_4 ( STRING_1 ) ) { java.lang.String VAR_4 = config . METHOD_5 ( VAR_3 , null , key ) ; result . put ( key , METHOD_6 ( VAR_4 ) ) ; } } return result ; } 
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) throws java.io.IOException , TYPE_2 { final org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { throw new TYPE_2 ( STRING_1 ) ; } METHOD_3 ( VAR_2 ) ; if ( ! VAR_1 ) { METHOD_4 ( VAR_2 ) ; } } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { VAR_1 . METHOD_2 ( ) ; try { TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > n = TYPE_2 . METHOD_3 ( VAR_2 . get ( VAR_3 ) ) ; n . METHOD_1 ( name ) ; VAR_2 . put ( VAR_3 , java.util.Collections . METHOD_5 ( n ) ) ; } catch ( TYPE_3 e ) { VAR_4 . METHOD_6 ( STRING_1 , e ) ; } finally { VAR_1 . METHOD_7 ( ) ; } METHOD_8 ( name ) ; } 
public void METHOD_1 ( org.eclipse.jgit.lib.Repository db , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { VAR_1 = db . METHOD_2 ( ) ; try { revision = ( id != null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { VAR_1 . close ( ) ; VAR_1 = null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 ) . to ( VAR_5 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_6 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_5 ( VAR_11 ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { TYPE_3 get = TYPE_3 . METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ; if ( VAR_2 != null ) { get . METHOD_3 ( VAR_2 ) ; } return METHOD_4 ( get ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_7 ( ) , new TYPE_8 ( repo . METHOD_2 ( ) ) , new TYPE_9 ( ) ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 r , TYPE_2 VAR_1 , TYPE_2 d ) { VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 . isEmpty ( ) ) && ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) { VAR_2 = TYPE_3 . METHOD_2 ( d ) ; } return r ; } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = rw . parseCommit ( id ) ; rw . METHOD_3 ( c ) ; return c ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet ps ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db . get ( ) , project , ps . getId ( ) . getParentKey ( ) ) ; return VAR_2 . METHOD_3 ( cd , ps ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . METHOD_2 ( id ) ; index . METHOD_3 ( VAR_1 . get ( id ) ) ; VAR_2 . METHOD_4 ( ( STRING_1 + VAR_3 ) ) ; VAR_4 . METHOD_5 ( ) ; } catch ( java.lang.Exception e ) { VAR_5 . METHOD_5 ( ) ; throw e ; } return null ; } 
protected void METHOD_1 ( ) throws java.io.IOException { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = VAR_2 . TRUE ; TYPE_2 r = VAR_3 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_4 ) ; r . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( VAR_2 ) ; if ( type == ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_6 ( ) ; } else { new TYPE_2 ( STRING_1 , type , VAR_1 ) . METHOD_1 ( ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( ) ; METHOD_7 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 . METHOD_8 ( ) ; METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) ; assertThat ( VAR_5 ) . METHOD_9 ( STRING_1 , VAR_2 ) . METHOD_10 ( VAR_3 , VAR_6 , VAR_7 , VAR_8 , VAR_4 ) . METHOD_11 ( VAR_9 , VAR_10 ) ; } 
private void METHOD_1 ( int VAR_1 , TYPE_1 . ChangeInfo c ) { TYPE_2 VAR_2 = VAR_3 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( ( ( int ) ( VAR_4 ) ) ) . isEqualTo ( ( - 1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_2 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . name ) . isEqualTo ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . value ) . isEqualTo ( VAR_1 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; org.junit.Assert . METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; org.junit.Assert . METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_2 ) ) ) ; org.junit.Assert . METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_3 ) ) ) ; org.junit.Assert.assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ; } 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 VAR_2 , TYPE_4 < TYPE_1 > VAR_3 ) { TYPE_5 < TYPE_1 > VAR_4 = METHOD_1 ( name , VAR_1 , VAR_2 ) ; METHOD_2 ( VAR_4 , ( ) - > { VAR_4 . set ( VAR_3 . get ( ) ) ; } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; VAR_1 = VAR_2 ; METHOD_2 ( user ) ; try { project ( ) . METHOD_3 ( input ) ; METHOD_4 ( STRING_1 ) ; } catch ( TYPE_2 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( VAR_2 ) ) ; } METHOD_2 ( admin ) ; METHOD_7 ( VAR_2 ) ; } 
private void walk ( final org.eclipse.jgit.revwalk.RevWalk rw , final TYPE_1 VAR_1 , final org.eclipse.jgit.revwalk.RevCommit VAR_2 , final java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_3 ) throws java.io.IOException , TYPE_2 , TYPE_3 { rw . METHOD_1 ( VAR_1 ) ; for ( org.eclipse.jgit.revwalk.RevCommit VAR_4 : VAR_3 ) { try { rw . METHOD_2 ( VAR_4 ) ; } catch ( java.io.IOException e ) { } } rw . METHOD_3 ( VAR_2 ) ; while ( ( rw . METHOD_4 ( ) ) != null ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; com.google.gerrit.reviewdb.client.PatchSet.Id psId = r . METHOD_3 ( ) ; com.google.gerrit.reviewdb.client.Change . Id id = psId . getParentKey ( ) ; TYPE_2 VAR_1 = METHOD_4 ( id , psId , user . getId ( ) , TYPE_3 . METHOD_5 ( ) , STRING_1 ) ; METHOD_4 ( id , psId , null , VAR_1 . METHOD_6 ( ) , STRING_2 ) ; VAR_2 . METHOD_7 ( id ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 account = VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_3 < TYPE_4 > VAR_3 = account . METHOD_3 ( ) ; for ( TYPE_4 VAR_4 : VAR_3 ) { java.lang.String key = VAR_4 . key ( ) . get ( ) ; if ( key . METHOD_5 ( TYPE_5 ) ) { return new TYPE_1 ( key . METHOD_6 ( TYPE_5 . length ( ) ) ) ; } } return null ; } 
private void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 event = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_6 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_7 . log , e ) ; } } } 
public TYPE_1 < TYPE_2 . NameKey , com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_3 < TYPE_2 . NameKey , com.google.gerrit.server.query.change.ChangeData > VAR_1 = TYPE_4 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd ) ; } return VAR_1 ; } 
private long METHOD_1 ( TYPE_1 p ) { long VAR_1 = cfg . METHOD_2 ( STRING_1 , STRING_2 , 0 ) ; long VAR_2 = p . METHOD_3 ( ) ; if ( ( VAR_1 > 0 ) && ( VAR_2 > 0 ) ) { return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; } return TYPE_2 . METHOD_5 ( VAR_1 , VAR_2 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 < ? > VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) throws TYPE_3 { TYPE_4 VAR_4 = VAR_1 . git ( ) . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( new TYPE_5 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_2 ) ) ) ; TYPE_6 < TYPE_1 > r = VAR_4 . METHOD_5 ( ) ; return TYPE_7 . METHOD_6 ( r ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_3 ( true ) ; try { TYPE_2 . ChangeInfo info = METHOD_4 ( METHOD_5 ( VAR_3 ) ) ; java.lang.String message = VAR_4 . get ( VAR_5 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_6 , admin . METHOD_6 ( ) . METHOD_7 ( ) ) ) ; } finally { METHOD_3 ( false ) ; } } 
public static void METHOD_1 ( final com.google.gerrit.reviewdb.client.Change c ) { long VAR_1 = c . METHOD_2 ( ) . METHOD_3 ( ) ; int id = c . getId ( ) . get ( ) ; c . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_1 , id ) ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { if ( ( VAR_1 ) != null ) { try { VAR_1 . METHOD_2 ( ) . METHOD_3 ( project ) . run ( ) ; } catch ( java.lang.Exception e ) { VAR_2 . error ( STRING_1 , e ) ; return false ; } } return true ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_3 ( STRING_1 ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , null ) ; r = METHOD_3 ( STRING_2 ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , null ) ; } 
public void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , java.io.IOException { METHOD_2 ( ) ; METHOD_3 ( ctx ) ; VAR_1 = VAR_2 . get ( ctx . METHOD_4 ( ) , commit , psId ) ; ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , METHOD_7 ( ) . METHOD_8 ( ) , VAR_3 ) ) ; } 
void METHOD_1 ( java.lang.String project , java.lang.String ref , TYPE_1 VAR_1 , TYPE_2 status , TYPE_3 . Status VAR_2 ) { TYPE_4 event = new TYPE_4 ( project , ref , TYPE_5 . METHOD_2 ( VAR_1 ) , status , VAR_2 ) ; METHOD_3 ( project , ref , event ) ; } 
private void METHOD_1 ( final int row ) { METHOD_2 ( row ) ; table . METHOD_3 ( row , 0 , TYPE_1 . METHOD_4 ( ) ) ; table . METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_1 ) ; METHOD_7 ( row , 0 , STRING_1 ) ; } 
private void METHOD_1 ( ) throws TYPE_1 , com.google.gwtorm.server.OrmException { METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_1 = VAR_2 ; switch ( VAR_3 . METHOD_4 ( ) ) { case VAR_4 : METHOD_5 ( ) ; break ; case VAR_5 : case VAR_6 : case VAR_7 : default : METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; break ; } } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 . METHOD_2 ( ) ) { throw new com.google.gwtorm.server.OrmException ( VAR_2 ) ; } if ( isEmpty ( ) ) { return ; } try ( TYPE_1 VAR_3 = VAR_4 . METHOD_3 ( VAR_5 ) ) { METHOD_4 ( ) ; METHOD_1 ( VAR_6 ) ; METHOD_1 ( VAR_7 ) ; } finally { close ( ) ; } } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . values ( ) ) { VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . getId ( ) ) ; } return VAR_1 ; } 
protected void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_5 class ) . to ( VAR_6 class ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String projectName = METHOD_2 ( VAR_1 ) . get ( ) ; java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . project = projectName ; VAR_2 . add ( VAR_3 ) ; VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_5 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { try ( TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_3 ( ) ) { VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , new TYPE_4 ( ( ( TYPE_5 . METHOD_5 ( ) ) - ( TYPE_6 . METHOD_6 ( VAR_1 , VAR_7 ) ) ) ) ) ) ; } } 
protected void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException , TYPE_3 { rsp . METHOD_2 ( STRING_1 ) ; rsp . METHOD_3 ( STRING_2 ) ; try ( TYPE_4 out = rsp . METHOD_4 ( ) ) { out . METHOD_5 ( STRING_3 ) ; out . METHOD_5 ( STRING_4 ) ; out . METHOD_5 ( STRING_5 ) ; out . METHOD_5 ( STRING_6 ) ; out . METHOD_5 ( STRING_7 ) ; } } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { org.junit.Assert . METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) ; org.junit.Assert . METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) ; org.junit.Assert . METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) ; org.junit.Assert . METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( change , ps ) ) . isEqualTo ( VAR_1 ) ; try { VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( change ) . get ( ) , VAR_4 , VAR_5 ) ; org.junit.Assert . METHOD_5 ( ) ; } catch ( TYPE_1 e ) { com.google.common.truth.Truth.assertThat ( e . getMessage ( ) ) . isEqualTo ( STRING_1 ) ; } } 
protected void METHOD_1 ( ) { try { for ( TYPE_1 w : VAR_1 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { super . add ( VAR_2 , w . getAccountId ( ) ) ; } } catch ( TYPE_2 . OrmException err ) { } } 
public static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 in = TYPE_3 . METHOD_2 ( ) ; new TYPE_5 ( STRING_1 ) . id ( VAR_1 ) . METHOD_4 ( ) . data ( in ) . put ( VAR_2 ) ; } 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( final org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { TYPE_1 VAR_1 = repo . METHOD_2 ( ) ; try { org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ; VAR_1 . METHOD_3 ( ) ; return id ; } finally { VAR_1 . close ( ) ; } } 
public void onSuccess ( TYPE_1 info ) { VAR_1 = info . METHOD_1 ( ) ; java.lang.String VAR_2 = info . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( ! ( STRING_1 . equals ( VAR_2 ) ) ) ) { p . insert ( new TYPE_2 ( VAR_2 ) , 0 ) ; } } 
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . METHOD_4 ( ) , null ) ; return ( VAR_1 != null ) && ( VAR_3 . METHOD_5 ( ) . equals ( VAR_1 . getProject ( ) . METHOD_5 ( ) ) ) ; } 
protected void METHOD_1 ( ) { com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_1 class ) . to ( VAR_2 class ) ; bind ( VAR_3 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_4 ) ) . METHOD_4 ( new TYPE_2 ( STRING_1 , null , VAR_5 , null , false , ( STRING_2 + STRING_3 ) ) ) ; } 
public java.lang.String toString ( ) { java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; b . append ( STRING_1 ) ; if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { b . append ( ( ( STRING_2 + ( VAR_1 . METHOD_2 ( ) . get ( ) ) ) + STRING_3 ) ) ; } return b . toString ( ) ; } 
protected java.lang.String METHOD_1 ( ) { if ( ( ( change ) != null ) && ( ( METHOD_2 ( ) ) != null ) ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( METHOD_2 ( ) ) ; r . append ( change . getChangeId ( ) ) ; return r . toString ( ) ; } return null ; } 
private void METHOD_1 ( java.lang.String url , TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 r = VAR_2 . get ( url ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; TYPE_3 . METHOD_3 ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_4 class ) ) ; } 
private void add ( TYPE_1 . ReviewDb db , java.util.List < TYPE_2 > VAR_1 , TYPE_3 VAR_2 ) { try { VAR_1 . add ( new TYPE_2 ( VAR_2 . getKey ( ) , VAR_2 ) ) ; } catch ( TYPE_5 e ) { throw e ; } catch ( TYPE_6 e ) { METHOD_2 ( db , VAR_2 ) ; } } 
private TYPE_1 METHOD_1 ( ) { switch ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { case VAR_2 : return TYPE_3 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 , false ) ; case VAR_4 : return TYPE_5 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 , false ) ; default : throw new TYPE_6 ( STRING_1 ) ; } } 
public static void query ( java.lang.String query , java.util.Set < TYPE_1 > VAR_3 , TYPE_2 < TYPE_3 > VAR_4 , int VAR_1 , int VAR_2 ) { TYPE_4 VAR_5 = TYPE_3 . METHOD_2 ( query ) ; if ( VAR_2 > 0 ) { VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) ; } TYPE_3 . METHOD_4 ( VAR_5 , VAR_3 ) ; if ( VAR_1 != 0 ) { VAR_5 . METHOD_3 ( STRING_2 , VAR_1 ) ; } VAR_5 . get ( VAR_4 ) ; } 
private boolean METHOD_1 ( ) { try ( org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ) { TYPE_1 ref = git . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; if ( ( ref == null ) || ( ( ref . METHOD_6 ( ) ) == null ) ) { return true ; } return ! ( ref . METHOD_6 ( ) . equals ( config . getRevision ( ) ) ) ; } catch ( java.io.IOException VAR_3 ) { return true ; } } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_2 { TYPE_3 < TYPE_1 > view = TYPE_4 . METHOD_2 ( ) ; TYPE_5 res = new TYPE_5 ( ) ; METHOD_3 ( VAR_1 , view , res ) ; org.junit.Assert . METHOD_4 ( ( STRING_1 + ( res . getStatus ( ) ) ) , ( ( ( res . getStatus ( ) ) < INT_1 ) || ( ( res . getStatus ( ) ) >= INT_2 ) ) ) ; return view . get ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; org.junit.Assert . METHOD_2 ( b , b . METHOD_3 ( ) ) ; org.junit.Assert . METHOD_2 ( b , b . append ( STRING_1 ) ) ; org.junit.Assert . METHOD_2 ( b , b . METHOD_4 ( ) ) ; org.junit.Assert.assertEquals ( STRING_2 , b . METHOD_5 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( ) { TYPE_1 p = new TYPE_1 ( ) ; VAR_1 = VAR_2 ; VAR_3 = true ; VAR_4 = true ; VAR_5 = VAR_6 ; VAR_9 = VAR_10 ; VAR_11 = null ; VAR_12 = VAR_13 ; VAR_14 = VAR_15 ; VAR_16 = VAR_17 ; VAR_18 = false ; VAR_19 = true ; VAR_20 = false ; VAR_21 = VAR_22 ; VAR_23 = true ; VAR_24 = false ; VAR_25 = true ; VAR_26 = false ; VAR_27 = VAR_28 ; return p ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) ; VAR_2 = TYPE_3 . METHOD_4 ( ) ; if ( TYPE_4 . info ( ) . auth ( ) . METHOD_8 ( ) ) { VAR_3 . METHOD_7 ( VAR_2 ) ; VAR_1 . add ( TYPE_2 . METHOD_8 ( ) , VAR_2 ) ; } VAR_4 = TYPE_3 . METHOD_4 ( ) ; VAR_3 . METHOD_7 ( VAR_4 ) ; VAR_1 . METHOD_9 ( TYPE_2 . METHOD_10 ( ) , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_2 u = util . user ( VAR_3 ) ; org.junit.Assert . METHOD_5 ( STRING_2 , u . METHOD_6 ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) throws TYPE_3 { try { return new TYPE_4 ( args . rw , VAR_2 , VAR_3 ) . METHOD_1 ( VAR_1 ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.Account VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } for ( TYPE_2 . ReceiveCommand cmd : VAR_1 . METHOD_4 ( ) ) { if ( ( cmd . METHOD_5 ( ) ) == ( VAR_4 ) ) { METHOD_1 ( project , cmd , util . METHOD_6 ( VAR_2 ) ) ; } } } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( change.getId ( ) ) ; org.eclipse.jgit.lib.ObjectId VAR_3 = VAR_1 . METHOD_3 ( repo , VAR_2 ) ; if ( VAR_3 != null ) { VAR_1 . add ( new TYPE_3 . ReceiveCommand ( VAR_3 , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , VAR_2 ) ) ; } } 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 rsrc ) throws com.google.gwtorm.server.OrmException { return VAR_2 . get ( ) . changes ( ) . METHOD_2 ( rsrc . getChange ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change . getStatus ( ) ) == ( VAR_3 ) ) { change . METHOD_3 ( VAR_4 ) ; TYPE_3 . METHOD_4 ( change ) ; } return change ; } } ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ; TYPE_7 rsp = new TYPE_7 ( req , ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ; if ( METHOD_3 ( req , rsp ) ) { VAR_3 . METHOD_1 ( req , rsp ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo VAR_1 = new TYPE_1 . ChangeInfo ( ) ; VAR_1 . project = project . get ( ) ; VAR_1 . branch = STRING_1 ; TYPE_2 r = VAR_2 . METHOD_2 ( STRING_2 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_3 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_5 ( ) ) . contains ( STRING_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , admin , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( admin ) . METHOD_6 ( VAR_9 , VAR_10 ) . to ( VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . get ( ) . changes ( ) . get ( changeId ) ; if ( c == null ) { throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; } return VAR_1 . create ( db . get ( ) , c ) ; } 
private java.util.List < com.google.gerrit.reviewdb.client.Change > METHOD_1 ( ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_1 . METHOD_2 ( ) ) { return db . changes ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_2 . METHOD_5 ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ; return java.util.Collections . METHOD_6 ( ) ; } } 
public void run ( ) { try { TYPE_1 cm = VAR_1 . create ( change . getProject ( ) , change.getId ( ) ) ; cm . METHOD_1 ( change . METHOD_2 ( ) ) ; cm . METHOD_3 ( patchSet , VAR_2 ) ; cm . METHOD_4 ( VAR_3 ) ; cm . METHOD_5 ( reviewers ) ; cm . METHOD_6 ( VAR_4 ) ; cm . METHOD_7 ( ) ; } catch ( java.lang.Exception e ) { VAR_5 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } 
public synchronized void METHOD_1 ( java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException , TYPE_1 { VAR_4 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( STRING_1 , VAR_2 , STRING_2 , VAR_2 ) ; VAR_4 . METHOD_3 ( STRING_1 , VAR_2 , STRING_3 , VAR_3 ) ; VAR_4 . METHOD_4 ( ) ; } 
private java.util.List < ? > METHOD_1 ( ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ) { return TYPE_1 . METHOD_3 ( METHOD_4 ( ) , new TYPE_2 ( TYPE_2 . METHOD_5 ( ) ) , rw , VAR_1 ) ; } } 
public TYPE_1 apply ( TYPE_2 VAR_1 ) { if ( ( format ) == ( VAR_2 ) ) { TYPE_6 VAR_3 = new TYPE_6 ( ) ; display ( VAR_3 ) ; return TYPE_7 . create ( VAR_3 . METHOD_1 ( ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) ; } return apply ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.reviewdb.client.Change > changes = METHOD_2 ( id . METHOD_3 ( ) ) ; if ( ( changes . size ( ) ) != 1 ) { throw new TYPE_4 ( id ) ; } TYPE_6 VAR_2 ; try { VAR_2 = VAR_3 . METHOD_4 ( changes . get ( 0 ) , user . get ( ) ) ; } catch ( TYPE_7 e ) { throw new TYPE_4 ( id ) ; } return new TYPE_1 ( VAR_2 ) ; } 
public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( ) { final java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = new TYPE_1 ( ( ( reviewers . size ( ) ) + ( VAR_2 . size ( ) ) ) ) ; VAR_1 . METHOD_2 ( reviewers ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return java.util.Collections . METHOD_3 ( VAR_1 ) ; } 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 ) ; db . changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ; TYPE_2 u = VAR_2 . create ( VAR_3 . METHOD_3 ( c , VAR_4 . create ( VAR_1 ) ) ) ; u . METHOD_6 ( c . METHOD_7 ( ) . get ( ) ) ; u . commit ( ) ; return c ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; TYPE_2 info = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_3 class ) ; TYPE_3 . METHOD_5 ( admin , info ) ; com.google.gerrit.reviewdb.client.Account account = METHOD_6 ( admin . getId ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_5 ) . isEqualTo ( account . METHOD_7 ( ) ) ; } 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; if ( ( view ) != null ) { view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; } } } 
public TYPE_1 to ( java.lang.String ref ) throws java.io.IOException , TYPE_2 { TYPE_3 . add ( git , VAR_1 , VAR_2 ) ; changeId = TYPE_3 . METHOD_1 ( git , admin . METHOD_2 ( ) , VAR_4 ) ; return TYPE_3 . METHOD_3 ( git , ref ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . info ( ( STRING_1 + VAR_1 ) ) ; } else if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) { METHOD_5 ( VAR_1 ) ; VAR_2 . info ( ( STRING_2 + VAR_1 ) ) ; } else { VAR_2 . METHOD_6 ( java.lang.String.format ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) ) ; } } 
public void METHOD_1 ( ) { install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) ; install ( new TYPE_2 ( ) ) ; factory ( VAR_5 . Factory class ) ; } 
public int METHOD_1 ( TYPE_1 key , TYPE_2 value ) { int size = ( ( ( ( ( ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) + INT_3 ) + INT_1 ) + ( INT_5 * INT_3 ) ) + ( INT_5 * INT_2 ) ) + INT_6 ; for ( TYPE_3 e : value . METHOD_2 ( ) ) { size += e . METHOD_1 ( ) ; } return size ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_2 = new TYPE_4 ( ) ; TYPE_1 VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( this ) ; VAR_2 . METHOD_4 ( ) ; db = VAR_3 . METHOD_5 ( ) ; VAR_4 . create ( db ) ; VAR_5 = VAR_6 . METHOD_6 ( TYPE_5 . METHOD_7 ( STRING_1 ) ) . getAccountId ( ) ; user = VAR_7 . create ( VAR_5 ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getRefName ( ) ) ) { return METHOD_4 ( VAR_1 . commit ) ; } return java.util.Collections . METHOD_5 ( ) ; } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw ) throws java.io.IOException , TYPE_1 { java.util.Set < TYPE_2 > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_2 , repo ) ) ; VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_3 , repo ) ) ; return TYPE_4 . METHOD_1 ( rw , repo , STRING_1 , VAR_1 ) ; } 
void display ( final TYPE_1 result ) { project = result . project ; VAR_1 . METHOD_1 ( project . METHOD_2 ( ) ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_6 , VAR_7 ) ; METHOD_3 ( VAR_8 , VAR_9 ) ; METHOD_4 ( project . METHOD_5 ( ) ) ; METHOD_6 ( project . METHOD_7 ( ) ) ; VAR_10 . METHOD_8 ( false ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final boolean VAR_3 = VAR_1 . METHOD_2 ( ) . VAR_3 ; if ( ( VAR_1 . METHOD_4 ( ) ) == ( VAR_4 ) ) { final java.lang.String url = METHOD_5 ( ) ; METHOD_6 ( VAR_2 , url , VAR_3 , false ) ; } if ( ( VAR_1 . METHOD_7 ( ) ) == ( VAR_4 ) ) { final java.lang.String url = METHOD_8 ( ) ; METHOD_6 ( VAR_2 , url , VAR_3 , true ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String err , java.lang.Exception e ) { if ( VAR_1 ) { if ( e == null ) { VAR_2 . error ( err ) ; } else { VAR_2 . error ( err , e ) ; } return TYPE_2 . METHOD_2 ( ) ; } return TYPE_2 . METHOD_3 ( err ) ; } 
protected static TYPE_1 METHOD_1 ( TYPE_2 res , java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( TYPE_3 . create ( res ) . METHOD_2 ( ) , true , VAR_2 ) ; if ( VAR_1 != null ) { VAR_3 . METHOD_3 ( VAR_1 ) ; } return VAR_3 ; } 
private static java.lang.String METHOD_1 ( final long VAR_1 , final long VAR_2 ) { if ( ( VAR_1 - VAR_2 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) { return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert . METHOD_4 ( VAR_1 , n ) ; org.junit.Assert.assertEquals ( ( ( ( ( STRING_5 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_7 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 p , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; VAR_7 = VAR_1 ; VAR_8 = VAR_9 . METHOD_2 ( ) ; VAR_10 = ++ ( VAR_11 ) ; VAR_12 . METHOD_3 ( VAR_2 ) ; return p ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , boolean edit ) { TYPE_1 VAR_5 = METHOD_2 ( VAR_1 ) ; VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) ; VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) ; } 
public int run ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) , new TYPE_4 ( ) , new TYPE_5 ( ) ) ; VAR_1 . METHOD_5 ( VAR_6 class ) . METHOD_6 ( ) ; return METHOD_7 ( ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client . PatchSetApproval a = METHOD_3 ( VAR_1 ) ; org.junit.Assert . METHOD_4 ( a . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( 1 , a . getValue ( ) ) ; org.junit.Assert.assertEquals ( admin . id , a . getAccountId ( ) ) ; } 
public void METHOD_1 ( ) { final java.lang.String name = STRING_1 ; final java.lang.String value = STRING_2 ; final TYPE_1 < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( name , value ) ; org.junit.Assert . METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) ; org.junit.Assert . METHOD_3 ( value , VAR_1 . getValue ( ) ) ; org.junit.Assert.assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) ; } 
void add ( ) { java.util.List < java.lang.String > values = new java.util.ArrayList < > ( ) ; for ( TYPE_1 input : VAR_1 ) { java.lang.String VAR_2 = input . getValue ( ) . METHOD_1 ( ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { input . METHOD_2 ( STRING_1 ) ; values . add ( VAR_2 ) ; } } insert ( values ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId VAR_1 = repo ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; METHOD_5 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; METHOD_7 ( VAR_3 , project , STRING_6 ) ; TYPE_1 . Result r = METHOD_5 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ; r . METHOD_8 ( ) ; r . METHOD_9 ( VAR_4 , null , admin ) ; r . METHOD_10 ( TYPE_2 . getMessage ( ) ) ; } 
void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , true ) ; TYPE_1 . METHOD_2 ( VAR_2 , false ) ; TYPE_1 . METHOD_2 ( error , false ) ; VAR_3 . METHOD_2 ( false ) ; VAR_4 . METHOD_3 ( true ) ; if ( ( VAR_5 ) != null ) { VAR_4 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_5 ) ) ; VAR_4 . METHOD_6 ( ) ; } } 
public boolean equals ( TYPE_1 VAR_1 ) { if ( ( VAR_1 == null ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; if ( ( ! ( this . VAR_3 . equals ( VAR_4 ) ) ) || ( ! ( this . VAR_5 . equals ( VAR_6 ) ) ) ) { return false ; } return true ; } 
private java.util.Set < org.eclipse.jgit.revwalk.RevCommit > METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , TYPE_1 < TYPE_2 > refs ) throws java.io.IOException , TYPE_3 { java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_1 = TYPE_4 . METHOD_2 ( ) ; for ( TYPE_2 r : refs ) { try { VAR_1 . add ( rw . parseCommit ( r . METHOD_3 ( ) ) ) ; } catch ( TYPE_5 VAR_2 ) { } } return VAR_1 ; } 
private com.google.gerrit.server.query.change.ChangeData METHOD_1 ( ) { if ( ( cd ) == null ) { com.google.gerrit.reviewdb.server.ReviewDb VAR_1 = db ( ) ; TYPE_1 . METHOD_2 ( ( VAR_1 != null ) , STRING_1 ) ; cd = VAR_2 . create ( VAR_1 , notes ) ; } return cd ; } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } return new TYPE_3 ( METHOD_1 ( ) ) . equals ( new TYPE_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; METHOD_3 ( project , STRING_1 , VAR_1 , false , VAR_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( r , STRING_2 ) ; METHOD_6 ( r ) . METHOD_7 ( STRING_2 ) ; METHOD_8 ( r , STRING_3 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { if ( VAR_1 . isEmpty ( ) ) { return true ; } java.lang.String projectName = name . get ( ) ; for ( java.lang.String VAR_2 : VAR_1 ) { if ( METHOD_2 ( projectName , VAR_2 ) ) { return true ; } } return false ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws TYPE_2 , java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ) { throw new TYPE_2 ( ) ; } } } 
protected boolean METHOD_1 ( ) { if ( ( VAR_1 . length ( ) ) == 0 ) { return false ; } if ( VAR_2 . isEmpty ( ) ) { return false ; } if ( ( ( VAR_2 . size ( ) ) == 1 ) && ( VAR_2 . contains ( VAR_3 ) ) ) { return false ; } return true ; } 
public void update ( ) throws TYPE_1 { try { schema = VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( VAR_2 , rw , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } finally { if ( ( schema ) != null ) { schema . close ( ) ; schema = null ; } } } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change . Key ( STRING_1 ) , new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , new com.google.gerrit.reviewdb.client.Account.Id ( 2 ) , new TYPE_2 . NameKey ( VAR_2 , STRING_2 ) , TYPE_3 . METHOD_2 ( ) ) ; VAR_1 . set ( VAR_4 , util . user ( VAR_5 ) . METHOD_3 ( change ) ) ; } 
public void display ( final java.util.List < com.google.gerrit.reviewdb.client . AccountGroup > result ) { while ( 1 < ( table . METHOD_1 ( ) ) ) table . METHOD_2 ( ( ( table . METHOD_1 ( ) ) - 1 ) ) ; for ( com.google.gerrit.reviewdb.client . AccountGroup group : result ) { final int row = table . METHOD_1 ( ) ; table . METHOD_3 ( row ) ; METHOD_4 ( row ) ; METHOD_5 ( row , group ) ; } } 
private < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_3 VAR_1 , java.lang.String VAR_2 , TYPE_4 < TYPE_1 > VAR_3 ) { TYPE_5 < TYPE_1 > VAR_4 = new TYPE_5 ( VAR_5 , VAR_3 ) ; try { if ( ! ( VAR_5 ) ) { TYPE_6 . METHOD_2 ( ) ; } TYPE_7 req = METHOD_3 ( VAR_1 ) ; req . METHOD_4 ( STRING_1 , VAR_6 ) ; req . METHOD_5 ( VAR_2 , VAR_4 ) ; } catch ( TYPE_8 e ) { VAR_4 . METHOD_6 ( null , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( ) ) { VAR_1 . add ( label . getName ( ) ) ; } org.junit.Assert.assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; org.junit.Assert . METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( TYPE_2 . of ( query ( TYPE_1 . METHOD_6 ( in . METHOD_7 ( 0 ) , in . METHOD_7 ( 2 ) ) ) , in . METHOD_7 ( 1 ) ) , out . METHOD_8 ( ) ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_1 d = new TYPE_1 ( ) ; VAR_1 = c . getId ( ) . get ( ) ; d . id = c . getKey ( ) . toString ( ) ; d . revision = ps . getRevision ( ) . get ( ) ; d . ref = ps . getRefName ( ) ; return d ; } 
protected byte [ ] METHOD_1 ( TYPE_1 VAR_1 ) { final long VAR_2 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 b = new TYPE_3 ( ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( b , VAR_1 ) ; final byte [ ] key = b . METHOD_5 ( ) ; return TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_6 ( VAR_2 , key ) ) . METHOD_5 ( ) ; } 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String revision ) throws TYPE_1 , java.io.IOException { if ( revision == null ) { return null ; } org.eclipse.jgit.lib.ObjectId VAR_1 = repo . METHOD_2 ( revision ) ; if ( VAR_1 == null ) { throw new TYPE_1 ( ) ; } return VAR_1 ; } 
private com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ; TYPE_1 notes = VAR_2 . create ( db , c ) . METHOD_2 ( ) ; return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_2 VAR_4 = util . user ( VAR_1 , VAR_5 ) ; TYPE_2 VAR_6 = util . user ( VAR_1 , VAR_5 , VAR_3 ) ; org.junit.Assert . METHOD_3 ( STRING_2 , VAR_4 . METHOD_4 ( ) ) ; org.junit.Assert . METHOD_5 ( STRING_3 , VAR_6 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; java.util.List < TYPE_1 . ChangeInfo > VAR_1 = query ( STRING_1 ) ; org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) ; VAR_1 = query ( STRING_2 ) ; org.junit.Assert . METHOD_3 ( VAR_1 . isEmpty ( ) ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 update , com.google.gerrit.reviewdb.client.PatchSet ps , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { ps . METHOD_1 ( VAR_1 ) ; update . METHOD_1 ( VAR_1 ) ; db . patchSets ( ) . update ( java.util.Collections.singleton ( ps ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.ObjectId id = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( cd . METHOD_3 ( ) . getRevision ( ) . get ( ) ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( cd . change ( ) . getProject ( ) ) ; org.eclipse.jgit.revwalk.RevWalk rw = TYPE_1 . METHOD_5 ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( id ) ; return ( commit . METHOD_6 ( ) ) > 1 ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( final java.lang.String name , final java.lang.String value ) throws TYPE_3 { TYPE_4 VAR_1 = VAR_2 . get ( name ) ; if ( VAR_1 == null ) { throw TYPE_5 . error ( ( ( ( STRING_1 + name ) + STRING_2 ) + value ) ) ; } return VAR_1 . create ( this , value ) ; } 
protected void METHOD_1 ( java.lang.String changeId , int psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ; TYPE_1 VAR_1 = VAR_2 . create ( db , c . getProject ( ) , c . getId ( ) ) ; com.google.gerrit.reviewdb.client . PatchSetApproval VAR_4 = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; commit . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( commit . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; if ( VAR_2 ) { METHOD_6 ( ) ; } else { java.lang.String VAR_3 = TYPE_1 . METHOD_7 ( ) ; if ( ( VAR_3 != null ) && ( VAR_3 . METHOD_8 ( STRING_1 ) ) ) { METHOD_9 ( VAR_3 . METHOD_10 ( INT_1 ) ) ; } } METHOD_11 ( ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) { try ( org.eclipse.jgit.lib.Repository repo = METHOD_2 ( ) ) { return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ; VAR_1 . error ( msg , e ) ; return false ; } } 
public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , project , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( server , user ) ; TYPE_2 VAR_2 = new TYPE_2 ( server , user ) ; TYPE_3 . METHOD_2 ( user ) ; VAR_2 . METHOD_3 ( ) ; METHOD_4 ( TYPE_3 . METHOD_5 ( project , VAR_2 ) ) ; VAR_2 . close ( ) ; VAR_3 = VAR_4 . METHOD_7 ( ) ; VAR_5 = new TYPE_1 ( server , VAR_3 ) ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String message ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; METHOD_3 ( res , VAR_2 ) ; METHOD_4 ( res ) ; TYPE_3 out = res . METHOD_5 ( ) ; out . METHOD_6 ( message ) ; out . close ( ) ; } 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( new TYPE_3 ( ) { public void run ( ) { boolean s = VAR_1 . METHOD_2 ( ) ; view . METHOD_4 ( VAR_2 ) . METHOD_5 ( STRING_1 , s ) ; view . METHOD_4 ( VAR_3 ) . METHOD_5 ( STRING_1 , s ) ; } } ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) ; p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) ; db = new TYPE_2 < TYPE_3 > ( new TYPE_4 ( p ) , VAR_3 class ) ; VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 account ) throws TYPE_3 , TYPE_4 { try { return VAR_1 . get ( ) . METHOD_2 ( ) . apply ( account ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_5 | java.io.IOException e ) { throw new TYPE_4 ( e ) ; } } 
public void METHOD_1 ( TYPE_1 event ) { for ( TYPE_2 p : VAR_1 . METHOD_2 ( ) ) { TYPE_3 VAR_2 = new TYPE_3 ( p . METHOD_3 ( ) , p . getKey ( ) , 0 , null , null ) ; TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) . toString ( ) , p . METHOD_3 ( ) , null ) ; } } 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_7 ( repo . METHOD_2 ( ) ) , new TYPE_6 ( ) , new TYPE_8 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 r = VAR_1 . delete ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_5 ( ) ) . isEqualTo ( VAR_2 ) ; r . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( ) . getChangeId ( ) ; java.util.Map < java.lang.String , TYPE_1 > VAR_1 = METHOD_3 ( changeId ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 info = METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_3 ( VAR_3 class ) ; VAR_2 . METHOD_4 ( STRING_2 ) ; project ( ) . METHOD_5 ( info . id ) . get ( true ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 user ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) != null ) { throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; } try { if ( ( change ) != null ) { VAR_1 = VAR_2 . METHOD_3 ( change , user ) ; } else { VAR_1 = VAR_2 . METHOD_3 ( project , VAR_3 , user ) ; } } catch ( TYPE_4 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_1 ; } 
public void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String name , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String [ ] VAR_5 ) { this . VAR_6 = TYPE_1 . METHOD_2 ( name ) . METHOD_3 ( ) ; this . VAR_2 = VAR_2 ; this . VAR_4 = VAR_4 ; } 
protected void METHOD_1 ( final int row , final boolean VAR_1 ) { super . METHOD_1 ( row , VAR_1 ) ; if ( ( ! ( VAR_2 ) ) || ( STRING_1 . equals ( VAR_3 . METHOD_2 ( ) ) ) ) { VAR_3 . METHOD_3 ( METHOD_4 ( row ) . name ( ) ) ; } } 
private boolean METHOD_1 ( ) { if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) { return ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ; } return false ; } 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { this . VAR_1 = walk . METHOD_2 ( ) ; try { revision = ( id != null ) ? walk . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { VAR_1 = null ; } } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { try ( org.eclipse.jgit.lib.Repository repo = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) { if ( VAR_2 != null ) { TYPE_3 u = repo . METHOD_3 ( VAR_3 ) ; u . METHOD_4 ( VAR_2 ) ; } } catch ( java.io.IOException e ) { VAR_4 . error ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) , VAR_2 ) , e ) ; } } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_3 VAR_3 = METHOD_2 ( VAR_1 ) ; final TYPE_3 VAR_4 = TYPE_4 . METHOD_3 ( VAR_2 ) ; assert VAR_4 != null ; final TYPE_3 VAR_5 = TYPE_5 . METHOD_4 ( VAR_3 ) ; VAR_5 . METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( VAR_1 , VAR_4 ) ; TYPE_5 . METHOD_7 ( VAR_5 , VAR_4 ) ; } 
public java.lang.String METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) ; } return TYPE_1 . METHOD_2 ( cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 . Key VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { VAR_5 = VAR_1 ; VAR_6 = VAR_2 ; VAR_7 = METHOD_2 ( VAR_3 ) ; VAR_8 . METHOD_3 ( ) ; VAR_9 = METHOD_4 ( ) ; VAR_8 . add ( VAR_9 ) ; VAR_8 . add ( METHOD_5 ( ) ) ; VAR_10 . METHOD_3 ( ) ; VAR_11 = METHOD_4 ( ) ; VAR_10 . add ( VAR_11 ) ; VAR_10 . add ( METHOD_5 ( ) ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 account , java.util.List < java.lang.String > add , java.util.List < java.lang.String > delete ) throws TYPE_3 , TYPE_4 { TYPE_5 in = new TYPE_5 ( ) ; in . add = add ; in . delete = delete ; try { return VAR_1 . get ( ) . apply ( account , in ) ; } catch ( TYPE_6 | com.google.gwtorm.server.OrmException | java.io.IOException | TYPE_7 e ) { throw new TYPE_4 ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = repo . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_2 = repo . METHOD_3 ( repo . file ( STRING_2 , VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( METHOD_4 ( VAR_1 ) ) . isEqualTo ( VAR_3 ) ; com.google.common.truth.Truth.assertThat ( METHOD_4 ( VAR_2 ) ) . isEqualTo ( VAR_3 ) ; } 
protected TYPE_1 < ? > . VAR_1 METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId VAR_2 = repo ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; TYPE_1 < ? > . VAR_1 b = VAR_3 . METHOD_5 ( STRING_1 ) ; TYPE_2 < java.lang.String > id = TYPE_3 . getChangeId ( VAR_3 , VAR_2 ) ; if ( id . METHOD_6 ( ) ) { b . METHOD_7 ( id . get ( ) . METHOD_8 ( 1 ) ) ; } else { b . METHOD_7 ( ) ; } return b ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String key , java.util.List < java.lang.String > values ) { if ( ! ( values . isEmpty ( ) ) ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; for ( java.lang.String VAR_3 : values ) { VAR_2 . add ( new TYPE_3 ( VAR_3 ) ) ; } VAR_1 . add ( key , VAR_2 ) ; } } 
public boolean METHOD_1 ( ) { return ( ( ( ( ( user ) instanceof TYPE_1 ) || ( VAR_1 . METHOD_7 ( group . METHOD_3 ( ) ) ) ) || ( user . METHOD_5 ( ) . METHOD_6 ( ) ) ) || ( METHOD_4 ( ) ) ) || ( user . METHOD_2 ( group . METHOD_3 ( ) ) ) ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 . METHOD_2 ( ) ) { return ; } if ( ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ) != null ) { if ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) || ( ! ( VAR_3 . get ( ) . METHOD_6 ( ) ) ) ) { VAR_1 . METHOD_7 ( new TYPE_2 ( ) ) ; } } } 
private static java.lang.String url ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet.Id ps , TYPE_1 info ) { return TYPE_2 . METHOD_1 ( project , null , ps , info . path ( ) , ( ( info . METHOD_2 ( ) ) == ( VAR_1 ) ? VAR_2 : VAR_3 ) , info . line ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = METHOD_2 ( ) ; TYPE_1 update = METHOD_3 ( c , VAR_1 ) ; update . METHOD_4 ( VAR_1 . METHOD_5 ( ) . getId ( ) , VAR_2 ) ; update . commit ( ) ; TYPE_2 notes = METHOD_6 ( c ) ; com.google.common.truth.Truth.assertThat ( notes . METHOD_7 ( ) ) . isEmpty ( ) ; } 
private boolean METHOD_1 ( ) { java.lang.String msg = VAR_1 . getValue ( ) . METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { return ( msg . length ( ) ) > 0 ; } return ! ( msg . equals ( ( ( VAR_2 . message ( ) ) != null ? VAR_2 . message ( ) . METHOD_2 ( ) : STRING_1 ) ) ) ; } 
private java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.util.Set < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > result = new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ) ; for ( java.lang.String email : VAR_1 ) { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( db , email ) ; result . METHOD_3 ( VAR_2 ) ; } return result ; } 
private static void METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id ps ) { java.lang.String token = TYPE_1 . METHOD_2 ( ps ) ; new TYPE_2 ( token ) { public void onSuccess ( ) { TYPE_3 . display ( token , METHOD_3 ( ) ) ; } private TYPE_4 METHOD_3 ( ) { return new TYPE_5 ( ps ) ; } } . onSuccess ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 cm = METHOD_2 ( VAR_1 ) ; final TYPE_2 VAR_2 = METHOD_2 ( VAR_3 ) ; VAR_4 = new TYPE_4 ( ) { protected void METHOD_3 ( ) { install ( VAR_5 ) ; install ( cm ) ; install ( VAR_2 ) ; } } ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String n = VAR_1 . getName ( ) ; return ( ( ( n . METHOD_2 ( STRING_1 ) ) || ( n . METHOD_2 ( STRING_2 ) ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( n . contains ( STRING_3 ) ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account a ) { if ( ( a == null ) || ( ( a . getId ( ) ) == null ) ) { return null ; } TYPE_1 VAR_1 = new TYPE_1 ( a . getId ( ) . get ( ) ) ; VAR_1 . email = a . METHOD_2 ( ) ; VAR_1 . name = a . METHOD_3 ( ) ; VAR_2 = a . METHOD_4 ( ) ; return VAR_1 ; } 
private void METHOD_1 ( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) { java.lang.String VAR_4 = METHOD_2 ( VAR_2 , VAR_3 , line ) ; VAR_1 . append ( STRING_1 ) . append ( line ) . append ( STRING_2 ) . append ( VAR_4 ) . append ( STRING_4 ) ; } 
public boolean METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . equals ( VAR_2 . METHOD_2 ( ) ) ; return ! ( ( VAR_1 || ( ( ( VAR_3 ) == ( VAR_4 ) ) && ( 0 >= ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) ) ) || ( ( ( VAR_3 ) == ( VAR_5 ) ) && ( 0 >= ( VAR_2 . METHOD_4 ( ) . size ( ) ) ) ) ) ; } 
private boolean METHOD_1 ( ) { if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) { return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; } return METHOD_4 ( ) . METHOD_9 ( ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_2 = VAR_3 . get ( change . getProject ( ) ) ; if ( VAR_2 == null ) { return false ; } TYPE_4 VAR_4 = VAR_2 . METHOD_2 ( user ) ; return VAR_4 . METHOD_2 ( change ) . METHOD_4 ( db ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . email ( ) ) != null ) { return VAR_1 . email ( ) ; } else if ( ( VAR_1 . name ( ) ) != null ) { return VAR_1 . name ( ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) != 0 ) { return STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; } else { return STRING_1 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 p = VAR_2 . projects ( ) . create ( VAR_1 ) . get ( ) ; com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_2 ) ; } 
public void METHOD_1 ( java.lang.String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; VAR_2 . METHOD_4 ( rsrc ) ; VAR_2 . apply ( account , new TYPE_4 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { return rw . parseCommit ( repo . METHOD_2 ( name ) . METHOD_3 ( ) ) ; } finally { rw . close ( ) ; } } finally { repo . close ( ) ; } } 
public java.lang.String get ( ) { java.lang.String VAR_1 = super . get ( ) ; if ( VAR_1 != null ) { return VAR_1 ; } if ( ( VAR_2 ) != null ) { final TYPE_1 req ; try { req = VAR_2 . get ( ) ; } catch ( TYPE_2 VAR_3 ) { if ( ( VAR_3 . METHOD_1 ( ) ) instanceof TYPE_3 ) { return null ; } throw VAR_3 ; } return TYPE_4 . METHOD_2 ( req ) ; } return null ; } 
public TYPE_1 < ? , java.io.IOException > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_2 < com.google.gerrit.reviewdb.client.Change . Id > VAR_1 ) { java.util.List < TYPE_3 < ? > > VAR_2 = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change . Id id : VAR_1 ) { VAR_2 . add ( METHOD_1 ( project , id ) ) ; } return TYPE_4 . METHOD_2 ( VAR_2 ) ; } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , java.io.IOException { try { VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , VAR_2 ) ; } catch ( TYPE_7 | java.io.IOException e ) { throw new TYPE_5 ( e . getMessage ( ) ) ; } return TYPE_1 . METHOD_6 ( ) ; } 
protected TYPE_1 . Result METHOD_1 ( TYPE_2 git , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String topic ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , git , VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . to ( ( STRING_1 + topic ) ) ; } 
private static final TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { return new TYPE_1 ( TYPE_4 . METHOD_2 ( VAR_1 . get ( ) . METHOD_3 ( ) , VAR_1 . get ( ) . METHOD_4 ( ) ) , ( ( int ) ( ( VAR_1 . get ( ) . METHOD_4 ( ) ) * ( VAR_1 . get ( ) . METHOD_3 ( ) ) ) ) ) ; } 
public void name ( java.lang.String name ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . name = name ; try { VAR_1 . apply ( rsrc , in ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( name , e ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; if ( ! ( VAR_3 ) ) { modules.add ( new TYPE_3 ( ) ) ; } modules.add ( new TYPE_4 ( VAR_4 , VAR_1 . METHOD_2 ( VAR_5 class ) , VAR_1 . METHOD_2 ( VAR_6 class ) ) ) ; if ( ! ( VAR_4 ) ) { modules.add ( new TYPE_5 ( VAR_1 ) ) ; } return VAR_1 . METHOD_3 ( modules ) ; } 
private int METHOD_1 ( TYPE_1 cm , int line , int VAR_1 ) { for ( int i = 0 ; i < VAR_1 ; i ++ ) { cm . METHOD_2 ( ( line + i ) , VAR_2 , VAR_3 . diff ( ) ) ; } return line + VAR_1 ; } 
private java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; if ( ( VAR_4 ) == null ) { VAR_3 . add ( METHOD_2 ( VAR_2 , VAR_5 , VAR_6 ) ) ; } else { VAR_3 . METHOD_3 ( METHOD_4 ( VAR_4 , VAR_2 , VAR_5 ) ) ; } return VAR_3 ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( project , METHOD_3 ( ) , message . METHOD_4 ( ) , null , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) ; } 
protected TYPE_1 . Result METHOD_1 ( java.lang.String ref ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , VAR_3 ) ; TYPE_2 . Result result = VAR_1 . to ( ref ) ; result . METHOD_3 ( ) ; return result ; } 
private int METHOD_1 ( final TYPE_1 < TYPE_2 > i , int row , final int VAR_1 ) { while ( i . METHOD_2 ( ) ) { final TYPE_2 c = i . METHOD_3 ( ) ; METHOD_4 ( row ) ; METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) ) ; row ++ ; } return row ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try ( TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ) { VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; } catch ( java.io.IOException err ) { throw new TYPE_5 ( STRING_1 , err ) ; } } 
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId ( ) . toString ( ) ; try { if ( cd . change ( ) . getStatus ( ) . METHOD_1 ( ) ) { delete ( id , VAR_1 ) ; } else { delete ( id , VAR_2 ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.io.IOException ( e ) ; } } 
protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 class ) ; bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ; VAR_3 = METHOD_2 ( VAR_4 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ; VAR_5 = METHOD_2 ( VAR_6 class ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ; bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ; } 
public static void message ( java.lang.String project , int id , java.lang.String commit , java.lang.String message , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . METHOD_1 ( message ) ; TYPE_4 . METHOD_2 ( project , id , commit , STRING_1 ) . METHOD_3 ( input , VAR_1 ) ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws TYPE_2 , java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , repo , commit ) ) ) { throw new TYPE_2 ( ) ; } } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws TYPE_2 , com.google.gwtorm.server.OrmException { TYPE_1 notes = create ( db , project , changeId ) ; if ( ( notes . getChange ( ) ) == null ) { throw new TYPE_2 ( changeId ) ; } return notes ; } 
private int METHOD_1 ( final int VAR_1 ) throws TYPE_1 { int VAR_2 = VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) ; if ( VAR_2 <= 0 ) { throw new TYPE_1 ( STRING_1 ) ; } return ( 0 < VAR_1 ) && ( VAR_1 <= VAR_2 ) ? VAR_1 : VAR_2 ; } 
public void run ( ) { int line = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ; int res = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , 0 , 0 , 0 , line , false ) , METHOD_7 ( ) ) ; METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; org.junit.Assert . METHOD_2 ( b , b . METHOD_3 ( STRING_1 ) ) ; org.junit.Assert . METHOD_2 ( b , b . METHOD_4 ( INT_1 ) ) ; org.junit.Assert . METHOD_2 ( b , b . METHOD_5 ( INT_2 ) ) ; org.junit.Assert . METHOD_2 ( b , b . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( STRING_2 , b . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; final java.lang.String name = STRING_2 ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( user ) ; org.junit.Assert . METHOD_5 ( r ) ; org.junit.Assert.assertEquals ( name , r . name ) ; org.junit.Assert.assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 ref , TYPE_3 VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { return new TYPE_1 ( ref . getName ( ) , ( ( ref . METHOD_2 ( ) ) != null ? ref . METHOD_2 ( ) . name ( ) : null ) , ( ( ! ( VAR_2 . contains ( ref . getName ( ) ) ) ) && ( VAR_1 . METHOD_4 ( ) ) ) ) ; } 
public TYPE_1 < TYPE_2 > add ( TYPE_3 . Key < TYPE_2 > key , TYPE_4 < TYPE_2 > VAR_1 ) { TYPE_5 < TYPE_4 < TYPE_2 > > ref = new TYPE_5 ( VAR_1 ) ; VAR_2 . add ( ref ) ; return new TYPE_6 ( ref , key , VAR_1 ) ; } 
public static void METHOD_1 ( ) { VAR_1 = null ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 ) ; for ( final TYPE_2 VAR_4 : VAR_5 ) { VAR_4 . METHOD_3 ( ) ; } TYPE_3 . METHOD_4 ( ) ; if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_3 ( ) ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) != null ) ) { return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; } else { return TYPE_1 . METHOD_3 ( ) ; } } 
private static < TYPE_1 > void METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 < TYPE_1 > VAR_2 , TYPE_4 < TYPE_1 > b ) { TYPE_5 n = VAR_2 . METHOD_1 ( b . getKey ( ) , b . METHOD_2 ( ) ) ; if ( n != null ) { VAR_1 . add ( n ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : break ; default : TYPE_3 . METHOD_2 ( ( revision == null ) , STRING_1 , type ) ; break ; } this . VAR_3 = revision ; return this ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { if ( ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) { return ; } TYPE_1 [ ] VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 != null ) { for ( TYPE_1 d : VAR_2 ) { if ( d . METHOD_5 ( ) ) { TYPE_2 . METHOD_1 ( d ) ; } else { TYPE_2 . METHOD_6 ( d ) ; } } } TYPE_2 . METHOD_6 ( VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 ctx ) throws java.io.IOException { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ctx ) ; return ; } ctx . METHOD_2 ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( patchSet . getRevision ( ) . get ( ) ) , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , patchSet . getRefName ( ) ) ; } 
private void append ( final java.lang.StringBuilder VAR_1 , final TYPE_1 VAR_2 ) { VAR_1 . append ( VAR_2 . METHOD_2 ( ) ) ; VAR_1 . append ( CHAR_2 ) ; VAR_1 . append ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . append ( CHAR_2 ) ; VAR_1 . append ( VAR_2 . METHOD_4 ( ) ) ; VAR_1 . append ( CHAR_2 ) ; VAR_1 . append ( VAR_2 . METHOD_5 ( ) ) ; } 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { return VAR_1 . get ( ) . METHOD_1 ( s ) . format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } 
private void METHOD_1 ( final TYPE_1 m , final int VAR_1 ) { m . METHOD_2 ( ) ; m . METHOD_3 ( ) ; m . METHOD_4 ( VAR_2 ) ; m . METHOD_6 ( ) ; m . METHOD_3 ( ) ; m . METHOD_4 ( STRING_1 ) ; m . METHOD_7 ( STRING_2 , INT_1 ) ; m . append ( TYPE_2 . METHOD_8 ( VAR_1 ) ) ; m . METHOD_6 ( ) ; m . METHOD_9 ( ) ; } 
private TYPE_1 < com.google.gerrit.reviewdb.client.Account > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId commit ) throws java.io.IOException , TYPE_2 { rw . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; VAR_2 . METHOD_3 ( rw , commit ) ; return VAR_2 . METHOD_4 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; return TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) ) ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) throws java.io.IOException { METHOD_2 ( res , VAR_3 ) ; res . METHOD_3 ( VAR_4 ) ; TYPE_5 VAR_5 = res . METHOD_4 ( ) ; new TYPE_6 ( ) . METHOD_5 ( VAR_6 ) . METHOD_6 ( ) . METHOD_7 ( ) . create ( ) . METHOD_8 ( VAR_1 , VAR_2 , VAR_5 ) ; VAR_5 . METHOD_9 ( CHAR_1 ) ; VAR_5 . close ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert . METHOD_4 ( VAR_1 , n ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) + STRING_5 ) , n . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_3 , STRING_4 ) ) , TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_1 , STRING_5 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( STRING_6 , STRING_7 , STRING_4 , STRING_8 , STRING_9 , STRING_10 , STRING_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo VAR_1 = METHOD_2 ( VAR_2 ) ; TYPE_2 r = VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_4 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_6 ( ) ) . contains ( STRING_2 ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . METHOD_3 ( new TYPE_3 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_1 . METHOD_2 ( ) ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_4 ( ) { return VAR_4 . get ( ) ; } } ) ; try { return VAR_5 . METHOD_1 ( ) ; } finally { VAR_3 . METHOD_3 ( VAR_2 ) ; } } 
private void METHOD_1 ( final com.google.gerrit.reviewdb.client.Change change , final TYPE_2 event , final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { for ( TYPE_4 VAR_1 : VAR_2 . values ( ) ) { if ( METHOD_2 ( change , VAR_1 . user , db ) ) { VAR_3 . METHOD_3 ( event ) ; } } } 
public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = VAR_1 . getKey ( ) . getParentKey ( ) . get ( ) ; java.lang.String VAR_4 = VAR_2 . getKey ( ) . getParentKey ( ) . get ( ) ; return TYPE_2 . METHOD_2 ( ) . METHOD_1 ( VAR_3 , VAR_4 ) . METHOD_1 ( VAR_1 . METHOD_3 ( ) , VAR_2 . METHOD_3 ( ) ) . METHOD_1 ( VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) ) . result ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) ; METHOD_4 ( user ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Status status ) { switch ( status ) { case VAR_1 : case VAR_2 : return ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) ) ; case VAR_3 : default : return false ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , boolean edit ) { VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , VAR_2 , edit ) ) ; } 
public static TYPE_1 change ( java.lang.String project , int id ) { if ( project == null ) { return new TYPE_1 ( STRING_1 ) . id ( java.lang.String . METHOD_1 ( id ) ) ; } return new TYPE_1 ( STRING_1 ) . id ( project , id ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 git = METHOD_2 ( ) ; TYPE_2 . Result change = METHOD_3 ( git ) ; submit ( change . getChangeId ( ) ) ; METHOD_4 ( git , false ) ; com.google.common.truth.Truth.assertThat ( METHOD_7 ( ) . METHOD_6 ( 0 ) ) . isEqualTo ( change . METHOD_5 ( ) . METHOD_6 ( 0 ) ) ; } 
private java.util.List < java.lang.String > METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit c , boolean VAR_1 , TYPE_1 cfg ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( null , null , null , VAR_2 ) ; java.lang.String VAR_4 = TYPE_3 . METHOD_2 ( cfg ) ; java.util.List < TYPE_4 > m = VAR_3 . METHOD_3 ( c , rw , VAR_4 , VAR_1 ) ; return TYPE_5 . METHOD_4 ( m ) ; } 
private static void METHOD_1 ( final java.lang.StringBuilder r , final java.lang.String n , final java.lang.String VAR_1 ) { if ( ( r . length ( ) ) > 0 ) { r . append ( STRING_1 ) ; } r . append ( n ) ; r . append ( STRING_2 ) ; r . append ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; } 
protected void METHOD_1 ( TYPE_1 view ) { final java.lang.String token = view . METHOD_2 ( ) ; if ( ! ( token . equals ( TYPE_2 . METHOD_2 ( ) ) ) ) { TYPE_2 . METHOD_3 ( token , false ) ; TYPE_3 . METHOD_4 ( token ) ; } if ( view instanceof TYPE_4 ) { VAR_2 = token ; } super . METHOD_1 ( view ) ; view . METHOD_1 ( ) ; } 
private boolean METHOD_1 ( ) { if ( ui . METHOD_2 ( ) ) { return VAR_2 ; } else { final java.lang.StringBuilder msg = new java.lang.StringBuilder ( ) ; msg . append ( STRING_1 ) ; msg . append ( STRING_2 ) ; if ( VAR_2 ) { msg . append ( STRING_3 ) ; } else { msg . append ( STRING_4 ) ; msg . append ( STRING_5 ) ; } msg . append ( STRING_6 ) ; return ui . METHOD_3 ( true , msg . toString ( ) , name ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = TYPE_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; if ( ( VAR_2 == null ) && ( VAR_1 != null ) ) { VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; } return new TYPE_1 ( VAR_2 ) ; } 
public boolean apply ( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String name , TYPE_1 VAR_2 ) throws java.io.IOException , TYPE_2 { com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey ( project . getName ( ) ) ; try ( org.eclipse.jgit.lib.Repository db = VAR_2 . METHOD_1 ( p ) ; TYPE_3 git = new TYPE_3 ( db ) ) { git . METHOD_2 ( ) . METHOD_3 ( branch ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; } return true ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_2 . METHOD_4 ( new TYPE_3 < java.util.List < TYPE_4 . ChangeInfo > > ( ) { public void onSuccess ( final java.util.List < TYPE_4 . ChangeInfo > result ) { VAR_1 . display ( result ) ; table . METHOD_5 ( ) ; } } ) ; } 
private TYPE_1 user ( TYPE_2 . ProjectConfig VAR_1 , java.lang.String name , com.google.gerrit.reviewdb.client . AccountGroup ... VAR_2 ) { return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_4 , VAR_5 , VAR_6 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 , VAR_9 , ( ( edit ) != null ) ) ; VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) ) ; } 
public static boolean METHOD_1 ( final TYPE_1 id , final TYPE_2 < TYPE_3 > VAR_1 ) { if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) { return true ; } if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) { return true ; } for ( final TYPE_3 t : VAR_1 ) { if ( t . METHOD_4 ( id ) ) { return true ; } } return false ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String projectName ) throws java.io.IOException { java.lang.String n = projectName + ( VAR_2 ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( n ) . METHOD_4 ( ) , VAR_4 ) ; try ( org.eclipse.jgit.lib.Repository db = TYPE_3 . METHOD_5 ( VAR_3 , false ) ) { db . create ( true ) ; } } 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { VAR_2 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 . change ( ) . METHOD_3 ( ) ) ; try { VAR_3 = index . METHOD_4 ( VAR_2 , 0 , VAR_4 ) ; } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return METHOD_5 ( ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 cm , int line , final TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { VAR_1 . METHOD_2 ( false ) ; TYPE_1 VAR_3 = cm . METHOD_1 ( line , VAR_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_3 . METHOD_4 ( new TYPE_5 ( ) { public void run ( ) { VAR_1 . METHOD_2 ( true ) ; } } ) ; return VAR_3 ; } 
public org.eclipse.jgit.lib.Repository METHOD_1 ( java.lang.String name ) throws java.io.IOException { name = TYPE_1 . METHOD_2 ( VAR_1 , name ) ; if ( VAR_2 . METHOD_3 ( name ) ) { return VAR_2 . get ( name ) ; } org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ; VAR_2 . put ( name , repo ) ; return repo ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < TYPE_1 > result = new java.util.ArrayList < > ( ) ; if ( ( TYPE_2 . METHOD_2 ( VAR_1 ) ) != null ) { java.lang.String [ ] VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) ; for ( java.lang.String VAR_4 : VAR_3 ) { result . add ( TYPE_3 . METHOD_4 ( VAR_5 class , VAR_4 . METHOD_5 ( ) ) ) ; } } return result ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_3 = new TYPE_3 ( VAR_4 ) ; req = METHOD_2 ( VAR_5 class ) ; rsp = METHOD_2 ( VAR_6 . HttpServletResponse class ) ; TYPE_2 . METHOD_3 ( req . METHOD_7 ( ) ) . METHOD_5 ( TYPE_4 . toString ( ) ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; METHOD_2 ( STRING_2 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_3 ) ) ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) . toString ( ) ) . isEqualTo ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { com.google.gerrit.reviewdb.client.Change change = TYPE_3 . getChange ( VAR_1 ) ; com.google.gerrit.reviewdb.client.PatchSet ps = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_3 ) ) ; TYPE_5 VAR_4 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; try { return VAR_4 . get ( change . getProject ( ) , ps ) ; } catch ( TYPE_6 e ) { throw new TYPE_7 ( e . getMessage ( ) ) ; } } 
private org.eclipse.jgit.revwalk.RevCommit parseCommit ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { if ( id instanceof org.eclipse.jgit.revwalk.RevCommit ) { return ( ( org.eclipse.jgit.revwalk.RevCommit ) ( id ) ) ; } try ( org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = walk . parseCommit ( id ) ; walk . METHOD_1 ( commit ) ; return commit ; } } 
public void METHOD_1 ( final TYPE_1 event ) { b . METHOD_3 ( false ) ; new TYPE_2 ( patchSet . getId ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { VAR_1 . update ( result ) ; } public void METHOD_2 ( TYPE_5 VAR_2 ) { b . METHOD_3 ( true ) ; } } ) . METHOD_4 ( ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String path , final TYPE_3 VAR_1 , byte [ ] VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 ) { return TYPE_5 . METHOD_2 ( VAR_2 , VAR_1 ) . METHOD_3 ( VAR_3 . toString ( ) ) . METHOD_4 ( TYPE_5 . METHOD_5 ( path , VAR_4 ) ) ; } 
public TYPE_1 . Result METHOD_1 ( final TYPE_2 index ) { TYPE_3 VAR_1 = new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( 2 ) ; TYPE_6 VAR_3 = TYPE_6 . METHOD_3 ( ) ; java.util.List < com.google.gerrit.reviewdb.client.Account.Id > VAR_4 ; try { VAR_4 = METHOD_4 ( VAR_1 ) ; } catch ( java.io.IOException e ) { VAR_5 . error ( STRING_1 , e ) ; return new TYPE_7 . Result ( VAR_3 , false , 0 , 0 ) ; } return METHOD_5 ( index , VAR_4 , VAR_1 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) { try { org.eclipse.jgit.lib.Repository repo = METHOD_2 ( ) ; try { return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; } finally { repo . close ( ) ; } } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ; VAR_1 . error ( msg , e ) ; return false ; } } 
private java.lang.String METHOD_1 ( final java.lang.String token , final java.lang.String VAR_1 ) { if ( token . METHOD_2 ( STRING_1 ) ) { return TYPE_1 . METHOD_3 ( group . METHOD_4 ( ) , VAR_1 ) ; } return TYPE_1 . METHOD_3 ( group . METHOD_5 ( ) , VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( final TYPE_2 rsrc ) { if ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { return true ; } } ; } return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_1 = VAR_2 . create ( account ) ; return rsrc . METHOD_2 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; } } ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 p = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = new TYPE_2 ( p , VAR_2 ) ; org.junit.Assert . METHOD_2 ( p , c . getParentKey ( ) ) ; org.junit.Assert . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) != ( c . METHOD_4 ( ) ) ) ) ; } 
public TYPE_1 get ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) throws TYPE_5 { java.lang.String name = METHOD_1 ( VAR_1 ) ; return new TYPE_1 ( name , VAR_4 , VAR_3 . user , VAR_1 , VAR_2 , new TYPE_6 ( name ) , VAR_5 , METHOD_2 ( ) . METHOD_3 ( ) ) ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( ) ) { final TYPE_1 VAR_3 = VAR_4 . create ( VAR_2 , p . getAccountId ( ) ) ; if ( VAR_3 . METHOD_2 ( ) . contains ( VAR_5 ) ) { return true ; } } return false ; } 
private void set ( TYPE_1 info ) { VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( info . METHOD_3 ( ) ) ) ; if ( ( info . message ( ) ) != null ) { java.lang.String msg = info . message ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_1 ( msg ) ; message . METHOD_5 ( VAR_3 . apply ( new TYPE_3 ( ) . append ( msg ) . METHOD_6 ( ) ) ) ; } VAR_4 = info ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , METHOD_2 ( STRING_3 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; r . METHOD_4 ( ) ; } 
public static < TYPE_1 extends TYPE_2 . Key < ? > > boolean METHOD_1 ( final TYPE_1 a , final TYPE_1 b ) { if ( a == b ) { return true ; } if ( ( a == null ) || ( b == null ) ) { return false ; } return a . equals ( b ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 key , TYPE_3 args ) { if ( VAR_1 ) { try { return VAR_2 . get ( key , VAR_3 . create ( key , args ) ) ; } catch ( TYPE_4 | TYPE_5 e ) { VAR_4 . METHOD_2 ( ( STRING_1 + key ) , e ) ; return new TYPE_1 ( VAR_5 ) ; } } return new TYPE_1 ( VAR_6 ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; TYPE_1 . HttpServletResponse VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 . HttpServletResponse class ) ; servlet . METHOD_4 ( null , VAR_1 ) ; TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; METHOD_7 ( ) ; VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 . HttpServletResponse class ) ; servlet . METHOD_4 ( null , VAR_1 ) ; TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; METHOD_7 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( rw , VAR_1 ) ; java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , rw , VAR_1 ) ; java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_3 : VAR_1 ) { VAR_2 . add ( ( STRING_1 + VAR_3 ) ) ; } com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_2 ) ; } } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_3 ) ; java.lang.String VAR_4 = ( STRING_1 + ( VAR_5 ) ) + STRING_2 ; if ( VAR_2 > 0 ) { return ( TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_4 ( ( VAR_2 + 1 ) ) ) + VAR_4 ; } return VAR_4 ; } 
private TYPE_1 METHOD_1 ( final org.eclipse.jgit.lib.ObjectId VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 , TYPE_4 { if ( ( ( path ) == null ) || ( VAR_1 == null ) ) { return null ; } try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) { final TYPE_5 VAR_3 = rw . METHOD_2 ( VAR_1 ) ; return TYPE_1 . METHOD_3 ( VAR_2 , path , VAR_3 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_2 , res . getStatus ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 , res . METHOD_3 ( VAR_3 ) ) ; } 
private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; TYPE_3 < TYPE_4 > VAR_2 = java.util.Collections . METHOD_3 ( ) ; java.util.Set < TYPE_5 > VAR_3 = TYPE_6 . of ( ) ; return new TYPE_1 ( account , VAR_3 , VAR_2 ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , STRING_2 , INT_1 ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( VAR_1 ) ; VAR_4 . METHOD_9 ( STRING_1 , STRING_2 , INT_1 ) ; TYPE_1 . METHOD_10 ( VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; for ( TYPE_4 VAR_3 : VAR_4 . values ( ) ) { try { TYPE_5 . METHOD_4 ( new TYPE_6 ( VAR_3 . METHOD_5 ( ) ) . METHOD_6 ( ) , STRING_1 , VAR_3 ) ; } catch ( TYPE_7 e ) { throw new TYPE_8 ( e ) ; } VAR_1 . add ( VAR_3 ) ; } return VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ; } 
public TYPE_1 METHOD_1 ( final org.eclipse.jgit.lib.Repository repo , final TYPE_2 VAR_1 ) { TYPE_1 m ; if ( VAR_2 ) { m = TYPE_3 . METHOD_2 ( repo , true ) ; } else { m = TYPE_4 . METHOD_2 ( repo ) ; } m . METHOD_3 ( new TYPE_5 ( ) { protected TYPE_2 METHOD_4 ( ) { return VAR_1 ; } public void METHOD_5 ( ) { } public void METHOD_6 ( ) { } } ) ; return m ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_6 ( ) ; TYPE_2 . ChangeInfo info = METHOD_7 ( METHOD_8 ( VAR_1 ) ) ; java.lang.String message = VAR_2 . get ( VAR_3 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_9 ( ) . METHOD_10 ( ) ) ) ; } 
public void METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 ) throws java.io.IOException { METHOD_2 ( ( ) - > { log . METHOD_4 ( STRING_1 , VAR_2 , VAR_1 ) ; client ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; log . METHOD_4 ( STRING_2 , VAR_2 , VAR_1 ) ; return VAR_1 ; } ) ; } 
public java.lang.String apply ( TYPE_1 rsrc , TYPE_2 input ) { final java.lang.String VAR_1 = ( VAR_2 ) ? STRING_1 : STRING_2 ; return java.lang.String.format ( STRING_3 , VAR_1 , ( METHOD_1 ( input . message ) ? METHOD_2 ( user . get ( ) . METHOD_3 ( ) , STRING_4 ) : input . message ) , rsrc . getName ( ) ) ; } 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t instanceof TYPE_3 ) return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; if ( ! ( t instanceof TYPE_4 ) ) return false ; else return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; } 
public void METHOD_1 ( TYPE_1 rp ) throws TYPE_2 { VAR_1 = rp . METHOD_2 ( ) ; if ( ( VAR_1 ) == null ) { try { VAR_1 = rp . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; } catch ( TYPE_2 e ) { throw e ; } catch ( java.io.IOException e ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_6 ( e ) ; throw VAR_3 ; } } rp . METHOD_7 ( VAR_1 , rp . METHOD_8 ( ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 req , TYPE_3 . HttpServletResponse res , java.lang.String VAR_1 , java.util.Map < java.lang.String , ? > VAR_2 ) throws java.io.IOException { req . METHOD_2 ( VAR_3 , true ) ; return VAR_4 . METHOD_3 ( res , false , VAR_1 , METHOD_4 ( req , res , VAR_2 ) ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 . Factory class ) . to ( VAR_2 . Factory class ) ; bind ( new TYPE_1 < TYPE_2 < TYPE_3 > > ( ) { } ) . to ( VAR_3 class ) ; METHOD_3 ( ) . to ( VAR_6 class ) ; } 
private boolean METHOD_1 ( final TYPE_1 id ) { if ( id . METHOD_2 ( VAR_2 ) ) { return true ; } if ( id . METHOD_2 ( VAR_3 ) ) { return true ; } if ( id . METHOD_2 ( VAR_4 ) ) { return true ; } for ( final TYPE_2 p : VAR_5 ) { if ( p . METHOD_4 ( id ) ) { return true ; } } return false ; } 
public void METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { METHOD_2 ( VAR_2 ) ; TYPE_4 < TYPE_5 > VAR_3 = METHOD_3 ( VAR_2 ) ; if ( VAR_3 . METHOD_4 ( ) ) { throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_2 . getId ( ) ) ) ; } com.google.gerrit.reviewdb.client.PatchSet VAR_4 = METHOD_5 ( VAR_2 ) ; org.eclipse.jgit.lib.ObjectId VAR_5 = TYPE_6 . METHOD_6 ( VAR_4 ) ; METHOD_1 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , TYPE_7 . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_4 ( VAR_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_2 , VAR_4 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_6 , VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { for ( int i = 1 ; i < INT_1 ; i ++ ) { java.lang.String p = STRING_1 + i ; METHOD_2 ( p ) ; TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_2 ) + p ) ) ; } return null ; } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 VAR_1 = db . METHOD_2 ( ) ; final TYPE_2 VAR_2 = db . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_3 , VAR_4 ) ; assertEquals ( VAR_5 , VAR_6 ) ; assertEquals ( VAR_7 , VAR_8 ) ; assertEquals ( VAR_9 , VAR_10 ) ; assertEquals ( VAR_11 , VAR_12 ) ; } 
public synchronized < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( java.lang.String name , TYPE_3 VAR_1 , TYPE_4 < TYPE_1 > VAR_2 ) { TYPE_5 . METHOD_2 ( name , VAR_1 ) ; TYPE_6 < TYPE_1 > m = new TYPE_6 ( this , name , VAR_1 , VAR_2 ) ; METHOD_3 ( name , VAR_1 ) ; VAR_3 . put ( name , m ) ; return m . METHOD_4 ( ) ; } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return false ; return ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) && ( METHOD_2 ( ) . equals ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) . METHOD_2 ( ) ) ) ; } 
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ; METHOD_3 ( VAR_2 ) ; if ( ! VAR_1 ) { METHOD_4 ( project . METHOD_2 ( ) , VAR_2 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) ; TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ; org.junit.Assert . METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = insert ( repo , METHOD_4 ( repo , commit ) ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 , change ) ; } 
private int METHOD_1 ( final int VAR_1 ) { for ( final TYPE_1 s : VAR_2 ) { if ( VAR_1 <= ( VAR_4 ) ) { ( VAR_4 ) ++ ; } if ( VAR_1 < ( VAR_5 ) ) { ( VAR_5 ) ++ ; } } return table . METHOD_1 ( VAR_1 ) ; } 
private void METHOD_1 ( final TYPE_1 ctl , final com.google.gerrit.reviewdb.client.PatchSet patchSet , final TYPE_2 VAR_2 ) throws java.lang.Exception { if ( ! ( VAR_3 . isEmpty ( ) ) ) { VAR_4 . get ( ) . apply ( new TYPE_3 ( new TYPE_4 ( ctl ) , patchSet ) , VAR_2 ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 user ) throws TYPE_3 { java.lang.String project = VAR_2 . getProject ( ) . getName ( ) ; java.lang.String VAR_3 = ( TYPE_4 . METHOD_2 ( user . METHOD_3 ( ) ) ) ? STRING_1 : user . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_2 , VAR_1 , VAR_3 , project ) ) ; throw new TYPE_3 ( VAR_1 , project ) ; } 
public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , project , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String , TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_1 c : db . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . getAccountId ( ) ) ) { VAR_1 . put ( c . getKey ( ) . get ( ) , c ) ; } return VAR_1 ; } 
protected TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { if ( ( ( change ) != null ) && ( VAR_1 ) ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( change ) ; if ( ! ( TYPE_2 . METHOD_3 ( VAR_2 , new TYPE_3 ( repo ) , getChangeId ( ) , VAR_3 ) ) ) { return METHOD_4 ( repo ) ; } } return super . METHOD_1 ( repo ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.String > VAR_1 = new TYPE_1 < > ( ) ; java.lang.String VAR_2 = STRING_1 ; VAR_1 . put ( STRING_2 , VAR_2 ) ; java.lang.String query = VAR_3 . METHOD_2 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( query ) . contains ( java.lang.String.format ( STRING_3 , VAR_2 ) ) ; } 
public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , TYPE_1 [ ] VAR_1 , TYPE_2 < org.eclipse.jgit.lib.Repository > repo , org.eclipse.jgit.revwalk.RevCommit ... VAR_2 ) throws java.lang.Exception { final TYPE_3 VAR_3 = repo . METHOD_2 ( VAR_1 ) ; org.eclipse.jgit.revwalk.RevCommit c = ( VAR_2 == null ) ? repo . commit ( VAR_3 ) : repo . commit ( VAR_3 , VAR_2 ) ; repo . METHOD_3 ( c ) ; return rw . parseCommit ( c ) ; } 
private void METHOD_1 ( TYPE_1 < TYPE_2 . NameKey > VAR_1 ) { METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = VAR_3 . get ( ) ; try { VAR_2 . METHOD_1 ( VAR_1 , VAR_4 , VAR_5 ) ; METHOD_2 ( STRING_2 ) ; } catch ( TYPE_4 e ) { METHOD_3 ( ( STRING_3 + STRING_4 ) , e ) ; } } 
public void METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) { if ( ( VAR_2 ) != null ) { for ( final TYPE_2 p : VAR_2 ) { p . METHOD_2 ( VAR_1 ) ; if ( p . METHOD_3 ( ) ) { p . METHOD_1 ( ) ; } } } } 
protected void METHOD_1 ( ) { if ( METHOD_2 ( VAR_1 ) ) { TYPE_1 . info ( STRING_1 ) ; bind ( VAR_2 class ) . to ( VAR_3 class ) . in ( VAR_4 ) ; install ( new TYPE_4 ( VAR_1 , VAR_6 ) ) ; } } 
private static boolean METHOD_1 ( TYPE_1 type ) { TYPE_1 t = type . METHOD_2 ( ) ; while ( ! ( VAR_1 class . getName ( ) . equals ( t . METHOD_3 ( ) ) ) ) { if ( ( TYPE_2 . METHOD_4 ( t ) . length ) > 0 ) { return true ; } t = type . METHOD_2 ( ) ; } return false ; } 
public TYPE_1 METHOD_1 ( ) { if ( ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) { return new TYPE_1 ( ( ( STRING_1 + ( VAR_3 . getName ( ) ) ) + STRING_2 ) ) ; } return VAR_4 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( true ) ; METHOD_3 ( ) ; TYPE_1 . Result r = METHOD_4 ( ) ; revision ( r ) . METHOD_5 ( TYPE_2 . reject ( ) ) ; r = METHOD_7 ( r . getChangeId ( ) ) ; METHOD_6 ( r , ( - 2 ) ) ; } 
private void METHOD_1 ( TYPE_1 . Result r ) throws java.lang.Exception { revision ( r ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; revision ( r ) . submit ( ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( project ) ) { com.google.common.truth.Truth.assertThat ( repo . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) . isEqualTo ( r . METHOD_7 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) ) ) ; org.junit.Assert.assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_5 ) + STRING_6 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) + ( VAR_1 ) ) ) ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { if ( TYPE_4 . METHOD_2 ( getRefName ( ) , VAR_4 . METHOD_3 ( ) ) ) { VAR_3 . add ( VAR_4 ) ; } } return VAR_3 ; } 
public static int METHOD_1 ( ) { int VAR_1 = VAR_3 . METHOD_2 ( ) ; if ( VAR_2 . METHOD_3 ( ) ) { VAR_1 += VAR_2 . METHOD_2 ( ) ; } if ( VAR_4 . METHOD_3 ( ) ) { VAR_1 += VAR_4 . METHOD_2 ( ) ; } if ( VAR_5 . METHOD_3 ( ) ) { VAR_1 += VAR_5 . METHOD_2 ( ) ; } return VAR_1 ; } 
private java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 set ) { final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( set . METHOD_2 ( ) ) ; java.util.Collections . METHOD_1 ( VAR_1 , new TYPE_3 < TYPE_1 > ( ) { public int METHOD_3 ( TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { return VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ; } } ) ; return VAR_1 ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < java.lang.String > c , TYPE_1 < java.lang.String > p ) { org.junit.Assert.assertEquals ( ( VAR_1 + STRING_1 ) , 1 , p . METHOD_2 ( ) ) ; org.junit.Assert . METHOD_3 ( ( VAR_1 + STRING_1 ) , c , p . METHOD_4 ( 0 ) ) ; } 
private TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return new TYPE_2 ( ) ; } switch ( VAR_2 ) { case VAR_4 : return ( VAR_5 ) != null ? VAR_5 : new TYPE_5 ( ) ; default : throw new TYPE_7 ( ( STRING_1 + ( VAR_2 ) ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ; try ( TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( VAR_3 class ) ) { com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_4 ( ) ; try ( TYPE_4 VAR_4 = VAR_1 . METHOD_3 ( VAR_3 class ) ) { com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( VAR_4 ) ; } } } 
public void METHOD_1 ( final java.lang.StringBuilder VAR_1 , final java.util.List < TYPE_2 > VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } if ( VAR_4 != null ) { VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } VAR_1 . append ( CHAR_3 ) ; } 
protected Project . NameKey METHOD_1 ( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 , boolean VAR_3 ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . name = name ( VAR_1 ) ; VAR_5 = ( VAR_2 != null ) ? VAR_2 . get ( ) : null ; VAR_6 = VAR_3 ; return METHOD_1 ( in ) ; } 
private void METHOD_1 ( java.lang.String changeId ) throws java.io.IOException { TYPE_1 r = VAR_1 . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_2 ( ) . label ( STRING_3 , 2 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; r . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 ) , VAR_2 ) ; org.junit.Assert.assertEquals ( STRING_3 , VAR_3 . toString ( ) ) ; final TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( STRING_4 ) , STRING_4 ) ; VAR_4 . METHOD_2 ( VAR_3 . toString ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_4 ) ; } 
public PatchSet . Id METHOD_1 ( ) throws TYPE_1 , com.google.gwtorm.server.OrmException , java.io.IOException { try { if ( VAR_1 == ( TYPE_2 . METHOD_3 ( ) ) ) { return METHOD_4 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_5 ( ) ; try { return METHOD_4 ( db ) ; } finally { db . close ( ) ; } } } finally { synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } } } 
protected void METHOD_1 ( java.lang.String changeId , int psId ) throws com.google.gwtorm.server.OrmException { TYPE_1 VAR_1 = VAR_2 . create ( db , TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ; com.google.gerrit.reviewdb.client . PatchSetApproval VAR_4 = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) ; } 
private TYPE_1 . ChangeInfo getChange ( TYPE_2 . Result VAR_1 ) throws java.io.IOException { TYPE_3 r = VAR_2 . get ( ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) + STRING_2 ) ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_1 ( ) ) ; return METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 . ChangeInfo class ) ; } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; if ( ! ( VAR_3 ) ) { modules.add ( new TYPE_3 ( ) ) ; } if ( VAR_4 ) { modules.add ( new TYPE_4 ( ) ) ; } else { modules.add ( new TYPE_5 ( ) ) ; } return VAR_1 . METHOD_3 ( modules ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) ; com.google.gerrit.reviewdb.client.Change change = TYPE_1 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ; TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) ; return new TYPE_1 ( args , change ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin , VAR_2 ) ; METHOD_4 ( admin ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_8 , admin , VAR_3 ) . METHOD_7 ( VAR_6 , VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_11 ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , java.io.IOException { TYPE_1 VAR_2 = new TYPE_1 ( ) ; try ( TYPE_4 in = new TYPE_5 ( new TYPE_2 ( new TYPE_2 ( VAR_1 , STRING_1 ) , STRING_2 ) ) ) { VAR_2 . METHOD_2 ( in ) ; } return VAR_2 ; } 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_4 = new TYPE_5 ( VAR_2 , VAR_3 ) ; try ( TYPE_6 u = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_3 ( ) , VAR_1 . METHOD_2 ( ) , TYPE_7 . METHOD_4 ( ) ) ) { u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) ; } return VAR_4 . change ; } 
private static TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException { if ( ! ( id . equals ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ) ) ) ) { TYPE_2 p = new TYPE_2 ( ) ; p . METHOD_3 ( walk . METHOD_4 ( ) , walk . METHOD_5 ( id ) ) ; return p ; } return new TYPE_3 ( ) ; } 
public TYPE_1 format ( TYPE_1 out , TYPE_2 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_3 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ; TYPE_4 ctl = cd . METHOD_1 ( ) . METHOD_2 ( VAR_1 . user ( ) ) ; return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , ctl , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) throws TYPE_4 { try { TYPE_5 VAR_1 = new TYPE_5 ( ) ; for ( int i = 0 ; i < ( p . METHOD_2 ( ) ) ; i ++ ) { VAR_1 . add ( METHOD_3 ( p . METHOD_4 ( i ) ) , VAR_2 ) ; } return VAR_1 ; } catch ( TYPE_5 e ) { throw new TYPE_4 ( ( STRING_1 + p ) , e ) ; } } 
public static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { final TYPE_1 p = VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) ; } } } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 ; if ( VAR_1 == null ) { VAR_1 = VAR_3 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) , config . METHOD_5 ( ) ) ; VAR_2 = VAR_1 ; } return VAR_4 . create ( VAR_1 ) ; } 
public java.util.List < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { TYPE_1 notes = VAR_1 . create ( db , project , psId . getParentKey ( ) ) ; com.google.gerrit.reviewdb.client.PatchSet ps = VAR_2 . get ( db , notes , psId ) ; return ps != null ? ps . METHOD_2 ( ) : null ; } 
private TYPE_1 METHOD_1 ( byte [ ] VAR_1 , int VAR_2 ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { TYPE_7 VAR_3 = new TYPE_7 ( VAR_1 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_8 VAR_5 = TYPE_8 . METHOD_2 ( VAR_6 ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_2 , key , VAR_5 ) ; return VAR_4 ; } 
public TYPE_1 apply ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) throws TYPE_2 , TYPE_3 , java.io.IOException { try { return apply ( new TYPE_4 ( VAR_2 . METHOD_1 ( VAR_1 , VAR_3 . get ( ) ) ) ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( VAR_1 . get ( ) ) ; } } 
private void METHOD_1 ( ) { if ( TYPE_1 . equals ( TYPE_2 . METHOD_2 ( VAR_1 . getValue ( VAR_1 . METHOD_3 ( ) ) ) ) ) { VAR_2 . METHOD_4 ( false ) ; final TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_5 ( VAR_4 . FALSE ) ; METHOD_6 ( VAR_2 , VAR_3 ) ; } else { VAR_2 . METHOD_4 ( VAR_1 . METHOD_7 ( ) ) ; } } 
protected java.util.List METHOD_1 ( final java.lang.String url ) throws java.lang.Exception { try { final java.util.List < ? > VAR_2 = VAR_3 . METHOD_2 ( url ) ; return ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ? VAR_2 : null ; } catch ( TYPE_2 e ) { return null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 r = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ; r . METHOD_2 ( ) ; final java.lang.String VAR_3 = STRING_3 ; TYPE_2 in = new TYPE_2 ( ) ; VAR_4 = VAR_1 ; r = VAR_2 . put ( ( STRING_2 + VAR_3 ) , in ) ; com.google.gerrit.reviewdb.client.Project project = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_3 ) ) . getProject ( ) ; com.google.common.truth.Truth.assertThat ( project . METHOD_3 ( ) ) . isEqualTo ( VAR_4 ) ; } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( ( change . getStatus ( ) ) == ( VAR_1 ) ) && ( change . currentPatchSetId ( ) . equals ( VAR_2 ) ) ) { change . METHOD_1 ( VAR_3 ) ; TYPE_2 . METHOD_2 ( change ) ; return change ; } else { return null ; } } 
private static java.util.List < TYPE_1 > METHOD_1 ( java.lang.String path , TYPE_2 < TYPE_1 > VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ( ) ) ; i ++ ) { VAR_1 . get ( i ) . path ( path ) ; } return TYPE_3 . METHOD_3 ( VAR_1 ) ; } 
private com.google.gerrit.reviewdb.client . AccountGroup METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ; if ( VAR_2 == null ) { VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) ; } TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) . METHOD_3 ( ) ) ; return VAR_4 . get ( ) . get ( VAR_3 ) ; } 
public TYPE_1 < TYPE_2 > get ( ) { TYPE_3 < TYPE_2 > m = new TYPE_3 < TYPE_2 > ( ) ; java.util.List < TYPE_4 < TYPE_2 > > VAR_1 = VAR_2 . METHOD_1 ( type ) ; if ( VAR_1 != null ) { for ( TYPE_4 < TYPE_2 > b : VAR_1 ) { m . put ( STRING_1 , b . getKey ( ) , b . METHOD_2 ( ) ) ; } } return m ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 ( this , new TYPE_3 < TYPE_1 > ( ) { public void onSuccess ( final TYPE_1 result ) { VAR_2 . display ( result , VAR_1 ) ; if ( VAR_3 ) { VAR_3 = false ; METHOD_3 ( ) ; } } } ) ) ; } 
protected TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { if ( VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( change ) ; TYPE_3 refs = ( ( this . refs ) != null ) ? this . refs : new TYPE_4 ( repo ) ; if ( ! ( TYPE_2 . METHOD_3 ( VAR_2 , refs , getChangeId ( ) ) ) ) { return METHOD_4 ( repo ) ; } } return super . METHOD_1 ( repo ) ; } 
public void METHOD_1 ( java.lang.String path , boolean VAR_1 ) throws TYPE_1 { try { TYPE_2 < TYPE_3 , TYPE_4 > view ; if ( VAR_1 ) { view = VAR_2 ; } else { view = VAR_3 ; } view . apply ( VAR_4 . METHOD_2 ( revision , TYPE_5 . METHOD_3 ( path ) ) , new TYPE_4 ( ) ) ; } catch ( java.lang.Exception e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 group ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( group instanceof TYPE_4 ) && ( ( ( TYPE_4 ) ( group ) ) . METHOD_3 ( ) ) ) { VAR_2 = true ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_7 , VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_2 ) ; } 
public boolean METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 , TYPE_2 . ChangeInfo VAR_2 , TYPE_3 VAR_3 ) { com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( VAR_5 ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_6 ) . isEqualTo ( 2 ) ; if ( name . equals ( STRING_1 ) ) { return false ; } if ( name . equals ( STRING_2 ) ) { VAR_1 . label = STRING_3 ; } return true ; } 
void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } else if ( ( VAR_2 ) == null ) { TYPE_2 VAR_3 = METHOD_5 ( ) ; if ( ! ( METHOD_6 ( ) . METHOD_7 ( ) ) ) { VAR_1 . METHOD_8 ( VAR_3 ) ; } } else { METHOD_10 ( ) ; } } 
boolean METHOD_1 ( ) { java.util.List < java.lang.String > projects = config . METHOD_2 ( ) ; boolean VAR_1 = ( projects . size ( ) ) == 1 ; if ( VAR_1 ) { java.lang.String VAR_2 = projects . get ( 0 ) ; if ( ( TYPE_1 . METHOD_3 ( VAR_2 ) ) != ( VAR_3 ) ) { VAR_1 = false ; } } return VAR_1 ; } 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , TYPE_1 value , TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 < TYPE_1 > type = ( ( TYPE_3 < TYPE_1 > ) ( value . METHOD_3 ( ) ) ) ; TYPE_4 < TYPE_1 > VAR_2 = METHOD_4 ( name , type , VAR_1 ) ; METHOD_5 ( VAR_2 , ( ) - > VAR_2 . set ( value ) ) ; } 
private java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Account account ) { if ( account != null ) { java.lang.String result = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ; if ( ( account . METHOD_3 ( ) ) != null ) { result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 ; } return result ; } return VAR_1 ; } 
public static void METHOD_1 ( int changeId , java.lang.String message , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_4 msg = new TYPE_4 ( ) ; msg . METHOD_2 ( message ) ; new TYPE_3 ( ( ( ( VAR_3 ) + changeId ) + STRING_1 ) ) . data ( msg ) . METHOD_3 ( VAR_1 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; VAR_2 = VAR_1 ; try { VAR_3 . apply ( rsrc , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public static void METHOD_1 ( final com.google.gerrit.reviewdb.server.ReviewDb db , final com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { final java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > approvals = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval a : approvals ) { a . METHOD_5 ( change ) ; } db . METHOD_2 ( ) . update ( approvals ) ; } 
public void display ( final TYPE_1 VAR_1 ) { METHOD_1 ( ) ; final TYPE_2 . PatchSet VAR_2 = VAR_1 . METHOD_2 ( ) ; currentPatchSetId = VAR_2 . getId ( ) ; patchSets = VAR_1 . METHOD_4 ( ) ; for ( final TYPE_2 . PatchSet ps : patchSets ) { if ( ps == VAR_2 ) { add ( new TYPE_3 ( VAR_3 , VAR_1 , VAR_1 . METHOD_5 ( ) ) ) ; } else { add ( new TYPE_3 ( VAR_3 , VAR_1 , ps ) ) ; } } } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = db . patchSets ( ) . get ( id ) ; if ( ps == null ) { throw new com.google.gwtorm.server.OrmException ( ( ( STRING_1 + id ) + STRING_2 ) ) ; } return ps . METHOD_2 ( ) ; } 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { java.lang.String VAR_1 ; if ( info . METHOD_2 ( ) . equals ( info . METHOD_3 ( ) ) ) { VAR_1 = TYPE_2 . METHOD_4 ( ) ; } else { VAR_1 = TYPE_2 . METHOD_5 ( ) ; } VAR_2 . METHOD_6 ( VAR_1 ) ; VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( info . METHOD_3 ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 group ) { if ( group != null ) { if ( ( ( group . METHOD_2 ( ) ) == null ) || ( ( group . METHOD_2 ( ) . get ( ) ) == null ) ) { return group ; } TYPE_1 ref = VAR_1 . get ( group . METHOD_2 ( ) ) ; if ( ref != null ) { return ref ; } VAR_1 . put ( group . METHOD_2 ( ) , group ) ; } return group ; } 
private static void codemirror ( final java.lang.String token , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , final TYPE_1 . Key id , final TYPE_2 VAR_2 , final int line ) { TYPE_3 . METHOD_1 ( new TYPE_4 ( token ) { public void onSuccess ( ) { TYPE_5 . display ( token , new TYPE_7 ( VAR_1 , id . getParentKey ( ) , id . get ( ) , VAR_2 , line ) ) ; } } ) ; } 
protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 class ) ; bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ; VAR_3 = METHOD_2 ( VAR_4 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ; VAR_5 = METHOD_2 ( VAR_6 class ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ; bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null , null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ; } 
private synchronized TYPE_1 get ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws TYPE_2 { TYPE_1 repo = VAR_1 . get ( name . get ( ) . METHOD_1 ( ) ) ; if ( repo != null ) { return repo ; } throw new TYPE_2 ( name . get ( ) ) ; } 
public void METHOD_1 ( TYPE_1 p , TYPE_2 < com.google.gerrit.reviewdb.client . PatchSetApproval > VAR_1 ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { p . approvals = new java.util.ArrayList < TYPE_4 > ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval a : VAR_1 ) { if ( ( a . getValue ( ) ) != 0 ) { VAR_2 . add ( METHOD_2 ( a ) ) ; } } if ( VAR_2 . isEmpty ( ) ) { p . approvals = null ; } } } 
public long METHOD_1 ( TYPE_1 p ) { long VAR_1 = METHOD_2 ( ) ; long VAR_2 = p . METHOD_2 ( ) ; if ( ( VAR_1 > 0 ) && ( VAR_2 > 0 ) ) { return TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; } return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; } 
void METHOD_1 ( final TYPE_1 . NameKey project , final java.lang.String ref , final TYPE_2 VAR_1 ) { synchronized ( VAR_2 ) { TYPE_3 e = VAR_2 . get ( VAR_1 ) ; if ( e == null ) { e = new TYPE_3 ( server , this , project . get ( ) , VAR_3 , VAR_1 ) ; VAR_4 . METHOD_1 ( e , VAR_5 , VAR_6 ) ; VAR_2 . put ( VAR_1 , e ) ; } e . METHOD_2 ( ref ) ; } } 
TYPE_1 METHOD_1 ( TYPE_2 user , TYPE_3 revision ) { return new TYPE_1 ( user . METHOD_2 ( ) , revision . METHOD_3 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) , true ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { VAR_1 = new TYPE_2 ( ) ; TYPE_3 update = METHOD_2 ( VAR_2 , VAR_1 ) ; try { VAR_3 . update ( VAR_4 ) ; org.junit.Assert . METHOD_3 ( STRING_1 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) ; } METHOD_6 ( update , 1 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String file ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_3 : VAR_4 . METHOD_2 ( project . getName ( ) , VAR_1 , file ) ) { if ( ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . name ) ) ) && ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . url ) ) ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet patchSet , final TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) ; } 
private boolean METHOD_1 ( ) { return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_10 , VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 , VAR_11 ) . METHOD_6 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_2 , TYPE_2 . of ( STRING_1 , TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 , VAR_5 ) ) ) ; METHOD_2 ( VAR_6 , VAR_7 . Collections < java.lang.String , java.util.ArrayList < TYPE_4 > > METHOD_4 ( ) ) ; } 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( final org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { try ( TYPE_1 VAR_1 = repo . METHOD_2 ( ) ) { org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ; VAR_1 . METHOD_3 ( ) ; return id ; } } 
public void METHOD_1 ( final TYPE_1 res , final boolean VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id id = res . getAccountId ( ) ; final TYPE_2 . Key VAR_2 = res . METHOD_2 ( ) ; if ( ( VAR_3 ) != null ) { VAR_4 . METHOD_3 ( key ) ; } key = VAR_4 . METHOD_4 ( id ) ; VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 , null , null ) ; METHOD_6 ( ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_2 > VAR_1 = ( ( java.util.Map < java.lang.String , TYPE_2 > ) ( VAR_2 . get ( ) . apply ( new TYPE_3 ( ) ) ) ) ; for ( TYPE_4 < java.lang.String , TYPE_2 > VAR_3 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_4 = VAR_3 . getValue ( ) ; VAR_4 . name = VAR_3 . getKey ( ) ; } return VAR_1 . values ( ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) . in ( VAR_6 ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_9 class ) . to ( VAR_10 class ) ; install ( VAR_11 ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { return null ; } for ( TYPE_2 VAR_3 : VAR_2 ) { if ( VAR_3 . getName ( ) . METHOD_3 ( STRING_1 ) ) { return VAR_3 . getValue ( ) ; } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( rw , VAR_1 ) ; java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , rw , VAR_2 ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_4 : VAR_1 ) { VAR_3 . add ( ( STRING_1 + VAR_4 ) ) ; } com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_3 ) ; } } 
public TYPE_1 revision ( java.lang.String id ) throws TYPE_2 { try { return VAR_1 . create ( VAR_2 . METHOD_1 ( change , TYPE_3 . METHOD_2 ( id ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
private void METHOD_1 ( ) throws TYPE_2 . OrmException { VAR_1 . METHOD_2 ( db . METHOD_3 ( ) . METHOD_4 ( changeId ) . METHOD_5 ( ) ) ; for ( final TYPE_3 m : VAR_1 . METHOD_6 ( ) ) { VAR_2 . METHOD_7 ( m . METHOD_8 ( ) ) ; } } 
public void METHOD_1 ( TYPE_1 . Factory VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_2 user , TYPE_3 < com.google.gerrit.server.query.change.ChangeData > changes , java.lang.String VAR_3 ) throws TYPE_5 , TYPE_6 { METHOD_1 ( VAR_1 , project , user , changes , VAR_3 , VAR_4 , TYPE_7 . of ( ) ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_2 r = VAR_3 . get ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_4 ) ; return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 class ) ; } 
public TYPE_1 run ( TYPE_2 . ReviewDb db ) throws TYPE_3 . OrmException { if ( ! ( VAR_2 . getAccountId ( ) . equals ( getAccountId ( ) ) ) ) { throw new TYPE_5 ( ( ( ( ( STRING_1 + ( VAR_2 . getAccountId ( ) ) ) + STRING_2 ) + STRING_3 ) + ( getAccountId ( ) ) ) ) ; } db . METHOD_1 ( ) . METHOD_2 ( java.util.Collections.singleton ( VAR_2 ) ) ; return VAR_3 ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( ) { final TYPE_3 p = METHOD_2 ( ) ; final java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < TYPE_2 > ( 2 ) ; TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_3 ) ; TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_4 ) ; return java.util.Collections . METHOD_4 ( VAR_2 ) ; } 
public Account . Id METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { try { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) { TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ; return VAR_2 != null ? VAR_2 . getAccountId ( ) : null ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; com.google.gerrit.extensions.registration.DynamicSet < TYPE_2 > VAR_3 = com.google.gerrit.extensions.registration.DynamicSet . METHOD_3 ( ) ; VAR_3 . add ( VAR_1 ) ; VAR_4 = new TYPE_3 ( null , VAR_3 , null , null , null , null ) ; } 
public final void onSuccess ( TYPE_1 result ) { if ( METHOD_1 ( ) ) { if ( ( ( result . length ( ) ) == 1 ) && ( TYPE_2 . METHOD_2 ( query ) ) ) { TYPE_3 . ChangeInfo c = result . get ( 0 ) ; com.google.gerrit.reviewdb.client.Change . Id id = c . METHOD_3 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_4 ( id ) ) ; } else { display ( result ) ; this . display ( ) ; } } } 
public void index ( TYPE_1 VAR_1 ) throws java.io.IOException { for ( TYPE_2 < TYPE_1 , TYPE_3 > i : METHOD_1 ( ) ) { TYPE_4 < TYPE_3 > VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_2 . get ( ) ) ; } else { i . delete ( VAR_1 ) ; } } METHOD_5 ( VAR_1 . get ( ) ) ; } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 < TYPE_2 > VAR_1 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . get ( TYPE_5 . METHOD_5 ( VAR_1 ) ) ; } 
public java.util.List < TYPE_1 > get ( ) { java.util.Set < java.lang.String > VAR_1 = cfg . METHOD_1 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( java.lang.String name : VAR_1 ) { VAR_3 . add ( TYPE_3 . METHOD_3 ( cfg , name , true ) ) ; } return TYPE_4 . METHOD_4 ( VAR_3 ) ; } 
java.util.Set < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , java.io.IOException { METHOD_2 ( ) ; if ( VAR_1 ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_3 ( VAR_3 ) ) { return METHOD_1 ( repo , TYPE_2 . METHOD_4 ( repo ) ) ; } } return TYPE_1 . METHOD_5 ( db . METHOD_6 ( ) . METHOD_1 ( ) . METHOD_7 ( ) ) ; } 
public TYPE_1 [ ] METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . get ( STRING_1 ) ) == null ) ) { return new TYPE_1 [ 0 ] ; } return VAR_1 . get ( STRING_1 ) . METHOD_2 ( new TYPE_1 [ 0 ] ) ; } 
private static boolean METHOD_4 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { for ( final TYPE_1 t : TYPE_3 . METHOD_1 ( ) . METHOD_2 ( ) ) { if ( ! ( VAR_2 . METHOD_3 ( t ) ) ) { return false ; } } return true ; } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( java.lang.String name ) throws java.io.IOException { name = TYPE_1 . METHOD_3 ( VAR_2 , name ) ; if ( VAR_1 . METHOD_2 ( name ) ) { return VAR_1 . get ( name ) ; } org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ; VAR_1 . put ( name , repo ) ; return repo ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 ctx = VAR_2 . METHOD_2 ( null , VAR_3 , null ) ; final TYPE_2 VAR_4 = VAR_2 . set ( ctx ) ; try { VAR_5 . METHOD_3 ( ) ; } finally { VAR_2 . set ( VAR_4 ) ; } } 
public boolean METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 { try { final TYPE_2 . ReviewDb db = schema . METHOD_2 ( ) ; try { return ( db . METHOD_3 ( ) . get ( new TYPE_3 . Key ( VAR_1 ) ) ) != null ; } finally { db . close ( ) ; } } catch ( TYPE_4 . OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
private static void p ( final java.lang.StringBuilder r , final TYPE_2 . NameKey project ) { java.lang.String n = project . get ( ) ; if ( ! ( n . METHOD_1 ( STRING_1 ) ) ) { n += STRING_1 ; } TYPE_3 . METHOD_2 ( r , STRING_2 , n ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 . Id VAR_1 ) throws TYPE_3 { final com.google.gerrit.reviewdb.client . AccountGroup group = VAR_2 . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( user . get ( ) , group ) ; } 
protected java.util.List < TYPE_1 . ChangeInfo > METHOD_1 ( TYPE_2 query , com.google.gerrit.reviewdb.client.Change ... changes ) throws java.lang.Exception { java.util.List < TYPE_1 . ChangeInfo > result = query . get ( ) ; TYPE_3 < TYPE_4 > VAR_1 = TYPE_5 . METHOD_2 ( result ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_3 ( format ( query , VAR_1 , changes ) ) . METHOD_5 ( TYPE_5 . METHOD_2 ( changes ) ) . METHOD_6 ( ) ; return result ; } 
public void METHOD_1 ( ) throws TYPE_1 { if ( VAR_1 ) { throw new TYPE_1 ( STRING_1 ) ; } for ( TYPE_2 VAR_2 : VAR_3 ) { TYPE_3 args = VAR_2 . args ; if ( VAR_8 . METHOD_5 ( ) . equals ( VAR_8 . METHOD_4 ( ) ) ) { continue ; } com.google.gerrit.reviewdb.client.Account account = VAR_4 . get ( VAR_5 . getAccountId ( ) ) . METHOD_2 ( ) ; VAR_6 . METHOD_3 ( VAR_7 , VAR_8 . METHOD_4 ( ) , VAR_8 . METHOD_5 ( ) , account ) ; } } 
private java.lang.String [ ] METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException , TYPE_1 { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( p ) ) { TYPE_2 VAR_2 = new TYPE_2 ( repo . METHOD_3 ( ) , STRING_1 ) ; return VAR_2 . METHOD_4 ( new TYPE_3 ( ) { public boolean METHOD_5 ( TYPE_2 VAR_3 , java.lang.String name ) { return name . METHOD_6 ( STRING_2 ) ; } } ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 , TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ; cd . METHOD_2 ( user ) ; if ( TYPE_5 . METHOD_3 ( cfg ) ) { return METHOD_4 ( db , new TYPE_1 ( cd ) , user ) ; } return METHOD_5 ( db , new TYPE_1 ( cd ) , user ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } synchronized ( this ) { boolean VAR_2 = ! ( VAR_3 . isEmpty ( ) ) ; for ( TYPE_1 p : VAR_3 . values ( ) ) { p . METHOD_1 ( ) ; } VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_3 ( ) ; if ( VAR_2 ) { TYPE_2 . METHOD_4 ( ) ; METHOD_5 ( ) ; } } } 
public TYPE_1 apply ( TYPE_2 VAR_1 ) { TYPE_3 info = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_1 ( project , revision , file ) ; if ( info == null ) { return null ; } TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . name = info . name ; VAR_3 = VAR_4 ; VAR_2 . url = info . url ; VAR_5 = VAR_6 ; return VAR_2 ; } 
protected void rpc ( final java.lang.String name , TYPE_1 < ? extends TYPE_2 > VAR_1 ) { final TYPE_3 . Key < TYPE_4 > VAR_2 = TYPE_5 . get ( VAR_3 class , TYPE_6 . create ( ) ) ; final TYPE_7 VAR_4 = new TYPE_7 ( VAR_1 ) ; bind ( VAR_1 ) ; METHOD_1 ( ( ( VAR_5 ) + name ) ) . METHOD_2 ( VAR_2 ) ; bind ( VAR_2 ) . METHOD_3 ( VAR_4 ) . in ( VAR_6 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = name ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . projects ( ) . create ( ( name + STRING_2 ) ) . get ( ) . name ) . isEqualTo ( name ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_2 ( name , VAR_3 ) ; VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) ; VAR_4 . METHOD_3 ( name , STRING_3 , new java.lang.String [ ] { } ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 VAR_2 , java.lang.String line ) throws TYPE_2 { if ( VAR_1 == null ) { throw METHOD_2 ( STRING_1 , psId . get ( ) ) ; } if ( line . METHOD_3 ( STRING_2 ) ) { METHOD_4 ( psId , VAR_1 , VAR_2 , line ) ; } else { METHOD_5 ( psId , VAR_1 , VAR_2 , line ) ; } } 
public void METHOD_1 ( final TYPE_1 res , final boolean VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id id = res . getAccountId ( ) ; final TYPE_2 . Key VAR_2 = res . METHOD_2 ( ) ; if ( ( VAR_3 ) != null ) { VAR_4 . METHOD_3 ( key ) ; } key = VAR_4 . METHOD_4 ( id ) ; VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 , null ) ; METHOD_6 ( ) ; } 
private void METHOD_1 ( TYPE_1 rsrc ) throws TYPE_2 { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( rsrc . METHOD_3 ( ) ) ) { if ( ! ( repo . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) . isEmpty ( ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , rsrc . getName ( ) ) ) ; } } catch ( java.io.IOException e ) { throw new TYPE_2 ( e ) ; } } 
private void METHOD_1 ( final boolean VAR_1 ) { try { for ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 : VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { if ( ( ! VAR_1 ) && ( ( VAR_2 . getValue ( ) ) == 0 ) ) { continue ; } add ( VAR_4 , VAR_2 . getAccountId ( ) ) ; } } catch ( com.google.gwtorm.server.OrmException err ) { } } 
private void METHOD_2 ( TYPE_2 rsrc ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { try { VAR_2 . METHOD_2 ( db . get ( ) , rsrc . getId ( ) ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( TYPE_7 . METHOD_3 ( rsrc . getId ( ) . toString ( ) ) ) ; } } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = TYPE_6 . METHOD_3 ( ) ; if ( p == null ) { p = TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . getId ( ) ) ; } result . METHOD_6 ( p ) ; TYPE_6 . METHOD_7 ( p ) ; } } ) ; if ( ( view ) != null ) { close ( ) ; } } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) return VAR_2 ; if ( VAR_3 . equals ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 ) ) return VAR_4 ; return ( VAR_3 . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 . METHOD_3 ( ) ) ; } 
public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; if ( ( view ) != null ) { view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) ; } } } 
protected void METHOD_1 ( TYPE_1 view ) { java.lang.String token = view . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( token , false ) ; TYPE_3 . METHOD_4 ( token ) ; if ( view instanceof TYPE_4 ) { VAR_2 = token ; } super . METHOD_1 ( view ) ; view . METHOD_1 ( ) ; VAR_1 = token ; } 
private void METHOD_1 ( TYPE_2 event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { for ( TYPE_3 VAR_2 : VAR_3 . values ( ) ) { if ( METHOD_2 ( event , VAR_2 . user , db ) ) { VAR_4 . METHOD_3 ( event ) ; } } METHOD_4 ( event ) ; } 
public java.util.List METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 t = this ; while ( t instanceof TYPE_3 ) { VAR_1 . add ( ( ( TYPE_3 ) ( t ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_1 ( ) ) ; t = ( ( TYPE_3 ) ( t ) ) . METHOD_5 ( ) . METHOD_4 ( ) ; } return VAR_1 ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) throws TYPE_1 { try { for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . METHOD_3 ( VAR_1 ) ) { METHOD_4 ( cd . change ( ) ) ; } } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { METHOD_5 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 , VAR_7 ) . METHOD_10 ( VAR_8 , VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) ; assertThat ( VAR_5 ) . METHOD_12 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_4 , VAR_1 , VAR_3 , STRING_1 ) . METHOD_4 ( ) ; TYPE_2 d = util . user ( VAR_4 , VAR_3 ) ; org.junit.Assert . METHOD_5 ( STRING_2 , d . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . account = user . email ; VAR_3 = STRING_2 ; VAR_1 . METHOD_2 ( VAR_2 class ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) ; } 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; try { VAR_1 = VAR_2 . METHOD_2 ( c , VAR_3 . create ( c . METHOD_3 ( ) ) ) ; } catch ( TYPE_2 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } return VAR_1 ; } 
public static void METHOD_1 ( int id , java.lang.String user , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . METHOD_2 ( user ) ; TYPE_4 . change ( id ) . view ( STRING_1 ) . put ( input , VAR_1 ) ; } 
public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) ; org.junit.Assert.assertEquals ( STRING_4 , METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) ; org.junit.Assert.assertEquals ( STRING_6 , METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) ; } 
public AccountGroup . Id METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 . OrmException { final TYPE_4 VAR_1 = VAR_2 . create ( ) ; final TYPE_5 . Id me = user . getAccountId ( ) ; return VAR_1 . METHOD_5 ( VAR_3 , null , false , null , java.util.Collections.singleton ( me ) , null ) ; } 
public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.Repository repo , java.lang.String message , java.util.Map < TYPE_1 , byte [ ] > VAR_1 ) throws java.io.IOException , TYPE_2 { try ( TYPE_3 git = new TYPE_3 ( repo ) ) { if ( VAR_1 != null ) { TYPE_4 . METHOD_2 ( git , VAR_1 ) ; } return rw . parseCommit ( git . commit ( ) . METHOD_3 ( message ) . METHOD_4 ( ) ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; bind ( VAR_2 class ) . to ( VAR_1 class ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) ; bind ( VAR_5 class ) ; bind ( VAR_6 class ) ; METHOD_2 ( ) . to ( VAR_5 class ) ; } 
private static java.lang.String METHOD_1 ( long VAR_1 , long VAR_2 ) { if ( ( VAR_1 - VAR_2 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) { return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) ; com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) . isEqualTo ( VAR_1 . getChangeId ( ) ) ; } 
public void onSuccess ( TYPE_1 VAR_1 ) { diff = VAR_1 ; VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 ) ; if ( VAR_3 . METHOD_4 ( ) ) { if ( ( VAR_2 . METHOD_5 ( VAR_5 ) ) > 0 ) { VAR_6 . onSuccess ( null ) ; } else { METHOD_6 ( VAR_1 , VAR_6 ) ; } } else { VAR_6 . onSuccess ( null ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 . Id VAR_1 ) { final java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( VAR_2 . size ( ) ) ; for ( final TYPE_3 e : VAR_2 ) { r . add ( e . METHOD_2 ( VAR_1 ) ) ; } return r ; } 
public static void put ( java.lang.String project , int id , java.lang.String path , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { if ( TYPE_3 . equals ( path ) ) { TYPE_4 . METHOD_1 ( project , id , VAR_1 , VAR_2 ) ; } else { TYPE_4 . METHOD_2 ( project , id , path ) . put ( VAR_1 , VAR_2 ) ; } } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { if ( ! ( patchSet . METHOD_2 ( ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } patchSet . METHOD_3 ( false ) ; if ( ! ( VAR_1 ) ) { ctx . METHOD_5 ( ) ; } ctx . METHOD_6 ( ) . patchSets ( ) . update ( java.util.Collections.singleton ( patchSet ) ) ; } 
public void run ( ) { try { final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ; try { java.lang.String line ; while ( ( line = VAR_1 . METHOD_1 ( ) ) != null ) { VAR_2 . error ( ( STRING_2 + line ) ) ; } } finally { VAR_1 . close ( ) ; } } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_3 , e ) ; } } 
private boolean isEmpty ( ) { return ( ( ( ( ( ( ( ( approvals . isEmpty ( ) ) && ( ( VAR_1 ) == null ) ) && ( VAR_2 . isEmpty ( ) ) ) && ( reviewers . isEmpty ( ) ) ) && ( ( status ) == null ) ) && ( ( VAR_3 ) == null ) ) && ( ( VAR_4 ) == null ) ) && ( ( VAR_5 ) == null ) ) && ( ( topic ) == null ) ; } 
private int METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_3 = VAR_1 . METHOD_1 ( ) ; if ( VAR_3 == ( - 1 ) ) { return VAR_2 . equals ( STRING_1 ) ? INT_1 : INT_2 ; } return VAR_3 ; } 
private TYPE_1 < ? extends TYPE_1 < ? , java.lang.String , TYPE_2 < java.lang.String > > , java.lang.String , TYPE_2 < java.lang.String > > METHOD_1 ( TYPE_3 . Result r ) throws java.lang.Exception { return com.google.common.truth.Truth.assertThat ( VAR_1 . changes ( ) . id ( r . getChange ( ) . getId ( ) . get ( ) ) . METHOD_2 ( ) ) ; } 
private static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse rsp , TYPE_3 VAR_1 ) { java.lang.String VAR_2 = ( VAR_1 != null ) ? VAR_1 . METHOD_2 ( ) : STRING_1 ; TYPE_4 c = new TYPE_4 ( VAR_3 , VAR_2 ) ; c . METHOD_3 ( STRING_2 ) ; c . METHOD_5 ( TYPE_5 . METHOD_6 ( req ) ) ; c . METHOD_7 ( ( VAR_1 != null ? - 1 : 0 ) ) ; rsp . METHOD_8 ( c ) ; } 
public TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 ( java.lang.String query ) throws TYPE_3 { try ( TYPE_4 VAR_1 = VAR_3 . METHOD_2 ( ) ; TYPE_5 VAR_2 = VAR_1 . METHOD_3 ( ) ) { return METHOD_4 ( VAR_2 , query ) ; } catch ( TYPE_6 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; try { TYPE_3 . METHOD_3 ( VAR_1 ) ; final TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 ) ; org.junit.Assert . METHOD_4 ( VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_4 ) ; } finally { TYPE_3 . delete ( VAR_1 ) ; } } 
TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 , TYPE_4 > VAR_1 ) { TYPE_5 p = METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { return new TYPE_6 ( VAR_1 , VAR_2 . METHOD_3 ( STRING_1 ) , false ) ; } return new TYPE_6 ( VAR_1 , METHOD_4 ( STRING_2 ) , true ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) || ( METHOD_7 ( db ) ) ) { return false ; } if ( METHOD_8 ( ) ) { return true ; } return VAR_1 . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final TYPE_2 t = METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( t ) ; org.junit.Assert.assertEquals ( VAR_1 , t . METHOD_4 ( ) ) ; org.junit.Assert.assertEquals ( 1 , t . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( t . METHOD_7 ( 0 ) , STRING_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( TYPE_2 . METHOD_4 ( ) ) || ( TYPE_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey name = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; VAR_1 . METHOD_7 ( name ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , cfg ) ; VAR_2 . METHOD_7 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String , java.lang.String > config , TYPE_3 req ) { TYPE_4 VAR_1 = TYPE_5 . METHOD_2 ( ) ; TYPE_6 . METHOD_4 ( VAR_1 , config , req ) ; TYPE_6 . METHOD_5 ( VAR_1 , config ) ; return VAR_1 . create ( ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { java.lang.String changeId = METHOD_2 ( ) . getChangeId ( ) ; TYPE_3 . ChangeInfo c = get ( changeId ) ; org.junit.Assert . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) ; org.junit.Assert.assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . message ) ; } 
public boolean METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) throws java.io.IOException { TYPE_1 ref = VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) ) ; if ( ref == null ) { return ! ( VAR_3 . METHOD_4 ( VAR_2 ) ) ; } return ref . METHOD_5 ( ) . equals ( VAR_3 . get ( VAR_2 ) ) ; } 
protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; VAR_1 . add ( STRING_3 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1 . add ( c . getName ( ) ) ; } return VAR_1 ; } 
public java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 db ) throws TYPE_2 { TYPE_3 s = db . METHOD_2 ( ) ; try { TYPE_4 VAR_1 = s . METHOD_3 ( STRING_1 ) ; try { java.util.Set < java.lang.String > VAR_2 = new TYPE_5 < java.lang.String > ( ) ; while ( VAR_1 . METHOD_4 ( ) ) { VAR_2 . add ( VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; } return VAR_2 ; } finally { VAR_1 . close ( ) ; } } finally { s . close ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 , VAR_3 ) ; METHOD_4 ( STRING_5 , VAR_4 ) ; METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) ; } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 < TYPE_2 > VAR_2 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_2 ) . METHOD_6 ( VAR_9 , VAR_10 ) . to ( VAR_3 ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . toString ( ) ; if ( METHOD_3 ( VAR_2 ) ) { return VAR_2 . METHOD_4 ( 0 , VAR_2 . METHOD_5 ( CHAR_1 ) ) ; } if ( VAR_3 . METHOD_6 ( VAR_1 ) ) { return VAR_3 . METHOD_7 ( VAR_1 ) ; } return null ; } 
private static void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , TYPE_1 VAR_2 , java.lang.String path , TYPE_2 diff ) throws java.io.IOException { try { if ( ! ( path . isEmpty ( ) ) ) { diff . METHOD_2 ( TYPE_3 . create ( path ) ) ; } diff . METHOD_3 ( repo ) ; diff . METHOD_4 ( true ) ; diff . format ( VAR_1 , VAR_2 ) ; } finally { diff . METHOD_5 ( ) ; } } 
public void METHOD_1 ( TYPE_1 ctx ) { if ( ( VAR_1 ) == null ) { return ; } METHOD_2 ( ctx . getProject ( ) , VAR_2 , VAR_3 , VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_2 , VAR_5 , VAR_6 , ctx . METHOD_6 ( ) , VAR_1 . getMessage ( ) , VAR_7 , VAR_8 , ctx . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) . METHOD_3 ( TYPE_1 . get ( VAR_1 class , TYPE_2 . METHOD_4 ( VAR_2 ) ) ) ; if ( ( ( VAR_3 ) == null ) && ( ( VAR_4 ) != null ) ) { METHOD_5 ( STRING_2 ) . METHOD_6 ( new TYPE_3 ( VAR_4 , VAR_5 ) ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 ) ; bind ( VAR_3 class ) . in ( VAR_2 ) ; bind ( VAR_4 class ) . to ( VAR_3 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ; bind ( VAR_7 class ) . METHOD_3 ( VAR_8 class ) . in ( VAR_6 ) ; bind ( VAR_9 . String class ) . METHOD_2 ( VAR_10 class ) . METHOD_3 ( VAR_11 class ) ; } 
private boolean METHOD_1 ( ) { if ( VAR_1 . get ( ) . METHOD_2 ( ) ) { TYPE_1 ctl = VAR_1 . get ( ) . METHOD_3 ( ) ; return ( ctl . METHOD_4 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ) || ( ctl . METHOD_5 ( ) ) ; } return false ; } 
protected static void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String VAR_1 , java.lang.String to ) throws com.google.gwtorm.server.OrmException { TYPE_1 s = ( ( TYPE_1 ) ( db ) ) ; try ( TYPE_2 e = new TYPE_2 ( s ) ) { s . METHOD_1 ( e , VAR_1 , to ) ; } } 
public TYPE_1 format ( TYPE_1 out , TYPE_2 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_3 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ; return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , cd . notes ( ) , VAR_1 . user ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit , com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_2 VAR_2 ) throws TYPE_3 , TYPE_4 { try { VAR_2 . METHOD_2 ( TYPE_5 ) ; return ; } catch ( TYPE_3 VAR_3 ) { } if ( VAR_4 . METHOD_3 ( project , repo , commit ) ) { return ; } throw new TYPE_3 ( java.lang.String.format ( STRING_1 , TYPE_5 . METHOD_4 ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , TYPE_5 , java.io.IOException { TYPE_2 p = VAR_2 . METHOD_1 ( VAR_3 , id ) ; for ( TYPE_6 VAR_4 : p . METHOD_3 ( ) . METHOD_4 ( ) ) { if ( VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 , p . METHOD_3 ( ) ) ; } } throw new TYPE_4 ( id ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( null ) ; org.junit.Assert . METHOD_5 ( r ) ; org.junit.Assert.assertEquals ( VAR_2 . getName ( ) , r . name ) ; org.junit.Assert.assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) != null ) ) { return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; } return TYPE_1 . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 err = new TYPE_1 ( name ) ; METHOD_2 ( ) . METHOD_3 ( err ) ; METHOD_4 ( ) ; try { new TYPE_2 ( VAR_1 , VAR_2 , name ) . METHOD_5 ( ) ; org.junit.Assert . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_1 VAR_3 ) { org.junit.Assert . METHOD_7 ( err , VAR_3 ) ; } METHOD_8 ( ) ; } 
public final TYPE_1 < ? > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change . Id id , TYPE_2 VAR_1 ) { return VAR_1 . submit ( new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_2 ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_3 ( ) ) { METHOD_4 ( db , id ) ; } return null ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( METHOD_3 ( STRING_1 , null ) ) ; changeId = VAR_1 . get ( 0 ) . getChangeId ( ) ; VAR_1 . add ( METHOD_3 ( STRING_2 , changeId ) ) ; VAR_1 . add ( METHOD_3 ( STRING_3 , changeId ) ) ; } 
private TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 ( java.util.List < TYPE_2 > plugins ) throws java.io.IOException { TYPE_1 < java.lang.String , TYPE_2 > VAR_1 = TYPE_3 . create ( ) ; for ( TYPE_2 VAR_2 : plugins ) { VAR_1 . put ( METHOD_2 ( VAR_2 ) , VAR_2 ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; org.junit.Assert . METHOD_3 ( VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_4 ) ; org.junit.Assert.assertEquals ( new TYPE_1 ( VAR_1 , STRING_1 ) , VAR_5 ) ; } 
public final java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_3 ( ) ; } if ( ( METHOD_2 ( ) . METHOD_4 ( ) ) != ( - 1 ) ) { return TYPE_1 . toString ( METHOD_2 ( ) . METHOD_4 ( ) ) ; } return STRING_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 git = METHOD_2 ( ) ; org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_3 ( ) ; TYPE_2 . Result change = METHOD_4 ( git ) ; submit ( change . getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . getId ( ) ) . isEqualTo ( change . METHOD_5 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_6 ( 0 ) ) . isEqualTo ( VAR_1 ) ; METHOD_7 ( change . getChangeId ( ) , 1 ) ; } 
public static TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; for ( int i = ( VAR_1 . size ( ) ) - 1 ; i >= 0 ; i -- ) { VAR_2 = new TYPE_2 ( VAR_1 . get ( i ) , VAR_2 ) ; } return VAR_2 ; } 
public void METHOD_1 ( final TYPE_1 event ) { final TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ; if ( ( VAR_2 ) == VAR_1 ) { METHOD_3 ( false ) ; } else if ( ( submit ) == VAR_1 ) { METHOD_3 ( true ) ; } else if ( ( VAR_3 ) == VAR_1 ) { VAR_4 = false ; METHOD_4 ( ) ; } } 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return METHOD_2 ( VAR_1 ) ; } else { switch ( status . getStatus ( ) ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( boolean VAR_1 ) { if ( ! VAR_1 ) { return VAR_2 . values ( ) ; } java.util.List < TYPE_2 > plugins = new java.util.ArrayList ( VAR_2 . values ( ) ) ; plugins . METHOD_2 ( VAR_3 . values ( ) ) ; return plugins ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { if ( ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) { return ; } TYPE_1 [ ] VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 != null ) { for ( TYPE_1 d : VAR_2 ) { if ( d . METHOD_5 ( ) ) { TYPE_2 . METHOD_1 ( d ) ; } else { TYPE_2 . METHOD_6 ( d ) ; } } } TYPE_2 . METHOD_6 ( VAR_1 ) ; } 
public static void METHOD_1 ( java.lang.String project , int id , java.lang.String commit , java.lang.String VAR_1 , java.lang.String message , TYPE_1 < TYPE_2 . ChangeInfo > VAR_2 ) { TYPE_3 VAR_3 = TYPE_3 . create ( ) ; VAR_3 . METHOD_2 ( message ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; TYPE_4 . METHOD_4 ( project , id , commit , STRING_1 ) . METHOD_5 ( VAR_3 , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = repo . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; java.util.Map < java.lang.String , TYPE_1 > res = METHOD_5 ( VAR_1 , STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_6 ( 1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_7 ( name ) ; TYPE_1 d = res . get ( name ) ; com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( name ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = null ; for ( TYPE_3 w : this ) { if ( w instanceof TYPE_2 ) { final TYPE_2 d = ( ( TYPE_2 ) ( w ) ) ; if ( VAR_2 == null ) { VAR_2 = d ; } if ( d . METHOD_2 ( ) . equals ( VAR_1 ) ) { d . METHOD_1 ( ) ; return ; } } } if ( VAR_2 != null ) { VAR_2 . METHOD_1 ( ) ; } } 
private < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_2 , TYPE_1 > METHOD_1 ( java.lang.String name , TYPE_4 < TYPE_2 > VAR_1 , long VAR_2 ) { TYPE_5 db = new TYPE_5 ( VAR_3 , name ) . METHOD_2 ( ) ; java.lang.String url = STRING_1 + ( db . METHOD_3 ( ) . toString ( ) ) ; return new TYPE_3 ( url , VAR_1 , VAR_2 ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , git , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ; return VAR_2 . METHOD_2 ( STRING_1 ) . getChangeId ( ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.Repository repo ; try { repo = VAR_1 . METHOD_2 ( change . getProject ( ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } try { return new TYPE_1 ( repo , change ) ; } catch ( TYPE_3 | java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } finally { repo . close ( ) ; } } 
private void METHOD_1 ( final boolean VAR_1 ) { if ( ( db ) != null ) { try { for ( TYPE_2 VAR_2 : db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { if ( ( ! VAR_1 ) && ( ( VAR_2 . getValue ( ) ) == 0 ) ) { continue ; } add ( VAR_3 , VAR_2 . getAccountId ( ) ) ; } } catch ( TYPE_3 . OrmException err ) { } } } 
public void METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) { if ( ( METHOD_2 ( VAR_1 ) ) != ( - 1 ) ) { if ( ! ( VAR_1 . equals ( VAR_2 ) ) ) { METHOD_3 ( ) ; TYPE_1 VAR_3 = VAR_4 . get ( VAR_1 ) ; VAR_3 . METHOD_5 ( true ) ; VAR_2 = VAR_1 ; } } else { TYPE_2 . display ( TYPE_3 . METHOD_6 ( VAR_1 . getParentKey ( ) ) ) ; } } 
private void METHOD_1 ( ) { if ( VAR_3 . isEmpty ( ) ) { METHOD_2 ( ) ; } else { final TYPE_1 < TYPE_2 > VAR_1 = new TYPE_1 < TYPE_2 > ( ) { private int VAR_2 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_2 ) ) == ( VAR_3 . size ( ) ) ) { METHOD_2 ( ) ; } } } ; for ( final TYPE_3 p : VAR_3 ) { p . METHOD_3 ( VAR_1 ) ; } } } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) { TYPE_2 VAR_2 = TYPE_3 . create ( VAR_3 , name , 0 ) ; if ( ! ( VAR_1 . METHOD_2 ( VAR_4 , STRING_1 , VAR_2 ) ) ) { org.junit.Assert . METHOD_3 ( ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + name ) ) ; } } 
public java.lang.String METHOD_1 ( ) { if ( ( value ( ) ) <= ( ( short ) ( 0 ) ) ) { return ( ( label ( ) ) + CHAR_1 ) + ( value ( ) ) ; } return ( ( label ( ) ) + STRING_1 ) + ( value ( ) ) ; } 
public void METHOD_1 ( ) { final java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_1 , STRING_2 , STRING_2 , STRING_3 , STRING_3 , STRING_4 , STRING_4 , STRING_4 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 } ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i += 2 ) { org.junit.Assert.assertEquals ( TYPE_1 . METHOD_2 ( VAR_1 [ i ] ) , VAR_1 [ ( i + 1 ) ] ) ; } } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client . AccountGroup group ) throws java.io.IOException { try { METHOD_1 ( TYPE_1 . METHOD_2 ( group ) , METHOD_3 ( group ) ) . get ( ) ; } catch ( TYPE_2 | TYPE_3 e ) { throw new java.io.IOException ( e ) ; } } 
private TYPE_1 METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , TYPE_2 c ) throws java.io.IOException { TYPE_3 r = VAR_2 . put ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) , c ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 group ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_3 . METHOD_1 ( repo , TYPE_2 . METHOD_3 ( db , group . getId ( ) ) , null ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_4 ( repo , group . METHOD_5 ( ) ) ; TYPE_4 < TYPE_1 > result = VAR_4 . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( result ) . METHOD_7 ( ) ; return result . get ( ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) throws TYPE_3 { try { return new TYPE_4 ( args . rw , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_5 ) . METHOD_1 ( VAR_1 ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
public java.util.Set < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey n : METHOD_3 ( ) ) { TYPE_3 p = VAR_2 . METHOD_4 ( n . get ( ) ) ; if ( p != null ) { VAR_1 . METHOD_5 ( p . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( new TYPE_2 < java.util.List < TYPE_3 . AccountGroup > > ( this ) { protected void METHOD_4 ( final java.util.List < TYPE_3 . AccountGroup > result ) { VAR_1 . display ( result ) ; VAR_1 . METHOD_5 ( true ) ; } } ) ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ; if ( METHOD_2 ( ) ) { VAR_1 = VAR_2 . get ( ) ; VAR_1 . METHOD_3 ( ctx ) ; return ; } if ( c . currentPatchSetId ( ) . equals ( psId ) ) { c . METHOD_4 ( METHOD_5 ( ctx ) ) ; } } 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( rsrc ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = add ( TYPE_2 . METHOD_2 ( ) , user ) ; TYPE_1 VAR_2 = add ( TYPE_2 . METHOD_3 ( ) , METHOD_4 ( STRING_1 ) ) ; TYPE_3 VAR_3 = VAR_4 . create ( user , VAR_5 ) ; METHOD_7 ( VAR_3 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) , VAR_6 , STRING_2 , ( ( STRING_3 + ( TYPE_4 . METHOD_10 ( VAR_2 . METHOD_9 ( ) ) ) ) + STRING_4 ) , STRING_5 ) ; } 
public synchronized void METHOD_1 ( ) { VAR_1 . info ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ; VAR_3 = VAR_4 ; METHOD_3 ( ) ; VAR_3 = VAR_5 ; if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_1 ( ) ; } } 
public void onSuccess ( TYPE_1 VAR_1 ) { diff = VAR_1 ; VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 . METHOD_1 ( ) ) { if ( ( VAR_3 . METHOD_3 ( VAR_4 ) ) > 0 ) { VAR_5 . onSuccess ( null ) ; } else { METHOD_4 ( VAR_1 , VAR_5 ) ; } } else { VAR_5 . onSuccess ( null ) ; } } 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 ctx ) { change = new com.google.gerrit.reviewdb.client.Change ( TYPE_2 . METHOD_2 ( commit ) , changeId , ctx . getAccountId ( ) , new TYPE_3 . NameKey ( ctx . getProject ( ) , VAR_1 ) , ctx . METHOD_4 ( ) ) ; change . METHOD_5 ( TYPE_4 . METHOD_6 ( status , VAR_2 ) ) ; change . METHOD_7 ( topic ) ; return change ; } 
public TYPE_1 METHOD_1 ( TYPE_2 group , boolean create ) { METHOD_2 ( ) ; for ( TYPE_1 r : VAR_1 ) { if ( TYPE_3 . METHOD_3 ( r , group ) ) { return r ; } } if ( create ) { TYPE_1 r = new TYPE_1 ( group ) ; VAR_1 . add ( r ) ; return r ; } return null ; } 
protected void METHOD_1 ( ) { if ( ( ( ! ( VAR_1 ) ) && ( ( METHOD_2 ( ) ) != null ) ) && ( STRING_1 . equals ( super . METHOD_3 ( ) ) ) ) { VAR_1 = true ; super . METHOD_4 ( METHOD_2 ( ) ) ; if ( ( METHOD_5 ( ) ) != null ) { METHOD_6 ( METHOD_5 ( ) ) ; } } } 
private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( java.util.Set < com.google.gerrit.reviewdb.client.Change . Id > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change . Id id : VAR_1 ) { r . add ( new TYPE_4 ( id ) ) ; } return r ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( VAR_1 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) ; } try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_4 ( VAR_1 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) ; } com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 == null ) { return VAR_3 ; } if ( VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) ; } if ( VAR_1 . equals ( STRING_1 ) ) { return VAR_3 ; } else if ( VAR_1 . equals ( STRING_2 ) ) { return VAR_4 ; } else { throw new com.google.gwtorm.server.OrmException ( ( STRING_3 + VAR_1 ) ) ; } } 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_10 ( ) ) ; } 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { t = t . METHOD_2 ( ) ; if ( t instanceof TYPE_3 ) { ( ( TYPE_3 ) ( t ) ) . bind ( this , VAR_1 ) ; return true ; } return TYPE_4 . METHOD_4 ( this , t ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 , TYPE_4 { if ( VAR_2 ) { try ( TYPE_5 VAR_3 = new TYPE_5 ( VAR_4 ) ) { VAR_3 . METHOD_2 ( false ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; while ( ( VAR_3 . METHOD_4 ( ) ) && ( ! ( METHOD_5 ( ) ) ) ) { METHOD_6 ( VAR_3 ) ; } } } } 
private void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_1 . ChangeInfo VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 event = new TYPE_3 ( change , VAR_1 , VAR_2 ) ; for ( TYPE_4 VAR_4 : VAR_3 ) { try { VAR_4 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_5 . log , e ) ; } } } 
private static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 < TYPE_3 > m ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 ( m . METHOD_2 ( ) ) ; for ( java.lang.String id : VAR_2 ) { VAR_1 . METHOD_3 ( id ) ; } return VAR_1 ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 r = label ( VAR_1 . METHOD_2 ( ) ) ; if ( ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) && ( r . isEmpty ( ) ) ) { return false ; } return r . contains ( VAR_1 . value ( ) ) ; } 
public TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet patchSet ) { TYPE_1 p = new TYPE_1 ( ) ; p . revision = patchSet . getRevision ( ) . get ( ) ; VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) ; p . ref = patchSet . getRefName ( ) ; VAR_2 = METHOD_3 ( patchSet . METHOD_4 ( ) ) ; VAR_3 = ( patchSet . METHOD_5 ( ) . METHOD_6 ( ) ) / INT_1 ; return p ; } 
public static boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , com.google.gerrit.server.query.change.ChangeData cd , TYPE_1 < TYPE_2 > VAR_2 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; com.google.gerrit.reviewdb.client.Account.Id VAR_4 = cd . change ( ) . METHOD_4 ( ) ; for ( TYPE_2 cm : VAR_3 ) { if ( VAR_1 . equals ( cm . METHOD_5 ( ) ) ) { return true ; } else if ( VAR_4 . equals ( cm . METHOD_5 ( ) ) ) { return false ; } } return false ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.client.Account VAR_1 , TYPE_1 VAR_2 ) { try { METHOD_1 ( util . METHOD_2 ( change ) , util . METHOD_3 ( change . getProject ( ) , patchSet ) , util . METHOD_4 ( VAR_1 ) , VAR_2 ) ; } catch ( TYPE_2 | TYPE_3 | java.io.IOException | com.google.gwtorm.server.OrmException e ) { VAR_3 . error ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = METHOD_2 ( ) ; TYPE_1 update = METHOD_3 ( c , VAR_1 ) ; TYPE_2 < java.lang.String > VAR_2 = new TYPE_2 < > ( ) ; VAR_2 . add ( STRING_1 ) ; VAR_2 . add ( STRING_2 ) ; update . METHOD_4 ( VAR_2 ) ; update . commit ( ) ; TYPE_3 notes = METHOD_5 ( c ) ; com.google.common.truth.Truth.assertThat ( notes . METHOD_6 ( ) ) . isEqualTo ( VAR_2 ) ; } 
public TYPE_1 close ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_1 ( ( ( TYPE_3 . contains ( VAR_1 ) ) && ( ! ( TYPE_4 . contains ( VAR_1 ) ) ) ) , STRING_1 , VAR_1 ) ; METHOD_2 ( ) ; VAR_2 . append ( STRING_2 ) . append ( VAR_1 ) . append ( CHAR_1 ) ; return this ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + STRING_2 ; repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) ; java.lang.String VAR_2 = METHOD_2 ( STRING_5 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( STRING_7 + STRING_8 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( ( STRING_9 + STRING_10 ) + STRING_11 ) ) ) ; } 
public PatchSet . Id METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { try { if ( VAR_1 == ( TYPE_1 . METHOD_2 ( ) ) ) { return METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ; try { return METHOD_3 ( db ) ; } finally { db . close ( ) ; } } } finally { synchronized ( VAR_4 ) { VAR_4 . update ( 1 ) ; } } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_3 VAR_2 = VAR_3 . get ( TYPE_4 . create ( VAR_4 , VAR_1 ) ) ; if ( VAR_2 == null ) { return TYPE_1 . METHOD_2 ( ) ; } return get ( VAR_2 . METHOD_4 ( ) ) ; } catch ( java.io.IOException | TYPE_5 e ) { VAR_5 . METHOD_5 ( ( STRING_1 + VAR_1 ) , e ) ; return null ; } } 
private static void METHOD_1 ( TYPE_1 config , TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 . gerrit ( config , VAR_1 ) ; TYPE_4 . sshd ( config , VAR_1 ) ; TYPE_4 . METHOD_2 ( config , VAR_1 ) ; TYPE_4 . user ( config , VAR_1 ) ; TYPE_4 . auth ( config , VAR_1 ) ; TYPE_4 . METHOD_3 ( config , VAR_1 ) ; TYPE_4 . repo ( config , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_1 . add ( STRING_1 ) ; VAR_3 = VAR_1 ; try { project ( ) . METHOD_3 ( input ) ; org.junit.Assert . METHOD_4 ( STRING_2 ) ; } catch ( TYPE_3 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) ; } METHOD_7 ( VAR_2 ) ; } 
TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws TYPE_2 , TYPE_3 , java.io.IOException { TYPE_4 VAR_1 = VAR_2 . METHOD_1 ( name ) ; if ( ( VAR_1 == null ) || ( ! ( VAR_1 . getProject ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) { throw new TYPE_3 ( name ) ; } return new TYPE_1 ( VAR_1 , VAR_3 . get ( ) , VAR_4 . METHOD_4 ( name ) , VAR_5 , VAR_6 ) ; } 
public void METHOD_1 ( final boolean on ) { VAR_1 = on ; if ( VAR_1 ) { VAR_2 . METHOD_2 ( getValue ( ) . VAR_2 ) ; } else { VAR_2 . METHOD_2 ( false ) ; } METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , git ) ; com.google.gerrit.reviewdb.client.PatchSet.Id ps = VAR_1 . to ( STRING_1 ) . METHOD_3 ( ) ; java.util.List < TYPE_2 > VAR_3 = METHOD_4 ( ps ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEmpty ( ) ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 < ? extends TYPE_3 > VAR_2 ) { TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( VAR_4 class ) ; if ( VAR_3 == null ) { throw new TYPE_5 ( STRING_1 ) ; } bind ( TYPE_6 . key ( VAR_1 , VAR_3 . name ( ) , VAR_3 . METHOD_3 ( ) ) ) . to ( VAR_2 ) ; } 
void METHOD_1 ( TYPE_1 e ) { e . METHOD_2 ( ) ; java.lang.String t = TYPE_3 . METHOD_4 ( psId , VAR_1 . path ( ) , VAR_1 . line ( ) ) ; if ( ! ( TYPE_4 . METHOD_5 ( ) ) ) { TYPE_4 . METHOD_6 ( t ) ; } else { TYPE_4 . display ( t ) ; } } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 , TYPE_7 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_8 , TYPE_9 { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; return VAR_4 . create ( VAR_2 . getParentKey ( ) ) . METHOD_1 ( ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { TYPE_2 . Key key = new TYPE_2 . Key ( VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . get ( key , new TYPE_3 ( key , VAR_5 , project , repo , rw ) ) ; } catch ( TYPE_4 e ) { VAR_6 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + project ) , e ) ; return VAR_7 ; } } 
protected void METHOD_1 ( ) { bind ( VAR_4 class ) . METHOD_3 ( VAR_5 ) ; bind ( TYPE_1 . get ( VAR_6 class , TYPE_2 . METHOD_4 ( STRING_1 ) ) ) . METHOD_5 ( VAR_7 class ) . in ( VAR_8 ) ; METHOD_6 ( ) . to ( VAR_7 class ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . Result r = METHOD_3 ( ) ; TYPE_2 revision = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ; TYPE_3 in = new TYPE_3 ( ) ; VAR_2 = VAR_3 . toString ( ) ; in . label ( STRING_1 , INT_1 ) ; VAR_5 . METHOD_5 ( VAR_6 class ) ; VAR_5 . METHOD_6 ( STRING_2 ) ; revision . METHOD_7 ( in ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ; TYPE_2 u = user ( VAR_4 ) ; METHOD_5 ( u ) ; METHOD_5 ( STRING_3 , u ) ; METHOD_5 ( STRING_4 , u ) ; METHOD_5 ( STRING_5 , u ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; TYPE_1 . Result VAR_2 = METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_3 = query ( STRING_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_3 . size ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 . getChangeId ( ) , VAR_3 . get ( 0 ) . changeId ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , VAR_3 . get ( 1 ) . changeId ) ; } 
public void run ( ) { TYPE_1 VAR_2 = cm . METHOD_2 ( ) ; int size = ( ( VAR_2 . METHOD_3 ( ) ) - ( VAR_2 . METHOD_4 ( ) ) ) + 1 ; if ( ( cm . METHOD_5 ( ) ) == size ) { return ; } cm . METHOD_6 ( size ) ; VAR_3 . METHOD_7 ( VAR_4 ) ; } 
public void run ( ) { try { TYPE_1 cm = VAR_1 . create ( ps . getId ( ) . getParentKey ( ) ) ; cm . METHOD_1 ( user . getAccountId ( ) ) ; cm . METHOD_2 ( ps , info ) ; cm . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { VAR_4 . error ( ( STRING_1 + ( ps . getId ( ) ) ) , e ) ; } } 
private void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 VAR_1 ) throws java.io.IOException { METHOD_2 ( res , VAR_1 . type ) ; try ( TYPE_4 VAR_2 = METHOD_3 ( req , res ) ; TYPE_5 out = TYPE_6 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) { VAR_1 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . id ) . METHOD_8 ( out ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_4 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_7 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_4 = VAR_5 . get ( ( ( TYPE_6 ) ( VAR_1 ) ) ) ; if ( ! ( VAR_4 . METHOD_2 ( ) ) ) { VAR_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_6 ) ; return ; } else { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } } 
private void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 event = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_5 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_6 . log , e ) ; } } } 
private TYPE_1 . Result METHOD_1 ( java.lang.String ref , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String changeId ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , git , VAR_1 , VAR_2 , VAR_3 , changeId ) ; return VAR_4 . to ( ref ) ; } 
private java.lang.String METHOD_1 ( final TYPE_1 req ) throws TYPE_2 { java.lang.String VAR_1 = req . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_3 ( TYPE_3 ) ) ) ) { return null ; } return new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( TYPE_3 . length ( ) ) ) , TYPE_5 . METHOD_6 ( req ) ) ; } 
public void METHOD_1 ( TYPE_1 rsrc ) throws TYPE_2 , com.google.gwtorm.server.OrmException { try { VAR_1 . METHOD_1 ( rsrc ) ; VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e . getMessage ( ) ) ; } } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { TYPE_2 . Result result = TYPE_2 . METHOD_2 ( repo , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( result . METHOD_3 ( ) . getStatus ( ) ) . isEqualTo ( INT_1 ) ; return result . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; TYPE_1 . Result VAR_2 = METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_3 = query ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . size ( ) ) . is ( 2 ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . get ( 0 ) . changeId ) . isEqualTo ( VAR_2 . getChangeId ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . get ( 1 ) . changeId ) . isEqualTo ( VAR_1 . getChangeId ( ) ) ; } 
private static java.lang.String METHOD_1 ( final java.lang.String token ) { if ( TYPE_1 . METHOD_2 ( STRING_1 , token ) ) { return TYPE_2 . METHOD_3 ( STRING_2 ) ; } if ( TYPE_1 . METHOD_2 ( STRING_3 , token ) ) { return TYPE_2 . METHOD_3 ( STRING_4 ) ; } if ( TYPE_1 . METHOD_2 ( STRING_5 , token ) ) { return TYPE_2 . METHOD_3 ( STRING_6 ) ; } return null ; } 
public void METHOD_1 ( java.lang.String projectName , TYPE_1 VAR_1 , java.lang.String event ) throws TYPE_2 { METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) ; } 
private static TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId base ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; final TYPE_5 b = VAR_1 . METHOD_3 ( ) ; b . METHOD_4 ( new byte [ 0 ] , VAR_2 , rw . METHOD_5 ( ) , rw . METHOD_6 ( base ) ) ; b . METHOD_8 ( ) ; return VAR_1 ; } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , java.io.IOException { try { VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , TYPE_6 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; } catch ( TYPE_7 | java.io.IOException e ) { throw new TYPE_5 ( e . getMessage ( ) ) ; } return TYPE_1 . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_5 ( ) ) . isEqualTo ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( METHOD_4 ( STRING_2 ) ) ) + STRING_4 ) ) ; } 
public TYPE_1 create ( ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 ) ) { VAR_1 = true ; try ( com.google.gerrit.reviewdb.server.ReviewDb c = METHOD_1 ( ) ) { VAR_2 . create ( c ) ; } catch ( java.io.IOException | TYPE_2 e ) { throw new com.google.gwtorm.server.OrmException ( STRING_1 , e ) ; } } return this ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo VAR_1 = new TYPE_1 . ChangeInfo ( ) ; VAR_1 . project = project . get ( ) ; TYPE_2 r = VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_3 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_5 ( ) ) . contains ( STRING_2 ) ; } 
public boolean METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return true ; } if ( ! ( VAR_2 . METHOD_1 ( ) ) ) { return false ; } com.google.gerrit.reviewdb.client.Project.NameKey r = VAR_2 . METHOD_2 ( ) ; if ( r . get ( ) . METHOD_3 ( VAR_3 ) ) { VAR_1 = r ; return true ; } VAR_2 = VAR_4 . Collections < com.google.gerrit.reviewdb.client.Project.NameKey > METHOD_4 ( ) . METHOD_5 ( ) ; return false ; } 
TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( org.eclipse.jgit.lib.Repository repo , com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 , int VAR_2 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( VAR_1 . size ( ) ) > VAR_2 ) { return METHOD_2 ( repo , db , branch , VAR_1 ) ; } return METHOD_3 ( branch , VAR_1 ) ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = id ; java.util.List < TYPE_8 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } throw new TYPE_9 ( ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( STRING_1 ) ; try { TYPE_3 . METHOD_4 ( VAR_1 ) ; TYPE_3 . METHOD_5 ( VAR_2 ) ; final TYPE_4 VAR_3 = new TYPE_4 ( VAR_1 ) ; org.junit.Assert . METHOD_6 ( VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_5 ) ; } finally { TYPE_3 . delete ( VAR_2 ) ; TYPE_3 . delete ( VAR_1 ) ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_2 > VAR_1 = ( ( java.util.Map < java.lang.String , TYPE_2 > ) ( VAR_2 . apply ( new TYPE_3 ( ) ) ) ) ; for ( TYPE_4 < java.lang.String , TYPE_2 > VAR_3 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_4 = VAR_3 . getValue ( ) ; VAR_4 . name = VAR_3 . getKey ( ) ; } return VAR_1 . values ( ) ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = VAR_1 . change ( ) ; if ( c == null ) { return false ; } com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 = c . currentPatchSetId ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( ) . get ( VAR_2 ) ) { if ( ( p . getValue ( ) ) != 0 ) { return true ; } } return false ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.io.IOException { java.lang.String s = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ; if ( ( s != null ) && ( ! ( s . isEmpty ( ) ) ) ) { try { VAR_3 = TYPE_2 . METHOD_3 ( s ) ; } catch ( TYPE_3 err ) { VAR_3 = INT_1 ; } } super . METHOD_1 ( VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) . append ( TYPE_2 . patchSet ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . commit ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_7 ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_8 ( ) ) . METHOD_6 ( ) . METHOD_9 ( ) ; } 
public TYPE_1 . Change update ( TYPE_1 . Change change ) { if ( change . getStatus ( ) . METHOD_1 ( ) ) { if ( ( VAR_1 ) != null ) { change . METHOD_2 ( VAR_1 ) ; } change . METHOD_3 ( VAR_2 ) ; change . METHOD_4 ( result . info ) ; TYPE_2 . METHOD_5 ( change ) ; return change ; } else { return null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_6 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_7 , VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( config . METHOD_3 ( ) ) ) { TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( VAR_5 . get ( ) , VAR_6 ) ) ; VAR_7 . set ( VAR_8 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 ) . METHOD_5 ( INT_1 , VAR_9 ) ) ; } } 
public void METHOD_1 ( TYPE_1 req , TYPE_2 rsp , TYPE_3 VAR_1 ) throws java.io.IOException , TYPE_4 { TYPE_5 s = ( user . get ( ) . METHOD_2 ( ) ) ? VAR_2 . get ( ) : null ; METHOD_3 ( ( ( TYPE_7 ) ( req ) ) , ( ( TYPE_8 . HttpServletResponse ) ( rsp ) ) , s ) ; VAR_1 . METHOD_1 ( req , rsp ) ; } 
public AccountGroup . Id METHOD_1 ( ) throws TYPE_1 , TYPE_2 , com.google.gwtorm.server.OrmException { final TYPE_3 VAR_1 = VAR_2 . create ( ) ; final com.google.gerrit.reviewdb.client.Account.Id me = user . getAccountId ( ) ; return VAR_1 . METHOD_2 ( VAR_3 , null , VAR_4 , null , java.util.Collections.singleton ( me ) , null ) . getId ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 ctl , com.google.gerrit.reviewdb.client.PatchSet in ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_4 . METHOD_3 ( ctl . getProject ( ) . METHOD_4 ( ) ) ) { TYPE_1 VAR_5 = METHOD_5 ( ctl , VAR_6 . create ( db . get ( ) , ctl ) , in , repo , true ) ; VAR_1 . METHOD_6 ( ) ; return VAR_5 ; } } 
public boolean METHOD_1 ( ) { if ( METHOD_2 ( VAR_1 , ( ( short ) ( 1 ) ) ) ) { return true ; } if ( ( ! ( getRefName ( ) . equals ( TYPE_1 . METHOD_3 ( 0 , ( ( TYPE_1 . length ( ) ) - 1 ) ) ) ) ) && ( METHOD_4 ( ) . METHOD_1 ( ) ) ) { return true ; } return false ; } 
public TYPE_1 < ? > apply ( TYPE_2 project , TYPE_3 input ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( ( input == null ) || ( ( VAR_1 ) == null ) ) || ( VAR_1 . isEmpty ( ) ) ) { throw new TYPE_5 ( STRING_1 ) ; } VAR_2 . create ( project ) . refs ( VAR_1 ) . delete ( ) ; return TYPE_1 . METHOD_1 ( ) ; } 
private void plugins ( TYPE_1 w ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 u : plugins ) { VAR_1 . add ( java.lang.String.format ( STRING_1 , u . METHOD_2 ( ) , u . METHOD_3 ( ) ) ) ; } if ( ! ( VAR_1 . isEmpty ( ) ) ) { w . METHOD_4 ( ( ( VAR_2 ) + STRING_2 ) ) ; METHOD_5 ( VAR_1 , w ) ; w . METHOD_4 ( STRING_3 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( config . METHOD_5 ( ) ) . METHOD_4 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( config . METHOD_6 ( ) ) . METHOD_4 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( config . METHOD_7 ( ) ) . METHOD_4 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( config . METHOD_8 ( ) ) . METHOD_4 ( VAR_2 ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , TYPE_2 ... VAR_2 ) { TYPE_3 < TYPE_2 > VAR_3 = new TYPE_3 ( METHOD_2 ( VAR_1 ) ) ; VAR_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ; return new TYPE_5 ( VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 event ) { if ( event instanceof TYPE_2 ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event ) ) ; VAR_2 . put ( VAR_3 , VAR_4 ) ; } else if ( event instanceof TYPE_3 ) { TYPE_3 e = ( ( TYPE_3 ) ( event ) ) ; TYPE_4 r = VAR_5 ; VAR_6 . put ( ( ( ( r . project ) + STRING_1 ) + ( VAR_7 ) ) , r ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { org.junit.Assert.assertEquals ( 0 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( 0 ) ) ) ) ; org.junit.Assert.assertEquals ( INT_1 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( INT_1 ) ) ) ) ; org.junit.Assert.assertEquals ( INT_2 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( ( INT_3 | INT_4 ) , 1 ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; org.junit.Assert . METHOD_3 ( VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) , VAR_5 ) ; } 
private static TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > in ) { TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSet > out = new TYPE_2 ( new TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet.Id > ( ) { public int METHOD_2 ( com.google.gerrit.reviewdb.client.PatchSet.Id a , com.google.gerrit.reviewdb.client.PatchSet.Id b ) { return TYPE_4 . METHOD_3 ( a , b ) . result ( ) ; } } ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : in ) { out . put ( ps . getId ( ) , ps ) ; } return out ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , VAR_1 , VAR_2 , STRING_1 ) ; org.eclipse.jgit.lib.ObjectId id = repo . branch ( STRING_2 ) . commit ( ) . create ( ) ; TYPE_2 VAR_3 = METHOD_3 ( ) ; org.eclipse.jgit.revwalk.RevWalk rw = repo . METHOD_4 ( ) ; org.junit.Assert . METHOD_5 ( VAR_3 . METHOD_6 ( db , rw , rw . parseCommit ( id ) ) ) ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( psId ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; TYPE_3 . METHOD_4 ( change ) ; ctx . METHOD_5 ( ) . changes ( ) . update ( java.util.Collections.singleton ( change ) ) ; } } 
static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
private void METHOD_1 ( int id , boolean VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_2 VAR_2 = new TYPE_2 ( id , VAR_1 ) ; if ( VAR_3 . add ( VAR_2 ) ) { VAR_4 . METHOD_3 ( VAR_2 ) ; } } } 
void METHOD_1 ( int VAR_1 ) { java.lang.String path = VAR_2 . get ( VAR_1 ) . path ( ) ; TYPE_1 . delete ( project . get ( ) , VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_2 ( project , VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_3 ( TYPE_6 VAR_4 ) { } } ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( ) ; for ( final TYPE_2 c : VAR_1 ) { if ( c . METHOD_2 ( ) ) { r . METHOD_3 ( c . METHOD_1 ( ) ) ; } else { r . add ( c ) ; } } return r ; } 
private static byte [ ] METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { byte [ ] data = new byte [ VAR_2 . METHOD_2 ( ) . get ( ) . METHOD_3 ( ) ] ; try ( TYPE_3 in = VAR_1 . METHOD_4 ( VAR_2 ) ) { TYPE_4 . METHOD_5 ( in , data , 0 , data . length ) ; } return data ; } 
public TYPE_1 format ( TYPE_1 out , TYPE_3 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_4 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ; return format ( out , VAR_1 , cd , VAR_2 . METHOD_1 ( db . get ( ) , cd . notes ( ) , VAR_1 . user ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; try { org.junit.Assert . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; org.junit.Assert . METHOD_3 ( VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_4 ) ; } finally { VAR_1 . delete ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_3 = VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_3 ( VAR_2 . get ( ) ) . get ( ) ; TYPE_3 . METHOD_4 ( VAR_6 . get ( VAR_2 ) . getProject ( ) , VAR_3 ) ; } 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t instanceof TYPE_3 ) return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; if ( ! ( t instanceof TYPE_4 ) ) return false ; return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_2 class ) ; bind ( VAR_3 class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) ; TYPE_1 . METHOD_2 ( binder ( ) , VAR_6 class ) ; TYPE_1 . bind ( binder ( ) , VAR_6 class ) . to ( VAR_7 class ) ; } 
TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 rw , TYPE_6 VAR_4 , TYPE_7 VAR_5 , TYPE_8 VAR_6 , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_7 , java.util.Set < TYPE_9 > VAR_8 , TYPE_10 VAR_9 , TYPE_11 VAR_10 , TYPE_12 < TYPE_13 , com.google.gerrit.reviewdb.client.Account.Id > VAR_11 , TYPE_14 VAR_12 , boolean VAR_13 ) ; 
void METHOD_1 ( TYPE_1 e ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( 0 <= VAR_1 ) { java.lang.String n = VAR_2 . getValue ( VAR_1 ) ; VAR_2 . METHOD_3 ( false ) ; TYPE_2 . display ( TYPE_3 . METHOD_4 ( changeId , n ) ) ; } } 
public com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; if ( c == null ) { return null ; } for ( com.google.gerrit.reviewdb.client.PatchSet p : patchSets ( ) ) { if ( p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ) { VAR_1 = p ; return p ; } } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( VAR_2 . get ( ) ) ) + STRING_2 ) , METHOD_2 ( project . get ( ) ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_3 ) ; r . METHOD_4 ( ) ; } 
protected void METHOD_1 ( ) { rpc ( VAR_1 class ) ; rpc ( VAR_2 class ) ; rpc ( VAR_3 class ) ; rpc ( VAR_4 class ) ; rpc ( VAR_6 class ) ; rpc ( VAR_7 class ) ; rpc ( VAR_8 class ) ; rpc ( VAR_9 class ) ; install ( new TYPE_1 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; java.lang.String cmd = STRING_1 + VAR_2 ; TYPE_3 VAR_3 = TYPE_4 . METHOD_4 ( ) ; try { METHOD_5 ( VAR_1 , cmd , VAR_3 ) ; } catch ( java.io.IOException e ) { VAR_4 . error ( java.lang.String.format ( ( STRING_2 + ( ( STRING_3 + STRING_4 ) + STRING_5 ) ) , VAR_1 , e , cmd , VAR_3 ) , e ) ; } } 
private boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) { return true ; } try { return ! ( VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) ; } catch ( TYPE_3 e ) { VAR_3 . METHOD_4 ( STRING_1 , e ) ; return true ; } } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { c . METHOD_1 ( VAR_1 ) ; c . METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_3 . equals ( c . currentPatchSetId ( ) ) ) ) { try { c . METHOD_3 ( VAR_4 . get ( db , notes , VAR_3 ) ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_4 ( ( STRING_1 + VAR_3 ) , VAR_5 ) ; } } TYPE_2 . METHOD_5 ( c ) ; return c ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws TYPE_3 { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ; try { return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } 
private static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project VAR_1 ) { final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; if ( VAR_2 . METHOD_6 ( TYPE_3 ) ) { return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = new java.util.ArrayList < > ( ) ; VAR_2 = this . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 = VAR_2 . METHOD_5 ( 0 , ( ( VAR_2 . length ( ) ) - INT_1 ) ) ; VAR_3 = TYPE_2 . METHOD_6 ( VAR_2 , VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_3 . ProjectConfig config , TYPE_4 VAR_2 , boolean VAR_3 ) throws TYPE_5 , TYPE_6 , java.io.IOException , TYPE_7 { org.eclipse.jgit.revwalk.RevCommit commit = config . commit ( VAR_2 ) ; VAR_4 . METHOD_2 ( config . getProject ( ) . METHOD_3 ( ) , VAR_5 , base , commit . getId ( ) , user . METHOD_5 ( ) . METHOD_6 ( ) ) ; VAR_6 . METHOD_7 ( config . getProject ( ) ) ; return VAR_7 . create ( projectName ) . METHOD_8 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = group ( STRING_1 ) ; VAR_2 = group ( STRING_2 ) ; VAR_3 = group ( STRING_3 ) ; VAR_5 = user ( STRING_4 , STRING_5 , VAR_1 ) ; VAR_6 = user ( STRING_6 , STRING_7 , VAR_2 ) ; VAR_7 = user ( STRING_8 , STRING_9 , VAR_1 , VAR_2 ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > VAR_2 ) throws TYPE_3 { if ( ! ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ) { VAR_2 = VAR_2 . METHOD_4 ( new TYPE_5 ( VAR_3 ) ) ; } else if ( ! ( TYPE_4 . METHOD_3 ( VAR_4 ) ) ) { VAR_2 = VAR_2 . METHOD_4 ( new TYPE_6 ( VAR_4 ) ) ; } return VAR_2 ; } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey n , java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( TYPE_1 . equals ( VAR_1 ) ) ) { return STRING_1 + ( n . toString ( ) ) ; } return ( ( STRING_1 + ( n . toString ( ) ) ) + STRING_2 ) + VAR_1 ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList ( values . size ( ) ) ; for ( TYPE_2 VAR_2 : values ) { VAR_1 . add ( TYPE_1 . METHOD_2 ( VAR_2 . getValue ( ) ) ) ; } java.util.Collections . METHOD_3 ( VAR_1 ) ; java.util.Collections . METHOD_4 ( VAR_1 ) ; } return VAR_1 ; } 
private void METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > projects ) throws TYPE_2 { for ( com.google.gerrit.reviewdb.client.Project.NameKey project : projects ) { try { VAR_1 . METHOD_2 ( project ) ; } catch ( TYPE_3 VAR_2 ) { METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . project ( ) ) ) + STRING_2 ) + STRING_3 ) ) ; METHOD_4 ( VAR_2 . project ( ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_2 ( ( STRING_4 + project ) , e ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : case VAR_3 : case VAR_4 : throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ; default : this . revision = TYPE_4 . METHOD_2 ( revision ) ; return this ; } } 
public int METHOD_1 ( TYPE_1 key , TYPE_2 value ) { int size = ( ( ( ( ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) + INT_1 ) + INT_3 ) + INT_1 ) + INT_3 ; for ( java.lang.String p : value . METHOD_2 ( ) ) { size += ( ( ( ( INT_1 + INT_3 ) + ( INT_2 * INT_2 ) ) + INT_1 ) + INT_3 ) + ( ( p . length ( ) ) * 2 ) ; } return size ; } 
void METHOD_1 ( final TYPE_1 . Account result ) { final TYPE_1 . Account me = TYPE_2 . METHOD_2 ( ) ; me . METHOD_3 ( result . METHOD_4 ( ) ) ; me . METHOD_5 ( result . METHOD_6 ( ) ) ; TYPE_2 . METHOD_9 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . display ( me ) ; } } 
protected void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 . OrmException { if ( VAR_1 != null ) { for ( TYPE_3 < TYPE_1 > VAR_3 : TYPE_4 . METHOD_2 ( ) ) { if ( VAR_3 . METHOD_3 ( VAR_1 ) ) { final byte [ ] VAR_4 = METHOD_4 ( VAR_3 , VAR_1 ) ; if ( ! ( METHOD_5 ( VAR_3 , VAR_2 , VAR_4 ) ) ) { db . delete ( VAR_4 ) ; } } } } } 
Project . NameKey projectName ( org.eclipse.jgit.lib.Repository repo ) { TYPE_1 VAR_1 = repo . METHOD_1 ( ) . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( VAR_2 ) ) { java.lang.String p = VAR_2 . METHOD_4 ( VAR_1 ) . toString ( ) ; java.lang.String n = p . METHOD_5 ( 0 , ( ( p . length ( ) ) - ( STRING_1 . length ( ) ) ) ) ; return new com.google.gerrit.reviewdb.client.Project.NameKey ( n ) ; } VAR_3 . METHOD_6 ( ( STRING_2 + VAR_1 ) ) ; return null ; } 
public TYPE_1 METHOD_1 ( TYPE_2 project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { return VAR_3 . get ( new TYPE_3 . Key ( repo , VAR_1 , VAR_2 , VAR_4 ) ) ; } catch ( TYPE_4 e ) { VAR_5 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) ; return VAR_6 ; } } 
public void run ( ) { int VAR_2 = ( TYPE_1 . METHOD_2 ( ) ) - ( ( TYPE_2 . METHOD_3 ( ) ) + INT_1 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( diff ) ; VAR_5 . METHOD_5 ( VAR_6 , VAR_1 . METHOD_6 ( ) ) ; VAR_7 . METHOD_5 ( VAR_1 . METHOD_7 ( ) , diff ) ; } 
private void METHOD_1 ( ) { if ( ( ( VAR_1 ) == 0 ) && ( ( VAR_3 ) != null ) ) { VAR_2 . METHOD_2 ( VAR_3 . get ( 0 ) ) ; METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; VAR_1 = VAR_2 . METHOD_5 ( ) ; VAR_4 = VAR_2 . METHOD_6 ( ) ; METHOD_3 ( ) . METHOD_7 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_8 ( ) . METHOD_9 ( ( ( VAR_1 ) * ( VAR_3 . size ( ) ) ) , VAR_5 ) ; } } 
private void METHOD_1 ( final int row ) { for ( final TYPE_1 s : VAR_1 ) { if ( row < ( VAR_2 ) ) { ( VAR_2 ) -- ; } if ( row < ( VAR_3 ) ) { ( VAR_3 ) -- ; } } table . METHOD_1 ( row ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) { try { for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . METHOD_2 ( VAR_1 ) ) { METHOD_3 ( cd . change ( ) ) ; } } catch ( TYPE_1 | java.io.IOException | com.google.gwtorm.server.OrmException e ) { METHOD_4 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( VAR_2 . get ( ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 ) ; try { if ( VAR_3 . METHOD_3 ( ) ) { return VAR_3 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException VAR_5 ) { throw new TYPE_2 ( STRING_2 ) ; } } 
public TYPE_1 format ( TYPE_1 out , TYPE_2 ctl ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctl . getChange ( ) . currentPatchSetId ( ) ; return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , ctl , psId , VAR_3 ) ) ; } 
void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 . get ( ) ) ) ; this . VAR_3 . METHOD_3 ( ) ; this . VAR_3 . add ( VAR_1 ) ; } METHOD_4 ( ) ; } 
public int METHOD_1 ( ) { int VAR_1 = 0 ; if ( ( VAR_2 ) != null ) { for ( TYPE_1 r : VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , r ) ) ; } VAR_1 = VAR_2 . METHOD_4 ( ) . size ( ) ; VAR_2 = null ; } return VAR_1 ; } 
public < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_1 out , java.lang.String path , byte [ ] data ) throws java.io.IOException { TYPE_3 < TYPE_1 > VAR_1 = ( ( TYPE_3 < TYPE_1 > ) ( format ) ) ; VAR_1 . METHOD_1 ( out , null , path , VAR_2 , new TYPE_4 ( VAR_3 , data ) ) ; } 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) throws java.io.IOException { if ( err != null ) { TYPE_5 . METHOD_2 ( req , err ) ; } TYPE_6 . METHOD_3 ( req , res , null , null , c ) ; res . METHOD_4 ( VAR_1 ) ; TYPE_6 . METHOD_5 ( req , res , msg ) ; } 
private boolean METHOD_1 ( ) { if ( VAR_1 . get ( ) . METHOD_2 ( ) ) { return ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_4 ) ) ) || ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( VAR_5 ) ) ; } else { return false ; } } 
public boolean METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , java.io.IOException , TYPE_2 , TYPE_3 { final TYPE_4 ctx = VAR_2 . METHOD_2 ( ) ; try { TYPE_5 schema = VAR_2 . METHOD_3 ( ctx ) ; VAR_2 . METHOD_4 ( schema , ctx , VAR_1 , false ) ; return true ; } catch ( TYPE_6 e ) { return false ; } finally { VAR_2 . close ( ctx ) ; } } 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 , ( ( edit ) != null ) ) ; VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ; } 
private void METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > n = new TYPE_2 ( VAR_3 ) ; n . add ( VAR_1 ) ; VAR_3 = java.util.Collections . METHOD_3 ( n ) ; } finally { VAR_2 . METHOD_4 ( ) ; } } 
static TYPE_1 METHOD_1 ( final TYPE_2 ctx ) throws TYPE_3 { final TYPE_7 VAR_2 = ctx . METHOD_2 ( STRING_1 ) ; TYPE_8 VAR_3 = VAR_2 . get ( STRING_2 ) ; if ( ( VAR_3 != null ) && ( VAR_3 . contains ( STRING_3 ) ) ) { return new TYPE_9 ( VAR_2 ) ; } return VAR_4 ; } 
public void run ( ) { try { final TYPE_1 cm ; cm = VAR_1 . create ( change ) ; cm . METHOD_1 ( me ) ; cm . METHOD_2 ( ps , info ) ; cm . METHOD_3 ( reviewers ) ; cm . METHOD_4 ( VAR_2 ) ; cm . METHOD_5 ( ) ; } catch ( java.lang.Exception e ) { VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; if ( ( view ) != null ) { view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) ; } } 
public TYPE_1 < TYPE_2 . NameKey , com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_3 < TYPE_2 . NameKey , com.google.gerrit.server.query.change.ChangeData > VAR_1 = TYPE_4 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . values ( ) ) { VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd ) ; } return VAR_1 ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 , final boolean VAR_3 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; final TYPE_2 < ? extends TYPE_1 > VAR_4 = VAR_1 . METHOD_3 ( ) ; int i = 0 ; for ( final TYPE_1 VAR_5 : VAR_4 ) { final boolean VAR_6 = ( ++ i ) == ( VAR_4 . size ( ) ) ; METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 cfg ) { return TYPE_1 . create ( cfg . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_3 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_4 , 0 ) ) ; } 
public static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < > ( INT_1 ) ; for ( final com.google.gerrit.reviewdb.client.Change . Status e : TYPE_3 . values ( ) ) { if ( e . METHOD_2 ( ) ) { r . add ( new TYPE_4 ( e ) ) ; } } return ( r . size ( ) ) == 1 ? r . get ( 0 ) : METHOD_3 ( r ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , TYPE_1 ... VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( db , VAR_4 . create ( db , c . getProject ( ) , c . getId ( ) ) ) . values ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { final TYPE_2 r = VAR_1 . METHOD_2 ( ) ; assert r instanceof TYPE_3 : STRING_1 + r ; final TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ( ( TYPE_3 ) ( r ) ) ) ; if ( VAR_2 == null ) { return null ; } return TYPE_4 . METHOD_4 ( VAR_3 , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_2 . Result change = METHOD_3 ( git ) ; submit ( change . getChangeId ( ) ) ; METHOD_4 ( git , false ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( 0 ) ) . isEqualTo ( change . METHOD_7 ( ) . METHOD_6 ( 0 ) ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) { return METHOD_1 ( repo , changeId ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } 
private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_2 ) { return ( id . get ( ) ) == 0 ? TYPE_2 . METHOD_2 ( id . getParentKey ( ) , VAR_2 ) : TYPE_3 . revision ( id ) . view ( STRING_1 ) . id ( VAR_2 ) . view ( STRING_2 ) ; } 
public com.google.gerrit.reviewdb.client.Change submit ( TYPE_1 rsrc , TYPE_2 VAR_1 , boolean VAR_2 ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { java.lang.String topic = rsrc . getChange ( ) . METHOD_1 ( ) ; if ( ( VAR_3 ) && ( ! ( TYPE_4 . METHOD_2 ( topic ) ) ) ) { return METHOD_3 ( rsrc , VAR_1 , VAR_2 , topic ) ; } else { return METHOD_5 ( rsrc , VAR_1 , VAR_2 ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 , TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ; cd . METHOD_2 ( user ) ; if ( TYPE_5 . METHOD_3 ( cfg ) ) { return METHOD_4 ( db , new TYPE_1 ( cd , db , null ) , user ) ; } return METHOD_5 ( db , new TYPE_1 ( cd , db , null ) , user ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 , final boolean VAR_3 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; final TYPE_2 < ? extends TYPE_1 > VAR_4 = VAR_1 . METHOD_3 ( ) ; int i = 0 ; final int size = VAR_4 . size ( ) ; for ( final TYPE_1 VAR_5 : VAR_4 ) { final boolean VAR_6 = ( ++ i ) == size ; METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 VAR_1 = db . METHOD_2 ( ) ; final TYPE_2 VAR_2 = db . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_9 , VAR_10 ) ; assertEquals ( VAR_11 , VAR_12 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; VAR_3 = TYPE_2 . METHOD_4 ( cfg . METHOD_5 ( ) . get ( STRING_1 ) ) ; VAR_3 . METHOD_11 ( ( ( short ) ( - 1 ) ) ) ; METHOD_12 ( cfg ) ; } 
private void METHOD_1 ( java.lang.String error , boolean VAR_1 , java.lang.Exception e ) { if ( VAR_1 ) { this . VAR_1 . update ( 1 ) ; } if ( e != null ) { VAR_2 . METHOD_2 ( error , e ) ; } else { VAR_2 . METHOD_2 ( error ) ; } VAR_3 . METHOD_3 ( error ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 git = METHOD_2 ( false ) ; TYPE_4 . Result change = METHOD_3 ( git ) ; submit ( change . getChangeId ( ) ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . getId ( ) ) . isEqualTo ( change . METHOD_4 ( ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException , TYPE_3 , TYPE_4 { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 != null ) { TYPE_5 b = VAR_2 . METHOD_3 ( ) ; b . METHOD_4 ( new byte [ 0 ] , VAR_3 , VAR_4 , VAR_1 ) ; b . METHOD_5 ( ) ; } return VAR_2 ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 ) { for ( TYPE_2 . ReceiveCommand cmd : VAR_1 . METHOD_2 ( ) ) { if ( ( cmd . METHOD_3 ( ) ) == ( VAR_2 ) ) { METHOD_1 ( project , cmd ) ; } } } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { final TYPE_4 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ; if ( VAR_1 == null ) { return false ; } final TYPE_5 VAR_3 = VAR_1 . METHOD_2 ( user ) ; return VAR_3 . METHOD_2 ( change ) . METHOD_3 ( db ) ; } 
private void METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) { com.google.common.truth.Truth.assertThat ( repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) . isEqualTo ( VAR_1 ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 user ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) != null ) { throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; } try { if ( ( change ) != null ) { VAR_1 = VAR_2 . METHOD_3 ( db , change , user ) ; } else { VAR_1 = VAR_2 . METHOD_3 ( db , project , VAR_3 , user ) ; } } catch ( TYPE_4 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_1 ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . get ( VAR_1 ) ; org.eclipse.jgit.lib.Repository VAR_3 = TYPE_5 . get ( VAR_1 ) ; TYPE_6 VAR_4 = ( ( TYPE_6 ) ( VAR_5 ) ) ; try { return new TYPE_1 ( VAR_6 , db , VAR_3 , VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_7 ( e . getMessage ( ) ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { java.lang.String b = ( ( base ) != null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ; java.lang.String VAR_2 = java.lang.String . METHOD_2 ( revision . get ( ) ) ; TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 , false ) ) ; } 
public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; if ( c == null ) { return java.util.Collections . METHOD_2 ( ) ; } VAR_1 = new TYPE_1 < > ( ) ; for ( TYPE_2 VAR_2 : VAR_3 . METHOD_3 ( db , notes ( ) ) ) { VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; TYPE_2 < TYPE_3 > edit = VAR_3 . METHOD_4 ( change ) ; try { VAR_4 . METHOD_5 ( edit . get ( ) . getChange ( ) . getProject ( ) , edit . get ( ) . getRevision ( ) . get ( ) , VAR_5 ) ; org.junit.Assert . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_4 VAR_6 ) { } } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) ) ) { VAR_2 = new TYPE_1 ( args , change , VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; } } 
private java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) throws java.lang.Exception { final TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; try { final TYPE_1 VAR_3 = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( 0 , METHOD_4 ( VAR_4 , VAR_3 , VAR_2 . METHOD_5 ( ) ) ) ; return METHOD_6 ( VAR_2 ) ; } finally { VAR_2 . delete ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) ; METHOD_4 ( user ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ; METHOD_2 ( STRING_2 ) ; org.junit.Assert . METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ; METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ; } 
TYPE_1 METHOD_1 ( final TYPE_2 . Key key , final TYPE_1 VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_2 = VAR_1 . getAccountId ( ) ; final boolean VAR_3 = VAR_1 . METHOD_2 ( ) ; final TYPE_3 . Key VAR_4 = VAR_1 . METHOD_3 ( ) ; return METHOD_1 ( key , VAR_2 , VAR_3 , VAR_4 ) ; } 
public TYPE_1 get ( ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_1 ( notes . getChange ( ) . getProject ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3 . METHOD_2 ( VAR_2 , notes , patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_2 . METHOD_3 ( e ) ; } } 
public TYPE_1 diff ( java.lang.String base ) throws TYPE_2 { try { return VAR_1 . METHOD_1 ( base ) . apply ( file ) . value ( ) ; } catch ( java.io.IOException | TYPE_3 | com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public TYPE_1 apply ( TYPE_2 VAR_1 ) throws TYPE_3 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client . AccountGroup group = VAR_1 . METHOD_1 ( ) ; if ( group == null ) { throw new TYPE_3 ( ) ; } try { TYPE_4 c = VAR_2 . METHOD_2 ( group . METHOD_3 ( ) ) ; return VAR_3 . format ( c . METHOD_5 ( ) ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( ) ; } } 
public void run ( ) { ui . METHOD_1 ( STRING_1 ) ; METHOD_2 ( ) ; if ( ( auth . METHOD_3 ( STRING_2 ) ) == null ) { auth . METHOD_4 ( STRING_2 , TYPE_1 . METHOD_5 ( ) ) ; } METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_2 u = util . user ( VAR_1 , STRING_2 , VAR_3 ) ; TYPE_2 d = util . user ( VAR_1 , STRING_3 , VAR_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 , u . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) ; org.junit.Assert . METHOD_6 ( STRING_6 , d . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) ; } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; if ( ( view ) != null ) { view . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) ; } } 
private void METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 , TYPE_3 VAR_2 ) { for ( java.lang.String name : TYPE_4 . METHOD_4 ( ) ) { if ( ( METHOD_5 ( name ) ) && ( VAR_2 . METHOD_6 ( name ) ) ) { VAR_1 . put ( name , new TYPE_5 ( VAR_2 . METHOD_7 ( name ) ) ) ; } } } 
private static synchronized void METHOD_1 ( byte [ ] VAR_1 , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_2 ) == 0 ) { VAR_3 = db . METHOD_2 ( ) ; VAR_2 = VAR_4 ; } TYPE_3 . METHOD_3 ( VAR_1 , 0 , VAR_3 ) ; TYPE_3 . METHOD_3 ( VAR_1 , INT_1 , ( ( VAR_2 ) -- ) ) ; } 
public TYPE_1 get ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws TYPE_2 { com.google.gerrit.reviewdb.client.Project.NameKey project = change . getProject ( ) ; if ( ( patchSet . getRevision ( ) ) == null ) { throw new TYPE_2 ( ( STRING_1 + ( patchSet . getId ( ) ) ) ) ; } org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId . METHOD_1 ( patchSet . getRevision ( ) . get ( ) ) ; TYPE_3 VAR_1 = VAR_2 ; return get ( new TYPE_4 ( null , b , VAR_1 ) , project ) ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 < java.lang.String , TYPE_1 > ( ) ; if ( ( VAR_2 ) != null ) { for ( TYPE_1 t : VAR_2 ) { if ( ( t . getId ( ) ) != null ) { VAR_1 . put ( t . getId ( ) , t ) ; } } } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_3 ( ) ; TYPE_2 . Result change = METHOD_4 ( git ) ; submit ( change . getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . getId ( ) ) . isEqualTo ( change . METHOD_5 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_6 ( 0 ) ) . isEqualTo ( VAR_1 ) ; METHOD_7 ( change . getChangeId ( ) , 1 ) ; } 
public Account . Id METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { try { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) { TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ; return VAR_2 != null ? VAR_2 . getAccountId ( ) : null ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.server.query.change.ChangeData > changes = VAR_1 . get ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ; METHOD_4 ( changes ) ; db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) ; } 
private java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Account account ) { if ( account != null ) { java.lang.String result = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ; if ( ( account . METHOD_3 ( ) ) != null ) { result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 ; } return result ; } return VAR_1 ; } 
public TYPE_1 create ( TYPE_1 . Id id , java.lang.String VAR_1 ) throws TYPE_2 { try { VAR_1 = TYPE_3 . METHOD_1 ( VAR_1 ) ; TYPE_1 key = new TYPE_1 ( id , VAR_1 ) ; TYPE_3 . METHOD_2 ( key ) ; return key ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( ) ; } catch ( TYPE_5 e ) { throw new TYPE_2 ( ) ; } catch ( TYPE_6 e ) { VAR_2 . error ( STRING_1 , e ) ; throw new TYPE_2 ( ) ; } } 
protected void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event ) throws com.google.gwtorm.server.OrmException { for ( TYPE_2 VAR_1 : VAR_2 ) { if ( METHOD_2 ( change , VAR_1 . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( event ) ; } } METHOD_5 ( event ) ; } 
public java.lang.String METHOD_1 ( ) { TYPE_1 user = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( user . METHOD_6 ( ) . contains ( getId ( ) ) ) ; METHOD_7 ( VAR_2 , user ) ; return VAR_2 . METHOD_8 ( ) . toString ( ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 , int n , boolean e ) { TYPE_1 api = TYPE_2 . change ( project , id ) . view ( STRING_1 ) . METHOD_2 ( STRING_2 , n ) . METHOD_2 ( STRING_3 , e ) ; if ( VAR_1 != null ) { api . METHOD_2 ( STRING_4 , VAR_1 ) ; } return api ; } 
public void METHOD_1 ( final TYPE_1 < java.util.List < TYPE_2 > > VAR_1 ) { try { final TYPE_3 . ReviewDb db = server . METHOD_2 ( ) . METHOD_3 ( ) ; try { VAR_1 . onSuccess ( db . METHOD_1 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; } finally { db . close ( ) ; } } catch ( TYPE_5 . OrmException e ) { VAR_1 . METHOD_6 ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( change , METHOD_3 ( changeId ) ) ) . isEqualTo ( VAR_2 ) ; TYPE_1 < TYPE_2 > edit = VAR_3 . METHOD_4 ( change ) ; VAR_7 . METHOD_7 ( VAR_8 class ) ; VAR_7 . METHOD_8 ( STRING_1 ) ; VAR_1 . METHOD_9 ( edit . get ( ) , edit . get ( ) . METHOD_10 ( ) . METHOD_11 ( ) ) ; } 
void METHOD_1 ( ) throws TYPE_1 . OrmException , java.io.IOException { if ( VAR_1 ) { VAR_4 . run ( new TYPE_2 ( ) { public void info ( java.lang.String msg ) { VAR_2 . METHOD_2 ( msg ) ; VAR_2 . METHOD_5 ( ) ; } public void METHOD_4 ( java.lang.String msg ) { info ( msg ) ; } } ) ; } } 
public TYPE_1 . ChangeInfo format ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db . get ( ) , rsrc . METHOD_1 ( ) ) ; return format ( cd , TYPE_3 . of ( rsrc . METHOD_2 ( ) . getId ( ) ) , true ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String name ) { TYPE_1 a = new TYPE_1 ( ) ; a . METHOD_2 ( VAR_1 ) ; a . METHOD_3 ( name ) ; TYPE_3 VAR_2 = a . METHOD_5 ( ) ; VAR_3 . METHOD_6 ( VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { final com.google.gerrit.reviewdb.client . AccountGroup group = VAR_2 . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( user . get ( ) , group ) ; } 
private void METHOD_1 ( java.lang.StringBuilder out , int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { if ( VAR_3 instanceof TYPE_3 ) { TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_3 ) ) ; out . append ( STRING_1 ) . append ( VAR_5 ) . append ( STRING_2 ) . append ( VAR_6 ) . append ( STRING_3 ) ; } if ( ( VAR_7 ) != null ) { METHOD_2 ( out , VAR_2 , VAR_3 ) ; } else { METHOD_3 ( out , VAR_1 , VAR_2 , VAR_3 ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 rsrc , com.google.gerrit.reviewdb.client.Change . Id id ) throws com.google.gwtorm.server.OrmException { if ( rsrc . getChange ( ) . getId ( ) . equals ( id ) ) { return rsrc . METHOD_2 ( ) ; } com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( ) . changes ( ) . get ( id ) ; if ( c == null ) { return null ; } return rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( c ) ; } 
public TYPE_1 . ChangeInfo apply ( TYPE_2 req , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { TYPE_6 VAR_1 = req . METHOD_1 ( ) ; if ( ! ( VAR_1 . METHOD_2 ( VAR_2 . get ( ) ) ) ) { throw new TYPE_7 ( STRING_1 ) ; } com.google.gerrit.reviewdb.client.Change change = METHOD_3 ( VAR_1 , input . message ) ; return VAR_3 . create ( VAR_4 ) . format ( change ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = null ; TYPE_3 . NameKey VAR_2 = new TYPE_3 . NameKey ( STRING_1 ) ; TYPE_4 VAR_3 = null ; TYPE_5 . Project project = new TYPE_5 . Project ( VAR_4 ) ; TYPE_1 ps = new TYPE_1 ( VAR_5 , VAR_1 , VAR_2 , VAR_3 , project , VAR_6 ) ; ps . METHOD_3 ( VAR_7 ) ; return ps ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; org.junit.Assert . METHOD_2 ( b , b . append ( CHAR_1 ) ) ; org.junit.Assert . METHOD_2 ( b , b . append ( CHAR_2 ) ) ; org.junit.Assert.assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 key = new TYPE_1 ( STRING_1 ) ; java.lang.String VAR_1 = new TYPE_3 ( ) . create ( ) . METHOD_3 ( key ) ; TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( METHOD_6 ( VAR_3 ) , VAR_1 ) ) . METHOD_7 ( new TYPE_5 ( VAR_4 , VAR_5 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_6 . METHOD_8 ( VAR_3 , key ) ) . METHOD_9 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; org.junit.Assert . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . getName ( ) ) ; org.junit.Assert.assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( STRING_3 , VAR_1 . METHOD_6 ( ) ) ; org.junit.Assert . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ; METHOD_9 ( VAR_1 , 2 , 1 , 0 , ( - 1 ) , ( - 2 ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException , java.lang.Exception , TYPE_1 { java.lang.String changeId = METHOD_2 ( ) . getChangeId ( ) ; java.util.List < TYPE_2 > reviewers = METHOD_3 ( changeId , STRING_1 , INT_1 ) ; org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_1 ) ; reviewers = METHOD_3 ( changeId , STRING_1 , INT_2 ) ; org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_2 ) ; reviewers = METHOD_3 ( changeId , STRING_2 , INT_3 ) ; org.junit.Assert.assertEquals ( reviewers . size ( ) , 1 ) ; } 
private TYPE_3 . Account METHOD_1 ( final java.lang.String name , final java.lang.String email ) { final TYPE_2 . Id VAR_1 = new TYPE_2 . Id ( INT_1 ) ; final TYPE_3 . Account account = new TYPE_3 . Account ( VAR_1 ) ; account . METHOD_2 ( name ) ; account . METHOD_3 ( email ) ; return account ; } 
private void METHOD_1 ( TYPE_1 ctx ) { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( psId ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; TYPE_3 . METHOD_4 ( change ) ; ctx . METHOD_1 ( ) ; } } 
private static boolean METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException , TYPE_2 , TYPE_3 { org.eclipse.jgit.revwalk.RevCommit VAR_3 = walk . parseCommit ( VAR_2 . getId ( ) ) ; if ( ( VAR_3 . METHOD_2 ( ) ) > 0 ) { return TYPE_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . contains ( VAR_1 . getId ( ) ) ; } return VAR_1 == ( VAR_4 ) ; } 
void display ( TYPE_1 . ChangeInfo info , java.lang.String revision ) { this . revision = revision ; boolean VAR_2 = TYPE_2 . METHOD_1 ( ) ; TYPE_3 VAR_3 = info . revision ( revision ) ; TYPE_4 commit = VAR_3 . commit ( ) ; changeId = info . METHOD_2 ( ) ; project = info . project ( ) ; VAR_4 = commit . METHOD_3 ( ) ; message = commit . message ( ) ; METHOD_4 ( info , VAR_2 ) ; METHOD_5 ( info , VAR_3 , VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( STRING_1 , 2 ) ; java.lang.String VAR_2 = ( ( METHOD_3 ( ) ) + STRING_2 ) + ( METHOD_4 ( ) ) ; VAR_1 . update ( 1 ) ; VAR_3 . METHOD_5 ( VAR_4 , VAR_5 ) ; VAR_1 . update ( 1 ) ; VAR_3 . METHOD_6 ( VAR_4 , ( ( VAR_6 ) + STRING_3 ) , VAR_2 ) ; VAR_1 . METHOD_7 ( ) ; } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 in ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( VAR_1 . get ( ) ) != ( rsrc . METHOD_1 ( ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } try { VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , change . getProject ( ) , change.getId ( ) ) ; } catch ( TYPE_5 e ) { return TYPE_1 . METHOD_3 ( ) ; } return TYPE_1 . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 . Result VAR_2 = METHOD_3 ( ) ; METHOD_4 ( VAR_2 . getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit VAR_3 = METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . getId ( ) ) . isEqualTo ( VAR_1 . getId ( ) ) ; } 
void add ( ) { java.util.List < java.lang.String > values = new java.util.ArrayList < > ( ) ; for ( TYPE_1 input : VAR_1 ) { values . add ( input . getValue ( ) . METHOD_1 ( ) ) ; input . METHOD_2 ( STRING_1 ) ; } insert ( values ) ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 . Key key ) throws java.io.IOException { try ( TYPE_3 VAR_1 = new TYPE_3 ( key . repo , key . path ) ) { VAR_1 . METHOD_2 ( null , VAR_2 ) ; return TYPE_2 . METHOD_3 ( VAR_1 ) ; } finally { key . repo = null ; } } 
public void run ( ) { while ( ! ( VAR_1 ) ) { VAR_2 . METHOD_1 ( ) ; VAR_3 . METHOD_1 ( ) ; synchronized ( this ) { try { METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 e ) { VAR_4 . METHOD_3 ( STRING_1 , e ) ; } } } } 
private void METHOD_1 ( TYPE_1 info , boolean r ) { TYPE_2 api = TYPE_3 . revision ( project . get ( ) , VAR_1 ) . view ( STRING_1 ) . id ( info . path ( ) ) . view ( STRING_2 ) ; if ( r ) { api . put ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) ; } else { api . delete ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 config , java.lang.String VAR_1 ) { return new TYPE_3 ( ) . METHOD_2 ( TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( config ) . METHOD_8 ( VAR_1 ) ; } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . values ( ) ) { VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . getId ( ) ) ; } return VAR_1 ; } 
TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 rw , TYPE_6 VAR_4 , TYPE_7 VAR_5 , org.eclipse.jgit.lib.Repository repo , TYPE_9 VAR_7 , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_8 , java.util.Set < TYPE_10 > VAR_9 , TYPE_11 VAR_10 , TYPE_12 VAR_11 , TYPE_13 < TYPE_14 , com.google.gerrit.reviewdb.client.Account.Id > VAR_12 , TYPE_15 VAR_13 , boolean VAR_14 ) ; 
private static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( new java.lang.String ( VAR_1 , VAR_3 ) ) ; TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_4 ( VAR_2 , 0 , VAR_2 . length ) ; com.google.common.truth.Truth.assertThat ( p . METHOD_5 ( ) ) . isEqualTo ( TYPE_3 . of ( ) ) ; return p ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_1 > result = new java.util.ArrayList < > ( ) ; TYPE_3 VAR_2 = VAR_3 . create ( true ) ; for ( com.google.gerrit.reviewdb.client.Account.Id VAR_4 : VAR_1 ) { result . add ( VAR_2 . get ( VAR_4 ) ) ; } VAR_2 . METHOD_2 ( ) ; return result ; } 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final java.lang.String VAR_3 = METHOD_4 ( ) ; final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( STRING_1 ) ; if ( VAR_1 . METHOD_5 ( ) ) { r . append ( ( STRING_2 + VAR_3 ) ) ; r . append ( STRING_3 ) ; } return r . toString ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_2 ( ) ) ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; } 
private void METHOD_1 ( final TYPE_1 . ReviewDb db , final TYPE_2 . NameKey projectName ) throws TYPE_3 { try { if ( ! ( VAR_2 . METHOD_2 ( projectName ) . METHOD_3 ( ) ) ) { throw new TYPE_3 ( new TYPE_4 ( ) ) ; } } catch ( TYPE_5 e ) { throw new TYPE_3 ( new TYPE_4 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( ) ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 config , TYPE_3 VAR_1 ) { if ( ( VAR_2 ) != null ) { return VAR_2 ; } int VAR_3 = config . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) ; if ( VAR_3 <= 0 ) { VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) ; } return TYPE_5 . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_3 , STRING_5 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_3 ; int VAR_4 ; VAR_2 = VAR_2 . METHOD_3 ( ) ; if ( ! ( VAR_2 instanceof TYPE_5 ) ) throw new TYPE_4 ( this , 1 , STRING_1 , VAR_2 ) ; VAR_4 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_4 ) ; return VAR_6 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 } ; try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { java.util.List < TYPE_1 > m = VAR_2 . METHOD_2 ( repo , METHOD_3 ( rw ) , rw , VAR_1 , true ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_3 ) ; } } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; try { new TYPE_1 ( ) . METHOD_2 ( STRING_2 ) . METHOD_3 ( STRING_3 , VAR_1 ) ; org.junit.Assert . METHOD_4 ( STRING_4 ) ; } catch ( TYPE_2 e ) { org.junit.Assert.assertEquals ( ( STRING_5 + VAR_1 ) , e . getMessage ( ) ) ; } } 
private TYPE_1 . Key < TYPE_2 > METHOD_1 ( ) { return key ( new TYPE_2 ( ) { private static final long VAR_1 = INT_1 ; protected void METHOD_2 ( TYPE_4 req , TYPE_5 . HttpServletResponse rsp ) throws java.io.IOException { TYPE_6 . METHOD_3 ( req . METHOD_4 ( ) . METHOD_5 ( req . METHOD_6 ( ) . length ( ) ) , req , rsp ) ; } } ) ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { if ( ! ( patchSet . METHOD_2 ( ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } VAR_1 . METHOD_3 ( ctx . METHOD_4 ( ) , ctx . METHOD_5 ( psId ) , patchSet ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) , new TYPE_6 ( null ) ) ; } 
protected void add ( final TYPE_1 r ) throws com.google.gwtorm.server.OrmException { final java.lang.String n = r . METHOD_1 ( ) ; METHOD_2 ( n ) ; if ( ( VAR_1 . put ( n , r ) ) != null ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + n ) ) ; } VAR_2 . add ( n ) ; } 
public com.google.gwtorm.server.OrmException METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 , final TYPE_2 err ) { if ( ( ( err . METHOD_2 ( ) ) == null ) && ( ( err . METHOD_3 ( ) ) != null ) ) { err . METHOD_4 ( err . METHOD_3 ( ) ) ; } return new com.google.gwtorm.server.OrmException ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) , err ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException { final java.lang.String VAR_1 = STRING_1 ; TYPE_3 p = VAR_3 . projects ( ) . name ( VAR_1 ) . create ( ) . get ( ) ; org.junit.Assert.assertEquals ( VAR_1 , p . name ) ; TYPE_4 VAR_4 = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; org.junit.Assert . METHOD_2 ( VAR_4 ) ; TYPE_5 . METHOD_3 ( VAR_4 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_2 ) ; } 
private static Account . Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account a = VAR_1 . METHOD_2 ( db , VAR_2 ) ; if ( a == null ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } return a . getId ( ) ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ; } for ( java.lang.String name : VAR_2 ) { VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) ; VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , int line , int VAR_2 , int VAR_3 , boolean edit ) { VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , ( ( line - VAR_3 ) + 1 ) , VAR_2 , edit ) ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , org.eclipse.jgit.revwalk.RevCommit commit , TYPE_1 VAR_1 , TYPE_3 info , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers ) throws com.google.gwtorm.server.OrmException { METHOD_1 ( db , change , null , ps , commit , VAR_1 , info , reviewers ) ; } 
private static byte [ ] METHOD_1 ( final TYPE_1 p ) throws java.io.IOException { try ( TYPE_2 in = p . METHOD_2 ( ) . METHOD_3 ( p . getName ( ) ) ; TYPE_3 VAR_1 = new TYPE_3 ( ) ) { TYPE_4 . METHOD_4 ( in , VAR_1 ) ; return VAR_1 . METHOD_5 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) ; TYPE_2 u = util . user ( VAR_3 , VAR_4 ) ; org.junit.Assert . METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null , VAR_2 ) ) ; } 
private void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) instanceof TYPE_2 ) { } else if ( ! ( VAR_2 ) ) { throw new TYPE_1 ( 1 , STRING_1 ) ; } else if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_1 ( 1 , STRING_2 ) ; } } 
void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; } TYPE_1 . METHOD_1 ( VAR_3 , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void METHOD_3 ( TYPE_4 VAR_4 ) { } public void onSuccess ( TYPE_3 result ) { } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 r = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_5 ( ) ) . isEqualTo ( VAR_2 ) ; } 
protected TYPE_1 . ReviewDb METHOD_1 ( ) throws TYPE_2 { if ( ( db ) == null ) { try { db = schema . METHOD_4 ( ) ; } catch ( TYPE_3 . OrmException e ) { throw new TYPE_2 ( 1 , STRING_1 , e ) ; } } return db ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) ; TYPE_2 u = util . user ( VAR_3 , VAR_5 ) ; org.junit.Assert . METHOD_6 ( STRING_2 , u . METHOD_7 ( STRING_3 ) . METHOD_8 ( ) ) ; } 
public java.lang.String diff ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { TYPE_2 VAR_3 = VAR_4 ; TYPE_3 VAR_5 = VAR_3 . diff ( VAR_6 , VAR_1 , VAR_2 ) ; TYPE_4 VAR_7 = new TYPE_4 ( ) ; try ( TYPE_5 VAR_8 = new TYPE_5 ( VAR_7 ) ) { VAR_8 . format ( VAR_5 , VAR_1 , VAR_2 ) ; } return VAR_7 . toString ( VAR_9 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey projectName : VAR_3 . METHOD_3 ( ) ) { TYPE_3 e = VAR_3 . get ( projectName ) ; if ( e == null ) { continue ; } if ( VAR_1 . equals ( e . getProject ( ) . METHOD_4 ( VAR_4 ) ) ) { VAR_2 . add ( VAR_5 . format ( e . getProject ( ) ) ) ; } } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( insert ( VAR_4 , VAR_1 ) ) . METHOD_5 ( true ) . METHOD_6 ( ) ; TYPE_4 result = client . METHOD_7 ( VAR_2 ) ; if ( ! ( result . METHOD_8 ( ) ) ) { throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_9 ( ) . getId ( ) , VAR_3 , result . METHOD_10 ( ) ) ) ; } } 
private boolean METHOD_1 ( ) { com.google.gerrit.reviewdb.client.Account.Id VAR_1 = notes . getChange ( ) . METHOD_2 ( ) ; if ( ( VAR_1 != null ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) { com.google.gerrit.reviewdb.client.Account.Id id = METHOD_3 ( ) . getAccountId ( ) ; return id . equals ( VAR_1 ) ; } return false ; } 
public TYPE_1 change ( TYPE_2 notes ) { com.google.gerrit.reviewdb.client.Change change = notes . getChange ( ) ; TYPE_3 . METHOD_1 ( METHOD_2 ( ) . getProject ( ) . METHOD_3 ( ) . equals ( change . getProject ( ) ) , STRING_1 ) ; return METHOD_2 ( ) . METHOD_4 ( notes ) . METHOD_5 ( null , db ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , java.lang.String path , TYPE_3 VAR_2 , byte [ ] VAR_3 ) throws TYPE_4 , java.io.IOException { final org.eclipse.jgit.lib.ObjectId VAR_4 = ( VAR_1 == ( VAR_5 ) ) ? VAR_2 . insert ( VAR_6 , VAR_3 ) : TYPE_5 . METHOD_2 ( rw , base , path ) ; return new TYPE_1 ( path ) { public void apply ( TYPE_6 VAR_7 ) { VAR_7 . METHOD_3 ( VAR_8 ) ; VAR_7 . METHOD_4 ( VAR_4 ) ; } } ; } 
public void METHOD_1 ( TYPE_1 a , com.google.gerrit.reviewdb.client.Change change ) { VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_3 = change . METHOD_5 ( ) ; VAR_4 = change . getStatus ( ) . METHOD_6 ( ) ; a . status = change . getStatus ( ) ; } 
private void METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; try { com.google.common.truth.Truth.assertThat ( repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) . isEqualTo ( VAR_1 ) ; } finally { repo . close ( ) ; } } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; org.junit.Assert . METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; org.junit.Assert . METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String id ) throws TYPE_3 , java.lang.Exception { final TYPE_4 user = VAR_2 . get ( ) ; if ( user instanceof TYPE_5 ) { throw new TYPE_6 ( STRING_1 ) ; } else if ( ! ( user instanceof TYPE_7 ) ) { throw new TYPE_3 ( id ) ; } return METHOD_1 ( id ) ; } 
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) throws java.io.IOException , TYPE_1 { final org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_3 ( VAR_2 ) ; if ( ! VAR_1 ) { METHOD_4 ( project . METHOD_2 ( ) , VAR_2 ) ; } } 
private TYPE_1 < com.google.gerrit.reviewdb.client . PatchSetApproval > approvals ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id user = rsrc . METHOD_4 ( ) . getAccountId ( ) ; return TYPE_3 . METHOD_1 ( db . METHOD_2 ( ) . METHOD_3 ( rsrc . getChange ( ) . getId ( ) ) , new TYPE_4 < com.google.gerrit.reviewdb.client . PatchSetApproval > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client . PatchSetApproval input ) { return user . equals ( input . getAccountId ( ) ) ; } } ) ; } 
protected void METHOD_1 ( TYPE_2 . HttpServletResponse res , TYPE_3 type ) { res . METHOD_2 ( type . METHOD_3 ( ) ) ; res . METHOD_4 ( TYPE_4 . name ( ) ) ; res . METHOD_5 ( VAR_1 , STRING_1 ) ; res . METHOD_5 ( VAR_2 , STRING_2 ) ; METHOD_6 ( res ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( VAR_2 , null , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { if ( METHOD_4 ( ) ) { display ( r ) ; } } } ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { for ( final TYPE_1 < ? , ? > TYPE_2 : VAR_2 ) { VAR_1 . METHOD_2 ( TYPE_2 : : METHOD_1 ) ; VAR_3 . METHOD_3 ( ( ) - > TYPE_2 . METHOD_4 ( VAR_3 ) , INT_1 , VAR_4 ) ; } } } 
public void METHOD_1 ( java.lang.String file , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return ; } java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > set = VAR_2 . get ( file ) ; if ( set != null ) { set . METHOD_2 ( VAR_1 ) ; } else { VAR_2 . put ( file , TYPE_1 . METHOD_3 ( VAR_1 ) ) ; } } 
protected void METHOD_1 ( ) { if ( ( db ) != null ) { try { for ( TYPE_2 w : db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } catch ( TYPE_3 . OrmException err ) { } } } 
public TYPE_1 . Result METHOD_1 ( ) throws java.lang.Exception { TYPE_2 ref = repo . METHOD_2 ( VAR_1 ) ; VAR_2 . run ( ) ; org.eclipse.jgit.lib.ObjectId VAR_3 ; if ( ref == null ) { VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) ; VAR_4 = VAR_5 . get ( ) ; } else { VAR_3 = ref . METHOD_4 ( ) ; VAR_4 = METHOD_5 ( VAR_3 ) ; } return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( METHOD_2 ( ) ) || ( VAR_1 . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( VAR_1 . METHOD_1 ( ) ) ) && ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) ) && ( ! ( METHOD_7 ( db ) ) ) ; } 
protected void METHOD_1 ( final java.lang.String p ) { try ( TYPE_1 in = VAR_1 class . METHOD_2 ( ) . METHOD_3 ( p ) ) { if ( in != null ) { METHOD_4 ( in , ( STRING_1 + p ) ) ; } else { VAR_2 . error ( ( STRING_2 + p ) ) ; } } catch ( java.io.IOException e ) { VAR_2 . error ( e . getMessage ( ) , e ) ; } } 
public int length ( ) { int VAR_1 = 0 ; TYPE_1 t = this ; while ( t instanceof TYPE_2 ) { VAR_1 ++ ; t = ( ( TYPE_2 ) ( t ) ) . METHOD_2 ( ) . METHOD_3 ( ) ; } return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { TYPE_3 VAR_2 = VAR_3 . get ( change , patchSet ) ; for ( TYPE_4 patch : VAR_2 . METHOD_2 ( ) ) { if ( ( VAR_4 ) == null ) { VAR_4 = new java.util.ArrayList < TYPE_5 > ( ) ; } TYPE_5 p = new TYPE_5 ( ) ; p . file = patch . METHOD_3 ( ) ; p . type = patch . METHOD_4 ( ) ; VAR_4 . add ( p ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; commit . METHOD_2 ( ( VAR_1 && ( ! ( VAR_3 . METHOD_3 ( ) . isEmpty ( ) ) ) ) ) ; VAR_4 . METHOD_2 ( ( VAR_1 && ( VAR_3 . METHOD_4 ( ) ) ) ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_6 . METHOD_2 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true ) ; try { TYPE_1 . ChangeInfo info = METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; java.lang.String message = VAR_2 . get ( VAR_3 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_5 ( ) . METHOD_6 ( ) ) ) ; } finally { METHOD_2 ( false ) ; } } 
public void topic ( java.lang.String topic ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . topic = topic ; try { VAR_1 . apply ( change , in ) ; } catch ( TYPE_3 e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { try { for ( com.google.gerrit.server.query.change.ChangeData VAR_2 : index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( db , VAR_1 . getId ( ) ) , this ) , 1 ) . METHOD_4 ( ) ) { if ( VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ) { return true ; } } } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return false ; } 
private TYPE_1 user ( TYPE_2 . ProjectConfig VAR_1 , java.lang.String name , com.google.gerrit.reviewdb.client . AccountGroup ... VAR_2 ) { return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_5 , null , VAR_6 , VAR_7 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , TYPE_1 . Result > VAR_1 = METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; METHOD_3 ( project , STRING_5 , VAR_2 , VAR_3 ) ; TYPE_2 in = METHOD_4 ( VAR_4 ) ; in . branch = STRING_3 ; VAR_5 = VAR_1 . get ( STRING_1 ) . getChangeId ( ) ; METHOD_5 ( in , VAR_6 class , ( STRING_6 + ( VAR_5 ) ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > result = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( TYPE_4 . METHOD_2 ( change . METHOD_3 ( ) . get ( ) , VAR_3 . METHOD_4 ( ) ) ) { result . add ( VAR_3 ) ; } } return result ; } 
void METHOD_1 ( java.lang.String a , java.lang.String b , java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ; if ( ! ( VAR_2 . equals ( VAR_1 ) ) ) { METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) ; } } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , TYPE_2 { org.junit.Assert . METHOD_2 ( VAR_1 . METHOD_3 ( db ) . isEmpty ( ) ) ; METHOD_4 ( STRING_1 ) ; METHOD_4 ( STRING_2 ) ; java.util.Set < java.lang.String > s = VAR_1 . METHOD_3 ( db ) ; org.junit.Assert.assertEquals ( 1 , s . size ( ) ) ; org.junit.Assert . METHOD_2 ( s . contains ( STRING_3 ) ) ; org.junit.Assert . METHOD_5 ( s . contains ( STRING_4 ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 s ) { TYPE_3 VAR_1 = ( s . METHOD_3 ( ) . METHOD_4 ( ) ) ? TYPE_4 . METHOD_2 ( s . METHOD_3 ( ) . get ( ) ) : TYPE_4 . METHOD_2 ( s . METHOD_5 ( ) . getId ( ) ) ; return new TYPE_1 ( VAR_1 , TYPE_4 . METHOD_6 ( VAR_1 , s ) ) ; } 
public static boolean METHOD_1 ( ) { if ( VAR_1 ) { return true ; } TYPE_1 ui = null ; if ( TYPE_2 . METHOD_2 ( ) ) { ui = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; } if ( ui == null ) { ui = TYPE_2 . METHOD_6 ( ) . METHOD_5 ( ) ; } return ui == ( VAR_2 ) ; } 
private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 < ? extends TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < > ( VAR_1 ) ; java.util.Collections . METHOD_1 ( r , VAR_2 ) ; return r ; } 
public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { user = ctx . METHOD_2 ( ) . METHOD_3 ( ) ; notes = ctx . METHOD_4 ( ) ; ps = VAR_1 . get ( ctx . METHOD_5 ( ) , ctx . METHOD_4 ( ) , psId ) ; boolean VAR_2 = false ; VAR_2 |= METHOD_6 ( ctx ) ; VAR_2 |= METHOD_7 ( ctx ) ; VAR_2 |= METHOD_8 ( ctx ) ; return VAR_2 ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 p ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 c : p . METHOD_3 ( ) ) { if ( c . METHOD_4 ( ) ) { VAR_1 . add ( VAR_2 . format ( c . getProject ( ) ) ) ; VAR_1 . METHOD_5 ( METHOD_1 ( c ) ) ; } } return VAR_1 ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; TYPE_1 . METHOD_6 ( true ) ; TYPE_2 . METHOD_7 ( true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( VAR_1 , METHOD_3 ( VAR_1 ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( VAR_2 , METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 ) ; METHOD_4 ( STRING_5 , VAR_3 ) ; METHOD_4 ( STRING_6 , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 r = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; r . METHOD_3 ( ) ; r . METHOD_4 ( true ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) ; TYPE_3 u = util . user ( VAR_1 , VAR_4 ) ; org.junit.Assert . METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet patchSet , TYPE_1 . NameKey VAR_1 , org.eclipse.jgit.lib.Repository git , org.eclipse.jgit.revwalk.RevWalk rw ) { try { METHOD_2 ( patchSet , VAR_1 , git , rw ) ; return true ; } catch ( TYPE_3 e ) { return false ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , patchSet . getId ( ) , VAR_1 ) , e ) ; return false ; } } 
protected void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { METHOD_2 ( res . METHOD_3 ( ) . close ( ) ) ; METHOD_4 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) ; } else { METHOD_2 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) ; METHOD_4 ( res . METHOD_3 ( ) . close ( ) ) ; } } 
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId ( ) . toString ( ) ; try { if ( cd . change ( ) . getStatus ( ) . METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( id ) ; commit ( VAR_1 ) ; } else { VAR_2 . METHOD_2 ( id ) ; commit ( VAR_2 ) ; } } catch ( com.google.gwtorm.server.OrmException | TYPE_1 e ) { throw new java.io.IOException ( e ) ; } } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 . METHOD_2 ( ( ( db ) != null ) , STRING_1 ) ; if ( ( update ) == null ) { update = VAR_1 . create ( db , METHOD_3 ( ) , VAR_2 , VAR_3 ) . METHOD_4 ( repo , rw , VAR_4 ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_6 . create ( ) ) ; } return update ; } 
public void onSuccess ( final TYPE_1 result ) { VAR_1 . METHOD_1 ( false ) ; final TYPE_2 . Account me = TYPE_3 . METHOD_2 ( ) ; me . METHOD_3 ( VAR_2 ) ; me . METHOD_4 ( VAR_3 ) ; me . METHOD_5 ( info ) ; TYPE_3 . METHOD_6 ( ) ; if ( ( VAR_4 ) != null ) { VAR_4 . display ( me ) ; } } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.StringBuilder VAR_2 = new java.lang.StringBuilder ( VAR_1 . METHOD_2 ( ) ) ; java.lang.String [ ] args = VAR_1 . METHOD_3 ( ) ; for ( int i = 1 ; i < ( args . length ) ; i ++ ) { VAR_2 . append ( STRING_1 ) . append ( args [ i ] ) ; } return VAR_2 . toString ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ; org.junit.Assert.assertEquals ( ( STRING_4 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_4 ) ) ; org.junit.Assert.assertEquals ( ( STRING_6 + ( STRING_2 + STRING_7 ) ) , METHOD_2 ( STRING_6 ) ) ; org.junit.Assert.assertEquals ( ( STRING_8 + ( STRING_2 + STRING_9 ) ) , METHOD_2 ( STRING_8 ) ) ; org.junit.Assert.assertEquals ( ( STRING_10 + ( STRING_2 + STRING_11 ) ) , METHOD_2 ( STRING_10 ) ) ; } 
private void METHOD_1 ( final boolean submit ) { if ( VAR_1 . isEmpty ( ) ) { METHOD_2 ( submit ) ; } else { final TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( ) { private int VAR_3 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_3 ) ) == ( VAR_1 . size ( ) ) ) { METHOD_2 ( submit ) ; } } } ; for ( final TYPE_3 p : VAR_1 ) { p . METHOD_3 ( VAR_2 ) ; } } } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; } } ) ; rpc ( VAR_4 class ) ; } 
protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . Factory VAR_1 , TYPE_3 rsrc , TYPE_4 input ) throws TYPE_5 , TYPE_6 { return VAR_2 . apply ( VAR_1 , rsrc . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( final TYPE_2 . NameKey name ) { try { return VAR_1 . METHOD_1 ( name . get ( ) ) ; } catch ( TYPE_3 err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } 
public TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 : TYPE_4 . METHOD_2 ( db . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ) { VAR_1 . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; } } return VAR_1 ; } 
private void METHOD_1 ( TYPE_1 cm , int line , int VAR_1 ) { for ( int i = 0 ; i < VAR_1 ; i ++ ) { cm . METHOD_2 ( ( line + i ) , VAR_2 , VAR_3 . diff ( ) ) ; } } 
public void onSuccess ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_1 . METHOD_1 ( STRING_1 ) ; display ( VAR_3 , ( ( VAR_5 . METHOD_3 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_4 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_5 ( ) ) || VAR_2 ) ) ; } 
public void METHOD_1 ( final java.lang.StringBuilder VAR_1 , final java.util.Set < TYPE_2 > VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } if ( VAR_4 != null ) { VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } VAR_1 . append ( CHAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 ctx ) throws java.lang.Exception { TYPE_2 c = METHOD_2 ( branch ) ; if ( c != null ) { ctx . METHOD_3 ( c . METHOD_4 ( 0 ) , c , branch . get ( ) ) ; METHOD_5 ( branch , c ) ; } } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = new TYPE_5 ( ) ; result . METHOD_4 ( p ) ; TYPE_6 . METHOD_5 ( p ) ; } } ) ; if ( ( view ) != null ) { close ( ) ; } } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_8 ( db ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 schema = METHOD_2 ( ) ; org.junit.Assert . METHOD_3 ( schema . METHOD_4 ( ) ) ; org.junit.Assert.assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( 1 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) ; } 
protected TYPE_1 . Result METHOD_1 ( java.lang.String changeId , java.lang.String ref ) throws java.io.IOException , TYPE_2 { java.util.Collections . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_2 = VAR_3 . create ( db , admin . METHOD_3 ( ) , VAR_4 , VAR_5 , new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 ) ) , changeId ) ; return VAR_2 . to ( git , ref ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; org.junit.Assert . METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( TYPE_2 . of ( query ( in . METHOD_6 ( 1 ) ) , in . METHOD_6 ( 0 ) ) , out . METHOD_7 ( ) ) ; } 
protected void run ( ) throws TYPE_1 { try { TYPE_2 in = new TYPE_2 ( ) ; in . revision = revision ; VAR_1 . projects ( ) . name ( project . getName ( ) ) . branch ( name ) . create ( in ) ; } catch ( TYPE_3 e ) { throw METHOD_2 ( e ) ; } } 
protected TYPE_1 METHOD_1 ( ) throws java.lang.Exception { final TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 < TYPE_4 . ReviewDb > VAR_2 = VAR_1 . METHOD_3 ( ) ; final TYPE_5 VAR_3 = VAR_1 . METHOD_4 ( ) ; return new TYPE_7 ( VAR_2 , VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String err , java.lang.Exception e ) { if ( VAR_1 ) { if ( e == null ) { VAR_2 . error ( err ) ; } else { VAR_2 . error ( err , e ) ; } return TYPE_2 . METHOD_2 ( ) ; } return TYPE_1 . error ( err ) ; } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( new TYPE_3 ( ) ) ; modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) ; modules.add ( new TYPE_5 ( ) ) ; return VAR_1 . METHOD_3 ( modules ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 , final java.lang.String VAR_3 ) { final int n = VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( VAR_1 . getValue ( i ) . equals ( VAR_3 ) ) { VAR_1 . METHOD_4 ( i ) ; return ; } } if ( VAR_3 != VAR_2 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert . METHOD_4 ( VAR_1 , n ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( METHOD_2 ( ) ) { new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_5 ( ) ; } else { VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { return TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 . get ( ) . METHOD_5 ( ) . METHOD_6 ( rsrc . getChange ( ) . getId ( ) ) . METHOD_7 ( ) ) , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . METHOD_8 ( ) ) == null ; } } ) , null ) ; } 
private void METHOD_1 ( final org.eclipse.jgit.lib.Repository VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ! ( METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ) ) { throw new java.io.IOException ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ) ) ) ; } METHOD_6 ( VAR_2 , VAR_3 ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { try ( TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_4 ( ) ; return VAR_4 . getValue ( VAR_5 ) ; } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( VAR_4 ) ) { TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_7 . set ( VAR_8 . create ( null , VAR_5 ) . METHOD_3 ( INT_1 , VAR_9 ) ) ; } } 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( rsrc ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( getChange ( ) . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( db , cd ) ) ) ) { return false ; } if ( ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) && ( ! ( METHOD_4 ( db , cd ) ) ) ) { return false ; } return METHOD_5 ( ) . METHOD_1 ( ) ; } 
protected static TYPE_1 type ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_1 . METHOD_1 ( VAR_2 ) ) != null ) { return VAR_1 . METHOD_1 ( VAR_2 ) ; } for ( TYPE_1 VAR_3 : VAR_1 . METHOD_2 ( ) ) { if ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) { return VAR_3 ; } } return null ; } 
public java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String name ) { java.lang.String [ ] VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , name ) ; if ( ( VAR_3 != null ) && ( ( VAR_3 . length ) > 0 ) ) { return VAR_3 ; } return super . METHOD_1 ( VAR_1 , VAR_2 , name ) ; } 
protected void METHOD_1 ( ) { file . set ( id , VAR_1 ) ; file . METHOD_2 ( VAR_2 ) ; file . METHOD_3 ( VAR_2 . isEmpty ( ) ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( false ) ; TYPE_1 . get ( ) . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( ) { if ( VAR_2 . isEmpty ( ) ) { file . METHOD_6 ( true ) ; } else { VAR_1 . METHOD_6 ( true ) ; } } } ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change c ) { final TYPE_3 commit = VAR_1 . get ( c . getId ( ) ) ; final TYPE_4 s = ( commit != null ) ? VAR_2 : null ; boolean VAR_3 = false ; if ( ( s != null ) && ( ( ( s . equals ( VAR_4 ) ) || ( s . equals ( VAR_5 ) ) ) || ( s . equals ( VAR_6 ) ) ) ) { VAR_3 = true ; } return VAR_3 ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey name , java.lang.String VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 , org.eclipse.jgit.lib.ObjectId VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( name . get ( ) ) ; if ( VAR_4 != null ) { TYPE_2 VAR_6 = VAR_7 ; if ( VAR_6 != null ) { TYPE_3 VAR_8 = VAR_6 . METHOD_3 ( ) ; if ( VAR_8 != null ) { if ( VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ) { VAR_5 . put ( name . get ( ) , VAR_4 ) ; } } } } } 
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) throws TYPE_4 { final TYPE_5 group = VAR_3 . get ( VAR_2 ) ; if ( group == null ) { throw new TYPE_4 ( VAR_2 ) ; } return new TYPE_1 ( VAR_1 , group , VAR_3 ) ; } 
private void status ( int VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ; VAR_3 . append ( VAR_4 ) ; VAR_3 . append ( STRING_1 ) . append ( VAR_5 ) . append ( STRING_2 ) ; METHOD_1 ( VAR_6 , VAR_3 . toString ( ) ) ; } else if ( METHOD_2 ( VAR_6 ) ) { METHOD_1 ( VAR_6 , null ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; long VAR_2 = ( VAR_1 . METHOD_3 ( ) ) + 1 ; TYPE_2 result = VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ; org.junit.Assert.assertEquals ( TYPE_3 . METHOD_7 ( STRING_1 ) , result . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { this . rw = walk ; this . VAR_1 = walk . METHOD_2 ( ) ; try { revision = ( id != null ) ? walk . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { walk = null ; VAR_1 = null ; } } 
TYPE_1 METHOD_1 ( java.lang.String name ) { try { TYPE_2 p = METHOD_2 ( name ) ; return VAR_1 . get ( p , METHOD_3 ( p ) ) ; } catch ( TYPE_3 e ) { VAR_2 . METHOD_4 ( java.lang.String.format ( STRING_1 , name ) , e ) ; return null ; } } 
void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; TYPE_2 . METHOD_4 ( VAR_4 , VAR_1 ) ; if ( VAR_1 ) { VAR_5 . METHOD_5 ( VAR_6 . METHOD_6 ( ) ) ; } else { VAR_5 . METHOD_7 ( VAR_6 . METHOD_6 ( ) ) ; } VAR_3 . METHOD_8 ( ) ; } 
private TYPE_4 getProject ( TYPE_2 . NameKey branch ) throws TYPE_3 { final TYPE_4 p = VAR_1 . get ( branch . getParentKey ( ) ) ; if ( p == null ) { throw new TYPE_3 ( branch . getParentKey ( ) ) ; } return p ; } 
private TYPE_1 [ ] METHOD_1 ( ) { TYPE_1 c = new TYPE_3 ( ) ; c . METHOD_2 ( null ) ; c . METHOD_3 ( cfg . METHOD_4 ( STRING_1 , null , STRING_2 , INT_1 ) ) ; c . METHOD_5 ( false ) ; return new TYPE_1 [ ] { c } ; } 
private void METHOD_1 ( com.google.gerrit.server.query.change.ChangeData change , boolean VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_1 , TYPE_2 { TYPE_3 VAR_2 = VAR_3 . get ( ) . METHOD_2 ( db , change . change ( ) , user ( admin ) ) ; com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) . isEmpty ( ) ) . isEqualTo ( VAR_1 ) ; } 
public static void METHOD_1 ( ) { VAR_1 = null ; TYPE_1 . METHOD_2 ( VAR_2 ) ; for ( final TYPE_2 VAR_4 : VAR_5 ) { VAR_4 . METHOD_3 ( ) ; } TYPE_3 . METHOD_4 ( ) ; if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_3 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers = VAR_1 . METHOD_2 ( TYPE_1 . of ( user . email , admin . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . METHOD_4 ( user . id ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , TYPE_1 > res = METHOD_2 ( STRING_1 , new TYPE_2 < java.util.Map < java.lang.String , TYPE_1 > > ( ) { } . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( 1 , res . size ( ) ) ; TYPE_1 d = res . get ( STRING_2 ) ; org.junit.Assert . METHOD_4 ( STRING_3 , d ) ; org.junit.Assert.assertEquals ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) , d . name ) ; } 
protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 class ) ; bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ; VAR_3 = METHOD_2 ( VAR_4 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ; VAR_5 = METHOD_2 ( VAR_6 class ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ; bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ; } 
private TYPE_1 METHOD_1 ( final java.lang.String email ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) { java.util.List < com.google.gerrit.reviewdb.client.Account > VAR_1 = db . METHOD_3 ( ) . METHOD_1 ( email ) . METHOD_4 ( ) ; return ( VAR_1 . size ( ) ) == 1 ? auth ( VAR_1 . get ( 0 ) ) : null ; } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_5 ( ) . log ( STRING_1 , e ) ; return null ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 info ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . status ( ) ) ; if ( ! ( TYPE_4 . equals ( info . path ( ) ) ) ) { VAR_1 . append ( info . status ( ) ) ; } VAR_1 . METHOD_5 ( ) ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.ObjectId VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , java.io.IOException , TYPE_3 { TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 ) ; try ( TYPE_4 out = new TYPE_4 ( VAR_3 ) ) { git . METHOD_3 ( VAR_1 ) . METHOD_4 ( out ) ; } return VAR_3 ; } 
private static void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , TYPE_1 VAR_2 , java.lang.String path , TYPE_2 diff ) throws java.io.IOException { if ( ! ( path . isEmpty ( ) ) ) { diff . METHOD_2 ( TYPE_3 . create ( path ) ) ; } diff . METHOD_3 ( repo ) ; diff . METHOD_4 ( true ) ; diff . format ( VAR_1 , VAR_2 ) ; } 
private TYPE_1 . ChangeInfo METHOD_1 ( final com.google.gerrit.reviewdb.client.Change VAR_1 , java.util.Map < com.google.gerrit.reviewdb.client.Change . Id , com.google.gerrit.reviewdb.client.PatchSet.Id > VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 . ChangeInfo VAR_4 ; if ( VAR_2 == null ) { VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 ) ; } else { VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 , VAR_2 . get ( VAR_1 . getId ( ) ) ) ; } VAR_4 . METHOD_4 ( METHOD_5 ( VAR_1 ) ) ; return VAR_4 ; } 
public void METHOD_1 ( ) throws java.io.IOException { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = ( ( VAR_3 ) + STRING_2 ) + ( VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_2 , VAR_5 . format ( null , null , null , null , cfg , VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_6 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_7 , VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_3 ( p ) ; TYPE_2 VAR_3 = repo . METHOD_4 ( ) ; return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_5 ( ) ) , VAR_3 , new TYPE_3 ( ) , true ) ; } 
public void onSuccess ( TYPE_1 info ) { if ( info . METHOD_1 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_3 . Factory ( ) ) ; } if ( info . METHOD_3 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_4 . Factory ( ) ) ; } if ( info . METHOD_4 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_2 , new TYPE_5 . Factory ( ) ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; org.junit.Assert . METHOD_2 ( b . isEmpty ( ) ) ; org.junit.Assert . METHOD_3 ( b . METHOD_4 ( ) ) ; org.junit.Assert.assertEquals ( STRING_1 , b . METHOD_5 ( ) ) ; b . append ( STRING_2 ) ; org.junit.Assert . METHOD_2 ( b . METHOD_4 ( ) ) ; org.junit.Assert.assertEquals ( STRING_2 , b . METHOD_5 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 in , TYPE_2 < ? extends TYPE_3 > VAR_1 ) throws java.lang.Exception { try { VAR_2 . projects ( ) . create ( in ) ; org.junit.Assert . METHOD_2 ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; } catch ( TYPE_3 VAR_3 ) { com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( VAR_1 ) ; } } 
private final void METHOD_1 ( final TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > patchSets ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSet patchSet : patchSets ) { db . METHOD_2 ( ) . delete ( db . METHOD_2 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) ; db . METHOD_4 ( ) . delete ( db . METHOD_4 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) ; db . patchSets ( ) . delete ( java.util.Collections.singleton ( patchSet ) ) ; } } 
private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_2 = METHOD_2 ( ) ; METHOD_3 ( VAR_3 ) ; VAR_4 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; VAR_5 . METHOD_6 ( ) ; return VAR_2 ; } 
public java.lang.String toString ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_1 ( user ) ; if ( ( VAR_1 . METHOD_2 ( CHAR_1 ) ) < 0 ) { return ( ( VAR_2 ) + STRING_1 ) + VAR_1 ; } return ( ( ( VAR_2 ) + STRING_2 ) + VAR_1 ) + STRING_3 ; } 
private void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res ) throws java.io.IOException { TYPE_3 VAR_1 = METHOD_2 ( req ) ; res . METHOD_3 ( VAR_2 ) ; res . METHOD_4 ( STRING_1 ) ; res . METHOD_5 ( ( ( int ) ( VAR_1 . length ( ) ) ) ) ; TYPE_4 out = res . METHOD_6 ( ) ; try ( TYPE_5 in = new TYPE_6 ( VAR_1 ) ) { TYPE_7 . METHOD_7 ( in , out ) ; } } 
static void METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { final java.lang.StringBuilder url = new java.lang.StringBuilder ( ) ; url . append ( req . METHOD_2 ( ) ) ; url . append ( CHAR_1 ) ; url . append ( CHAR_2 ) ; url . append ( VAR_1 ) ; rsp . METHOD_3 ( url . toString ( ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( ( ( VAR_2 ) != null ) , STRING_1 ) ; int VAR_3 = ( VAR_2 . isEmpty ( ) ) ? 1 : ( VAR_2 . size ( ) ) + 1 ; TYPE_1 key = new TYPE_3 ( ) . create ( VAR_5 , VAR_3 , VAR_1 ) ; VAR_2 . add ( TYPE_4 . of ( key ) ) ; return key ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ; TYPE_1 u = user ( ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_5 ) . METHOD_6 ( ) ) ; METHOD_7 ( STRING_6 , u . METHOD_5 ( STRING_7 ) . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 ) ; com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( VAR_2 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_5 ( ) ; } com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_6 ( ) ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 ) ; java.lang.String master = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ; METHOD_3 ( STRING_1 ) ; METHOD_5 ( user ) ; TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_3 , STRING_4 , false ) , TYPE_3 . branch ( STRING_2 , master , false ) ) , METHOD_7 ( ) . get ( ) ) ; } 
private void METHOD_1 ( TYPE_1 . Result r , int VAR_1 ) throws java.lang.Exception { TYPE_2 . ChangeInfo c = get ( r . getChangeId ( ) ) ; TYPE_3 VAR_3 = VAR_4 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( 1 , VAR_5 . size ( ) ) ; org.junit.Assert.assertEquals ( STRING_2 , VAR_5 . get ( 0 ) . name ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_5 . get ( 0 ) . value . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert . METHOD_4 ( VAR_1 , n ) ; org.junit.Assert.assertEquals ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) , n . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > VAR_2 ) { for ( TYPE_3 VAR_3 : VAR_2 ) { if ( ( VAR_4 ) == ( VAR_5 ) ) { if ( ( VAR_6 ) == null ) { VAR_6 = new java.util.ArrayList < > ( ) ; } VAR_6 . add ( METHOD_3 ( VAR_3 ) ) ; } } } 
public void run ( ) { int VAR_1 = ( TYPE_1 . METHOD_1 ( ) ) - ( ( TYPE_2 . METHOD_2 ( ) ) + INT_1 ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( diff ) ; VAR_4 . METHOD_4 ( VAR_5 , VAR_6 . METHOD_5 ( ) ) ; VAR_7 . METHOD_4 ( VAR_6 . METHOD_7 ( ) , diff ) ; } 
private void METHOD_1 ( TYPE_1 notes , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 ... VAR_3 ) throws java.lang.Exception { java.util.List < TYPE_3 > VAR_4 = new java.util.ArrayList ( ( 1 + ( VAR_3 . length ) ) ) ; VAR_4 . add ( VAR_2 ) ; VAR_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_5 . METHOD_4 ( notes , VAR_1 ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_4 ) . METHOD_8 ( ) ; } 
protected void METHOD_1 ( ) { if ( ( 0 <= ( VAR_1 ) ) && ( ( VAR_1 ) < ( table . METHOD_2 ( ) ) ) ) { final TYPE_1 VAR_2 = METHOD_3 ( VAR_1 ) ; if ( VAR_2 != null ) { METHOD_4 ( VAR_2 ) ; } } } 
public TYPE_1 . Result METHOD_1 ( ) throws java.lang.Exception { TYPE_2 ref = repo . METHOD_2 ( VAR_1 ) ; VAR_2 . run ( ) ; org.eclipse.jgit.lib.ObjectId VAR_3 ; if ( ref == null ) { VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) ; VAR_4 = VAR_5 . get ( ) ; } else { VAR_3 = ref . METHOD_4 ( ) ; VAR_4 = METHOD_5 ( rw , VAR_3 ) ; } return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ; if ( ! ( TYPE_6 . METHOD_2 ( req ) ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return ; } TYPE_7 rsp = new TYPE_7 ( req , ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ; if ( METHOD_3 ( req , rsp ) ) { VAR_3 . METHOD_1 ( req , rsp ) ; } } 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = id ; java.util.List < TYPE_1 > VAR_3 = put . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } throw new TYPE_8 ( ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 a = new TYPE_1 ( VAR_1 , STRING_2 ) ; org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) , a . METHOD_4 ( VAR_1 ) ) ; } 
static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) ; p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) ; db = new TYPE_2 ( new TYPE_4 ( p ) , VAR_3 class ) ; VAR_4 = new java.util.ArrayList < > ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( ( ( STRING_1 + ( admin . email ) ) + STRING_2 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; TYPE_2 VAR_3 = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ; TYPE_3 . METHOD_6 ( new TYPE_4 ( admin . id ) , VAR_3 ) ; } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws TYPE_1 , TYPE_2 , java.io.IOException { edit = VAR_1 . METHOD_2 ( change ) ; if ( edit . METHOD_3 ( ) ) { return edit . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; } throw new TYPE_2 ( change.getId ( ) ) ; } 
public TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey name , org.eclipse.jgit.lib.Repository VAR_1 , TYPE_2 user , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = factory . create ( name , VAR_1 , VAR_2 ) ; VAR_3 . METHOD_1 ( ) . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_2 ( user ) ; return VAR_3 ; } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw ) throws java.io.IOException , TYPE_1 { java.util.Map < TYPE_2 , byte [ ] > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( new TYPE_2 ( repo . METHOD_2 ( ) . METHOD_3 ( ) , STRING_1 ) , null ) ; return TYPE_4 . METHOD_4 ( rw , repo , STRING_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 config = db . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , 1 , 2 ) ; METHOD_3 ( VAR_1 , VAR_3 , ( - 1 ) , 1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) ) ) ; org.junit.Assert.assertEquals ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + ( VAR_2 ) ) ) ) ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws TYPE_2 , java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ) { throw new TYPE_2 ( ) ; } } } 
private void METHOD_1 ( java.lang.String msg , TYPE_1 t ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( t != null ) { VAR_1 . error ( ( ( VAR_2 ) + msg ) , t ) ; } else { VAR_1 . error ( ( ( VAR_2 ) + msg ) ) ; } } } 
public TYPE_1 < TYPE_2 > get ( final TYPE_3 < TYPE_4 > VAR_1 ) throws com.google.gwtorm.server.OrmException { final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < > ( ) ; for ( final TYPE_4 key : VAR_1 ) { final TYPE_2 VAR_2 = get ( key ) ; if ( VAR_2 != null ) { r . add ( VAR_2 ) ; } } return new TYPE_5 ( r ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 , final java.lang.String VAR_3 ) { final int n = VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( VAR_1 . getValue ( i ) . equals ( VAR_3 ) ) { VAR_1 . METHOD_3 ( i ) ; return ; } } if ( ! ( VAR_3 . equals ( VAR_2 ) ) ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( id ) ; if ( c == null ) { c = db . changes ( ) . get ( id ) ; } TYPE_2 notes = VAR_2 . METHOD_2 ( c ) ; TYPE_1 ctx = new TYPE_1 ( VAR_3 . METHOD_3 ( notes , user ) , new TYPE_3 ( db ) ) ; return ctx ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( this , VAR_1 ) ; } TYPE_2 . METHOD_4 ( new TYPE_3 ( this ) ) ; TYPE_1 . METHOD_5 ( null ) ; METHOD_6 ( ) ; if ( ( VAR_2 ) != null ) { TYPE_4 . set ( VAR_2 ) ; VAR_3 = true ; } else { TYPE_4 . METHOD_7 ( ) ; } } 
public java.util.List < java.lang.String > METHOD_1 ( ) throws TYPE_1 { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; java.lang.String [ ] VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_2 != null ) { for ( java.lang.String VAR_3 : VAR_2 ) { java.lang.String VAR_4 = VAR_3 . METHOD_5 ( 0 , ( ( VAR_3 . length ( ) ) - ( TYPE_3 . length ( ) ) ) ) ; VAR_1 . add ( VAR_4 ) ; } } return VAR_1 ; } 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > schema = TYPE_4 . schema ( VAR_2 ) ; if ( ( schema != null ) && ( schema . METHOD_2 ( VAR_3 ) ) ) { return query ( TYPE_4 . METHOD_3 ( branch , TYPE_4 . METHOD_4 ( schema , VAR_1 ) ) ) ; } else { return METHOD_1 ( schema , branch , VAR_1 , VAR_4 . METHOD_5 ( ) ) ; } } 
public final void METHOD_1 ( int line ) { int VAR_1 = METHOD_2 ( ) ; if ( ( METHOD_3 ( ( VAR_1 - INT_1 ) ) ) < line ) { METHOD_4 ( ( ( METHOD_5 ( line , STRING_1 ) ) - ( FLOAT_1 * VAR_1 ) ) ) ; } METHOD_6 ( TYPE_1 . create ( line , 0 ) ) ; } 
public void update ( ) throws TYPE_1 { try { schema = VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( VAR_2 , rw , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } finally { if ( ( schema ) != null ) { schema . close ( ) ; schema = null ; } } } 
public static java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Change . Status status ) { if ( status == null ) { return STRING_1 ; } switch ( status ) { case VAR_1 : return TYPE_1 . METHOD_2 ( ) ; case VAR_2 : return TYPE_1 . METHOD_3 ( ) ; case VAR_4 : return TYPE_1 . METHOD_5 ( ) ; case VAR_5 : return TYPE_1 . METHOD_6 ( ) ; default : return status . name ( ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { byte [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; rsp . METHOD_3 ( VAR_3 , INT_1 ) ; rsp . METHOD_4 ( VAR_4 , STRING_1 ) ; rsp . METHOD_4 ( VAR_5 , STRING_2 ) ; rsp . METHOD_5 ( STRING_3 ) ; rsp . METHOD_6 ( VAR_2 . length ) ; try ( TYPE_3 out = rsp . METHOD_7 ( ) ) { out . METHOD_8 ( VAR_2 ) ; } } 
private void METHOD_1 ( final TYPE_1 . Id me , final TYPE_2 . ReviewDb db ) { final TYPE_2 . Account a = TYPE_4 . METHOD_3 ( ) . get ( me , db ) ; if ( a != null ) { METHOD_1 ( a . METHOD_4 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers = VAR_1 . METHOD_2 ( java.util.Collections.singleton ( user . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = name ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . projects ( ) . create ( name ) . get ( ) . name ) . isEqualTo ( name ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_2 ( name , VAR_3 ) ; VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) ; VAR_4 . METHOD_3 ( name , STRING_2 , new java.lang.String [ ] { } ) ; } 
public void METHOD_1 ( java.lang.String projectName , TYPE_1 VAR_1 , java.lang.String event ) throws TYPE_2 { try ( TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 = VAR_2 . METHOD_3 ( ) ) { VAR_4 . METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) ; } } 
private boolean METHOD_1 ( ) { if ( METHOD_3 ( ) ) { return true ; } switch ( METHOD_4 ( ) . METHOD_5 ( ) ) { case VAR_1 : return false ; case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : default : return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; } } 
private TYPE_1 METHOD_1 ( ) { switch ( status ) { case VAR_1 : return new TYPE_2 ( project , STRING_1 ) ; case VAR_2 : return new TYPE_3 ( project , STRING_1 ) ; case VAR_3 : case VAR_4 : default : return new TYPE_4 ( project , STRING_1 ) ; } } 
static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return new TYPE_2 ( null , change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) , null , null ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( change == null ) { return false ; } TYPE_2 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ; if ( VAR_1 == null ) { return false ; } TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( user ) ; return VAR_3 . METHOD_2 ( db , change ) . METHOD_3 ( db ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) throws TYPE_1 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_2 { final org.eclipse.jgit.lib.Repository git ; try { git = VAR_1 . METHOD_2 ( project ) ; } catch ( TYPE_3 e ) { return ; } try { TYPE_4 notes = VAR_2 . create ( db , project , git ) ; notes . create ( changes , null , STRING_1 , VAR_3 ) ; } finally { git . close ( ) ; } } 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc ) ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( rsrc ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 . METHOD_3 ( ) , VAR_2 , VAR_3 ) ; try ( TYPE_6 u = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) , TYPE_7 . METHOD_4 ( ) ) ) { u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) ; } return VAR_4 . change ; } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 , int value ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException { if ( METHOD_2 ( cd . change ( ) , VAR_1 , VAR_2 , value ) ) { return true ; } return VAR_3 . user ( VAR_1 ) . change ( cd ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; } 
public TYPE_1 create ( TYPE_2 req , org.eclipse.jgit.lib.Repository repo ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_1 = TYPE_6 . METHOD_1 ( req ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_3 ( ) ; } TYPE_1 VAR_2 = new TYPE_1 ( repo ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; if ( ! ( VAR_1 . METHOD_4 ( ) ) ) { VAR_2 . METHOD_5 ( new TYPE_7 ( repo , VAR_1 , db . get ( ) , true ) ) ; } return VAR_2 ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { if ( VAR_2 > ( cfg . METHOD_2 ( ) ) ) { return false ; } if ( ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) >= ( VAR_4 ) ) { METHOD_5 ( VAR_1 . METHOD_3 ( ) . METHOD_6 ( ) , VAR_3 ) ; return true ; } return false ; } 
public void bind ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t instanceof TYPE_3 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( t ) ) ; if ( ( VAR_3 ) >= ( this . VAR_4 ) ) { VAR_5 = this ; if ( ( VAR_3 ) < ( VAR_6 ) ) VAR_1 . METHOD_2 ( VAR_2 ) ; return ; } } VAR_7 = t ; if ( ( VAR_4 ) < ( VAR_6 ) ) VAR_1 . METHOD_2 ( this ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = name ( STRING_1 ) ; TYPE_1 in = new TYPE_1 ( ) ; in . name = VAR_1 ; VAR_2 = true ; VAR_3 . projects ( ) . create ( in ) ; METHOD_2 ( VAR_1 , STRING_2 ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = METHOD_4 ( db , cd ) . reviewers ( ) . METHOD_5 ( ) ; return VAR_1 . contains ( METHOD_2 ( ) . getAccountId ( ) ) ; } return false ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } else { VAR_1 . METHOD_2 ( ) ; } VAR_1 . METHOD_3 ( new TYPE_2 ( ) { public void run ( ) { VAR_2 this . METHOD_4 ( ) ; } } , INT_1 , VAR_3 ) ; } 
private boolean METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } if ( METHOD_3 ( ) ) { return true ; } switch ( METHOD_4 ( ) . METHOD_5 ( ) ) { case VAR_1 : return false ; case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : default : return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; } } 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc . getChange ( ) ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( rsrc ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } 
private static com.google.gerrit.server.query.change.ChangeData change ( java.lang.String ... VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_1 . METHOD_1 ( VAR_1 ) ; com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , 1 ) ; cd . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ; return cd ; } 
protected void METHOD_1 ( ) { TYPE_1 cfg = new TYPE_1 ( ) ; cfg . METHOD_2 ( STRING_1 , null , STRING_2 , INT_1 ) ; cfg . METHOD_2 ( STRING_1 , null , STRING_3 , ( ( int ) ( FLOAT_1 ) ) ) ; bind ( VAR_1 class ) . METHOD_3 ( new TYPE_2 ( null , null , null , null , null , null , null , cfg ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) { return null ; } return VAR_1 . METHOD_2 ( ) . METHOD_3 ( this : : METHOD_4 ) . collect ( TYPE_3 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; TYPE_2 in = new TYPE_2 ( ) ; VAR_1 = user . email ; VAR_2 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_1 ( in ) ; com.google.common.truth.Truth.assertThat ( METHOD_3 ( r . getChangeId ( ) ) ) . METHOD_4 ( TYPE_4 . of ( user . id ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + STRING_2 ; repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) ; java.lang.String VAR_2 = METHOD_2 ( STRING_5 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( STRING_7 + STRING_8 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( STRING_9 + STRING_10 ) ) ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 class ) ; bind ( VAR_3 . ReviewDb class ) . METHOD_2 ( VAR_4 class ) . in ( VAR_2 class ) ; bind ( VAR_5 class ) . in ( VAR_6 ) ; bind ( VAR_7 class ) ; bind ( VAR_8 . Factory class ) . in ( VAR_6 ) ; bind ( VAR_9 . Factory class ) . in ( VAR_6 ) ; bind ( VAR_10 . Factory class ) . in ( VAR_6 ) ; } 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId , final TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException { return db . changes ( ) . METHOD_2 ( changeId , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change . getStatus ( ) . METHOD_3 ( ) ) { change . METHOD_4 ( VAR_2 ) ; change . METHOD_5 ( VAR_1 ) ; return change ; } return null ; } } ) ; } 
TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 { final TYPE_4 VAR_1 = METHOD_2 ( ) ; VAR_1 . put ( VAR_2 , VAR_3 ) ; VAR_1 . put ( VAR_4 , VAR_5 ) ; if ( STRING_1 . equals ( VAR_3 ) ) { return METHOD_3 ( VAR_1 ) ; } if ( ( VAR_6 ) != null ) { VAR_1 . put ( VAR_7 , VAR_6 ) ; VAR_1 . put ( VAR_8 , VAR_9 ) ; } return new TYPE_5 ( VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . get ( ) . changes ( ) . get ( changeId ) ; if ( c == null ) { throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; } return VAR_1 . create ( db . get ( ) , c . getProject ( ) , changeId ) ; } 
static void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 < ? > VAR_2 , final java.lang.String name ) throws java.io.IOException { try ( TYPE_3 in = TYPE_4 . METHOD_2 ( VAR_2 , name ) ) { if ( in != null ) { TYPE_5 VAR_3 = TYPE_6 . METHOD_3 ( in , INT_1 ) ; TYPE_4 . METHOD_4 ( VAR_1 , VAR_3 ) ; } } } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 p ) { TYPE_5 . METHOD_3 ( p . METHOD_4 ( new TYPE_6 ( ) ) ) ; } } ) ; if ( ( view ) != null ) { close ( ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { java.lang.String b = ( ( base ) != null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ; java.lang.String VAR_2 = java.lang.String . METHOD_2 ( revision . get ( ) ) ; TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( id ( STRING_4 ) ) ) + STRING_5 ) ) ; } 
public static java.lang.String METHOD_1 ( short value ) { if ( value < 0 ) { return TYPE_1 . toString ( value ) ; } else if ( value == 0 ) { return STRING_1 ; } else { return STRING_2 + ( TYPE_1 . toString ( value ) ) ; } } 
private static int METHOD_1 ( TYPE_1 < ? > c ) { java.lang.String n = c . getName ( ) ; n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ; while ( n . METHOD_4 ( STRING_1 ) ) n = n . METHOD_2 ( 1 ) ; return TYPE_2 . METHOD_5 ( n ) ; } 
public static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { final TYPE_1 p = VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) ; VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) ; } } 
TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_3 , final java.util.List < TYPE_4 > VAR_4 ) throws java.io.IOException { VAR_5 = db . METHOD_2 ( ) ; try { return METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; } finally { VAR_5 . METHOD_4 ( ) ; } } 
private int METHOD_1 ( final TYPE_1 < TYPE_2 > i , int row , final int VAR_1 ) { while ( i . METHOD_2 ( ) ) { final TYPE_2 c = i . METHOD_3 ( ) ; if ( ( c . METHOD_4 ( ) ) == ( VAR_3 ) ) { METHOD_5 ( row ) ; } else { METHOD_6 ( row ) ; } METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) ) ; row ++ ; } return row ; } 
public java.lang.String METHOD_1 ( java.lang.String input ) { java.lang.String VAR_1 = VAR_2 . METHOD_1 ( input , VAR_3 ) ; if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { throw new TYPE_2 ( ( ( ( STRING_1 + ( toString ( ) ) ) + STRING_2 ) + VAR_1 ) ) ; } return new TYPE_3 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_3 , VAR_1 ) . append ( TYPE_4 . METHOD_5 ( input ) ) . METHOD_6 ( ) . METHOD_7 ( ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws com.google.gwtorm.server.OrmException { int VAR_3 = VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 . NameKey ( VAR_2 . getName ( ) ) ) . METHOD_5 ( new TYPE_4 . Id ( VAR_3 ) ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) . METHOD_10 ( ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) { if ( ( VAR_1 . size ( ) ) != 1 ) { throw new TYPE_4 ( STRING_1 ) ; } return new TYPE_5 ( getName ( ) , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; } 
public java.lang.String apply ( TYPE_1 rsrc ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 == null ) { throw new TYPE_2 ( ) ; } java.lang.String url = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) ) ; if ( TYPE_4 . METHOD_3 ( url ) ) { throw new TYPE_2 ( ) ; } return url ; } 
public static void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , TYPE_1 < TYPE_2 > VAR_3 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( VAR_1 ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 , STRING_5 ) . METHOD_5 ( STRING_6 , VAR_2 ) . METHOD_6 ( STRING_7 ) . get ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ; } 
public TYPE_1 < java.util.List < TYPE_2 > > apply ( java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) { java.util.List < TYPE_1 < TYPE_2 > > result = TYPE_3 . METHOD_1 ( changes . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change c : changes ) { result . add ( VAR_1 . submit ( new TYPE_4 ( event , c . getId ( ) ) ) ) ; } return TYPE_5 . METHOD_3 ( result ) ; } 
public static void METHOD_1 ( TYPE_1 file , java.lang.String name , TYPE_2 VAR_1 ) throws java.io.IOException { VAR_1 . METHOD_2 ( new TYPE_3 ( name ) ) ; try ( TYPE_4 input = new TYPE_4 ( file ) ) { TYPE_5 . METHOD_3 ( input , VAR_1 ) ; } VAR_1 . METHOD_4 ( ) ; } 
private void METHOD_1 ( ) { final java.util.Set < TYPE_3 . Id > VAR_1 = user . METHOD_3 ( ) ; final TYPE_4 VAR_2 = VAR_3 . get ( change . METHOD_4 ( ) . getParentKey ( ) ) ; METHOD_1 ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; METHOD_1 ( VAR_1 , VAR_3 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_4 ( repo , commit , null , null , null ) ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 ) ; METHOD_5 ( STRING_9 , change ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_5 , VAR_3 , VAR_4 ) . METHOD_5 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_6 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_6 , VAR_7 ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , null , true ) ; TYPE_2 r = VAR_3 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_4 ) ; r . METHOD_5 ( ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 > result ) { final java.util.List < TYPE_3 > r = new java.util.ArrayList ( result . length ( ) ) ; for ( final TYPE_2 VAR_1 : TYPE_4 . METHOD_1 ( result ) ) { r . add ( new TYPE_3 ( VAR_1 ) ) ; } VAR_2 . METHOD_2 ( req , new TYPE_5 ( r ) ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 , java.lang.String changeId ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , git , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) , changeId ) ; return VAR_2 . to ( STRING_1 ) . getChangeId ( ) ; } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws java.io.IOException , TYPE_3 { try ( org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_1 ( VAR_2 ) ) { TYPE_4 p = TYPE_4 . METHOD_2 ( ) ; p . METHOD_3 ( git ) ; return new TYPE_1 ( null , p , git ) ; } } 
public static void METHOD_1 ( java.lang.String project , int id , java.lang.String msg , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . message ( TYPE_4 . METHOD_2 ( msg ) ) ; TYPE_4 . METHOD_3 ( project , id , STRING_1 ) . METHOD_4 ( input , VAR_1 ) ; } 
void display ( java.util.List < java.util.List < java.lang.String > > values ) { for ( int row = 2 ; row < ( table . METHOD_1 ( ) ) ; row ++ ) { table . METHOD_2 ( ( row -- ) ) ; } int row = 2 ; for ( java.util.List < java.lang.String > VAR_1 : values ) { METHOD_3 ( row , VAR_1 , ( row == ( ( values . size ( ) ) + 1 ) ) ) ; row ++ ; } } 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { final TYPE_2 . Change change = db . changes ( ) . get ( id ) ; if ( change == null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } final TYPE_6 VAR_1 = new TYPE_6 ( ) ; final TYPE_1 d = new TYPE_1 ( ) ; d . METHOD_1 ( db , new TYPE_7 ( db ) , VAR_1 , change ) ; return d ; } 
public boolean METHOD_1 ( ) throws TYPE_1 { try ( TYPE_2 VAR_1 = VAR_3 . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( null , null , TYPE_4 . METHOD_5 ( ) , null ) ) { return VAR_2 . METHOD_6 ( ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 . size ( ) ) > 0 ) { java.util.Set < TYPE_3 > VAR_4 = new TYPE_4 ( VAR_2 . METHOD_2 ( ) ) ; for ( TYPE_3 s : VAR_2 . METHOD_2 ( ) ) { if ( VAR_3 . contains ( s . METHOD_3 ( ) ) ) { VAR_4 . METHOD_4 ( s ) ; } } VAR_2 . METHOD_5 ( VAR_4 ) ; } VAR_5 . METHOD_1 ( VAR_1 , VAR_2 ) ; } 
public java.util.List < TYPE_1 > get ( ) throws TYPE_2 , com.google.gwtorm.server.OrmException { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 ) ) ) { return METHOD_2 ( ) ; } if ( VAR_2 ) { return METHOD_3 ( ( ( user ) != null ? VAR_3 . create ( user ) : VAR_4 . get ( ) ) ) ; } if ( ( user ) != null ) { return VAR_5 . apply ( new TYPE_4 ( VAR_3 . create ( user ) ) ) ; } return METHOD_4 ( ) ; } 
public TYPE_1 < com.google.gerrit.reviewdb.client . AccountGroup > METHOD_1 ( ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) { return java.util.Collections . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( ) . METHOD_5 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_1 . METHOD_6 ( STRING_1 , e ) ; return java.util.Collections . METHOD_7 ( ) ; } } 
TYPE_1 get ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.server.query.change.ChangeData VAR_2 , int VAR_3 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = VAR_2 . change ( ) . getProject ( ) ; java.lang.String branch = VAR_2 . change ( ) . METHOD_1 ( ) . get ( ) ; java.lang.String VAR_4 = TYPE_2 . METHOD_2 ( VAR_2 . getId ( ) . get ( ) , VAR_3 , branch ) ; return get ( VAR_4 , VAR_1 , project , branch , VAR_2 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) . METHOD_3 ( ) ; TYPE_1 u = user ( ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( ) ) ; METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_4 ) . METHOD_5 ( ) ) ; METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_5 ) . METHOD_5 ( ) ) ; METHOD_4 ( STRING_6 , u . METHOD_6 ( STRING_7 ) . METHOD_5 ( ) ) ; } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client.Change change ) throws TYPE_3 { try { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ; return VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_1 ( change ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } 
private static final boolean METHOD_1 ( ) { final java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 < java.lang.String > ( ) { public java.lang.String run ( ) { return TYPE_3 . METHOD_3 ( STRING_1 ) ; } } ) ; return ( VAR_1 != null ) && ( VAR_1 . METHOD_4 ( ) . contains ( STRING_2 ) ) ; } 
public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_1 ) ) ; org.junit.Assert.assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( STRING_2 ) ) ; org.junit.Assert.assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_4 ) ) ; org.junit.Assert.assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_5 ) ) ; org.junit.Assert.assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 ) ) ; org.junit.Assert.assertEquals ( STRING_8 , TYPE_1 . METHOD_2 ( STRING_9 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1 . id ( VAR_2 . apply ( change , in ) . VAR_3 ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_4 | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
private TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { return query ( TYPE_3 . METHOD_2 ( TYPE_4 . ref ( branch ) , TYPE_4 . project ( branch . getParentKey ( ) ) , TYPE_3 . not ( TYPE_4 . status ( VAR_2 ) ) , TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ) ) ; } 
public boolean METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 ) { boolean VAR_2 = ( ( VAR_3 . equals ( VAR_1 ) ) && ( ( token ) != null ) ) && ( ( VAR_4 ) != null ) ; if ( VAR_2 && ( ( VAR_5 ) == null ) ) { try { VAR_5 = VAR_4 . METHOD_2 ( ) ; } catch ( TYPE_2 e ) { VAR_6 . error ( STRING_1 , e ) ; METHOD_3 ( ) ; VAR_2 = false ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; org.junit.Assert . METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; org.junit.Assert . METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 , STRING_4 ) ) ) ; org.junit.Assert . METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = name ( STRING_1 ) ; TYPE_1 in = new TYPE_1 ( ) ; in . name = VAR_1 ; VAR_2 = true ; VAR_3 = TYPE_2 . METHOD_2 ( INT_1 ) ; VAR_3 . add ( STRING_2 ) ; VAR_3 . add ( STRING_3 ) ; VAR_3 . add ( STRING_4 ) ; VAR_4 . projects ( ) . create ( in ) ; METHOD_3 ( VAR_1 , STRING_2 ) ; METHOD_4 ( VAR_1 , STRING_2 , STRING_3 , STRING_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ; com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) . isEqualTo ( VAR_1 . getChangeId ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert . METHOD_4 ( VAR_1 , n ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( VAR_2 ) + ( TYPE_2 . METHOD_5 ( STRING_2 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( VAR_3 ) ) + STRING_4 ) , n . METHOD_6 ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( cd . METHOD_2 ( ) ) != null ) { return cd . METHOD_2 ( ) ; } cd . METHOD_4 ( new TYPE_3 ( cd ) . METHOD_6 ( true ) . METHOD_7 ( true ) . METHOD_8 ( ) ) ; return cd . METHOD_2 ( ) ; } 
private void METHOD_1 ( TYPE_1 ctx , TYPE_2 msg ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ; com.google.gerrit.reviewdb.server.ReviewDb db = ctx . METHOD_2 ( ) ; METHOD_3 ( STRING_1 , c . getId ( ) ) ; c . METHOD_4 ( VAR_1 ) ; c . METHOD_5 ( VAR_2 ) ; if ( msg != null ) { VAR_3 . METHOD_7 ( db , ctx . METHOD_8 ( msg . METHOD_9 ( ) ) , msg ) ; } } 
public TYPE_1 get ( long VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 , TYPE_4 , TYPE_5 { if ( ! ( METHOD_1 ( ) ) ) { if ( VAR_3 . METHOD_2 ( VAR_4 , ( ( int ) ( TYPE_6 . METHOD_3 ( VAR_1 , VAR_2 ) ) ) ) ) { set ( null ) ; } else { throw new TYPE_5 ( ) ; } } return super . get ( VAR_1 , VAR_2 ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { TYPE_2 res = new TYPE_2 ( ) ; METHOD_2 ( VAR_1 , VAR_2 < TYPE_3 > METHOD_3 ( ) , res ) ; org.junit.Assert.assertEquals ( INT_1 , res . getStatus ( ) ) ; return res . METHOD_4 ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result change = METHOD_2 ( true ) ; TYPE_1 . Result VAR_1 = METHOD_2 ( true ) ; TYPE_1 . Result VAR_2 = METHOD_2 ( true ) ; METHOD_2 ( false ) ; java.util.Set < java.lang.String > changes = METHOD_3 ( change ) ; METHOD_4 ( changes , VAR_1 , VAR_2 ) ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String name , final TYPE_2 < ? extends TYPE_3 > VAR_2 ) { TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( VAR_4 class ) ; if ( VAR_3 == null ) { throw new TYPE_5 ( STRING_1 ) ; } bind ( TYPE_6 . key ( VAR_1 , name , VAR_3 . METHOD_3 ( ) ) ) . to ( VAR_2 ) ; } 
protected void METHOD_1 ( TYPE_1 result ) { VAR_1 = new TYPE_2 ( this , getProject ( ) , base , revision , path , result . METHOD_2 ( ) , METHOD_3 ( ) . METHOD_4 ( ) ) ; METHOD_5 ( result . METHOD_6 ( ) ) ; display ( VAR_2 ) ; VAR_3 . METHOD_7 ( VAR_2 ) ; } 
public TYPE_1 < ? > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change change , TYPE_2 VAR_1 , final org.eclipse.jgit.lib.Repository VAR_4 ) { return VAR_1 . submit ( new TYPE_4 < TYPE_5 > ( ) { public TYPE_5 METHOD_2 ( ) throws java.lang.Exception { METHOD_3 ( change , VAR_4 ) ; return null ; } } ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 class ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . in ( VAR_2 class ) ; bind ( VAR_8 . Factory class ) . in ( VAR_5 ) ; factory ( VAR_9 . Factory class ) ; factory ( VAR_10 . Factory class ) ; } 
protected static void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String table , java.lang.String VAR_1 , java.lang.String to ) throws com.google.gwtorm.server.OrmException { TYPE_1 s = ( ( TYPE_1 ) ( db ) ) ; try ( TYPE_2 e = new TYPE_2 ( s ) ) { s . METHOD_2 ( e , table , VAR_1 , to ) ; } } 
protected void run ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; input . ref = VAR_1 ; try { VAR_2 . apply ( new TYPE_2 ( project , user ) , input ) ; } catch ( TYPE_3 e ) { throw METHOD_3 ( e ) ; } } 
private int METHOD_1 ( final int VAR_1 ) { for ( final TYPE_1 s : VAR_2 ) { boolean VAR_3 = false ; if ( VAR_1 <= ( VAR_4 ) ) { ( VAR_4 ) ++ ; } if ( VAR_1 < ( VAR_5 ) ) { ( VAR_5 ) ++ ; } } return table . METHOD_1 ( VAR_1 ) ; } 
public < TYPE_1 extends TYPE_2 > void METHOD_1 ( final TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 req = new TYPE_4 ( VAR_2 , url . toString ( ) ) ; req . METHOD_2 ( STRING_1 , VAR_3 ) ; req . METHOD_3 ( new TYPE_5 < TYPE_1 > ( VAR_1 ) ) ; try { TYPE_6 . METHOD_4 ( ) ; req . METHOD_1 ( ) ; } catch ( TYPE_7 e ) { TYPE_6 . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( e ) ; } } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . email ( ) ) != null ) { return VAR_1 . email ( ) ; } else if ( ( VAR_1 . name ( ) ) != null ) { return VAR_1 . name ( ) ; } else { return STRING_1 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_1 = insert ( METHOD_3 ( repo , null , null , null , null ) ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = insert ( METHOD_3 ( repo , null , null , null , null ) ) ; METHOD_4 ( STRING_2 ) ; METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) ; METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ; } 
public TYPE_1 get ( TYPE_2 VAR_1 ) { final TYPE_3 ref = TYPE_4 . METHOD_1 ( VAR_1 ) ; return new TYPE_5 ( ) { public java.lang.String getName ( ) { return ref . getName ( ) ; } public TYPE_6 METHOD_2 ( ) { return ref . METHOD_3 ( ) ; } public java.lang.String METHOD_4 ( ) { return null ; } public java.lang.String METHOD_5 ( ) { return null ; } } ; } 
private void METHOD_1 ( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) { java.lang.String VAR_4 = METHOD_2 ( VAR_2 , VAR_3 , line ) ; VAR_1 . append ( STRING_1 ) . append ( line ) . append ( STRING_2 ) . append ( VAR_4 ) . append ( STRING_3 ) ; } 
private static void METHOD_1 ( TYPE_1 config , TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 . sshd ( config , VAR_1 ) ; TYPE_4 . METHOD_2 ( config , VAR_1 ) ; TYPE_4 . user ( config , VAR_1 ) ; TYPE_4 . auth ( config , VAR_1 ) ; TYPE_4 . METHOD_3 ( config , VAR_1 ) ; TYPE_4 . repo ( config , VAR_1 ) ; } 
private static void METHOD_1 ( final byte [ ] VAR_1 , final TYPE_1 out ) { final byte [ ] VAR_2 = out . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) org.junit.Assert.assertEquals ( VAR_1 [ i ] , VAR_2 [ i ] ) ; } 
public java.util.List < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( psId . getParentKey ( ) ) ; if ( c == null ) { return null ; } TYPE_1 notes = VAR_1 . create ( db , c ) ; com.google.gerrit.reviewdb.client.PatchSet ps = VAR_2 . get ( db , notes , psId ) ; return ps != null ? ps . METHOD_2 ( ) : null ; } 
public boolean METHOD_1 ( ) { while ( ( ( VAR_1 ) == null ) && ( VAR_2 . METHOD_1 ( ) ) ) { TYPE_1 < TYPE_2 > p = VAR_2 . METHOD_2 ( ) . get ( ) ; if ( p != null ) { try { VAR_1 = p . get ( ) ; } catch ( TYPE_3 e ) { } } } return ( VAR_1 ) != null ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) && ( ! ( METHOD_2 ( db , cd ) ) ) ) { return false ; } return METHOD_3 ( ) ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = event . METHOD_2 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 ; if ( VAR_1 instanceof TYPE_3 ) { VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_3 ( ) ; } else { VAR_2 = TYPE_3 . METHOD_4 ( ) ; } if ( VAR_2 != null ) { METHOD_5 ( true ) ; METHOD_1 ( VAR_2 ) ; } else { METHOD_5 ( false ) ; } super . METHOD_1 ( event ) ; } 
protected TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . create ( TYPE_3 . of ( db ) , VAR_1 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3 . of ( db ) ; } } ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_5 ( VAR_7 , VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ; TYPE_8 . HttpServletResponse rsp = ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ; if ( METHOD_3 ( req , rsp ) ) { VAR_3 . METHOD_1 ( req , VAR_2 ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( getProject ( ) , base , revision , path ) ) ; VAR_1 . METHOD_7 ( TYPE_5 . METHOD_4 ( ) ) ; return java.util.Collections . METHOD_8 ( VAR_1 ) ; } 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , com.google.gwtorm.server.OrmException { try { if ( rsrc . METHOD_1 ( ) ) { throw new TYPE_5 ( STRING_1 ) ; } if ( ! ( METHOD_2 ( rsrc ) ) ) { VAR_1 . METHOD_3 ( rsrc ) ; } return TYPE_1 . METHOD_4 ( STRING_2 ) ; } catch ( TYPE_6 e ) { throw new TYPE_7 ( e . getMessage ( ) ) ; } } 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { final TYPE_2 . AccountGroup group = db . METHOD_1 ( ) . get ( VAR_1 ) ; METHOD_2 ( db , group ) ; group . METHOD_3 ( VAR_2 ) ; db . METHOD_1 ( ) . update ( java.util.Collections.singleton ( group ) ) ; VAR_3 . METHOD_4 ( group ) ; return VAR_4 ; } 
private static void METHOD_1 ( TYPE_1 req ) throws TYPE_2 { if ( ! ( ( STRING_1 . equals ( req . METHOD_2 ( ) ) ) || ( STRING_2 . equals ( req . METHOD_2 ( ) ) ) ) ) { throw new TYPE_2 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_4 ( ) ) . isEmpty ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_7 ( ) ) . isEmpty ( ) ; } 
public TYPE_1 METHOD_1 ( int index , TYPE_2 VAR_1 ) { int VAR_2 = METHOD_2 ( index , false , VAR_3 ) ; if ( VAR_2 < 0 ) { return null ; } return METHOD_3 ( VAR_2 , VAR_1 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { return new TYPE_3 ( ) . METHOD_2 ( new TYPE_4 . Key ( repo , VAR_1 , VAR_2 , VAR_3 ) ) ; } catch ( java.io.IOException e ) { VAR_4 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) ; return VAR_5 ; } } 
public void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , java.io.IOException { METHOD_2 ( ctx ) ; if ( ! ( VAR_3 ) ) { return ; } ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , patchSet . getRefName ( ) ) ) ; } 
void METHOD_1 ( int VAR_1 , int VAR_2 ) { METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) ; if ( VAR_1 < VAR_2 ) { METHOD_4 ( ( VAR_2 - VAR_1 ) ) ; } else if ( VAR_1 > VAR_2 ) { METHOD_5 ( ( VAR_1 - VAR_2 ) ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 rsrc , java.lang.String VAR_1 ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_4 VAR_2 = new TYPE_4 ( ) ; VAR_3 = VAR_1 ; VAR_4 = VAR_5 ; VAR_6 = true ; VAR_7 = VAR_8 ; return VAR_9 . METHOD_2 ( rsrc , VAR_2 , false ) ; } 
static TYPE_1 METHOD_1 ( TYPE_2 type ) { return new TYPE_3 ( VAR_1 , TYPE_4 . METHOD_2 ( type . getName ( ) ) , TYPE_4 . METHOD_2 ( type . METHOD_3 ( ) ) , new TYPE_5 ( type . METHOD_4 ( ) . getValue ( ) ) , new TYPE_5 ( type . METHOD_5 ( ) . getValue ( ) ) ) ; } 
public void METHOD_1 ( final TYPE_1 event ) { final TYPE_2 VAR_1 = table . METHOD_2 ( event ) ; if ( VAR_1 == null ) { return ; } if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) { } else if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) { } else if ( ( METHOD_6 ( VAR_1 . METHOD_5 ( ) ) ) != null ) { METHOD_7 ( VAR_1 . METHOD_5 ( ) ) ; } } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res ) throws java.io.IOException { java.lang.String name = METHOD_2 ( TYPE_3 . METHOD_3 ( req ) , TYPE_4 . METHOD_4 ( req ) , req , res ) ; if ( name == null ) { return ; } try ( TYPE_5 out = METHOD_5 ( req , res ) ) { out . METHOD_6 ( TYPE_6 . METHOD_7 ( name ) ) ; } } 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 VAR_1 , TYPE_3 < java.lang.String > VAR_2 , TYPE_3 < java.lang.String > VAR_3 , TYPE_3 < java.lang.String > VAR_4 ) { if ( ! ( VAR_5 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_4 e = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; for ( TYPE_5 VAR_6 : VAR_5 ) { VAR_6 . METHOD_4 ( e ) ; } } 
private void METHOD_1 ( TYPE_1 s , java.lang.String changeId , int VAR_1 ) throws java.io.IOException { TYPE_2 r = s . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_3 ( ) . label ( STRING_3 , 2 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; r . METHOD_4 ( ) ; } 
static TYPE_1 create ( TYPE_2 VAR_1 , TYPE_4 VAR_3 ) { TYPE_5 group = ( ( VAR_3 != null ) && ( ( VAR_3 . METHOD_1 ( ) ) != null ) ) ? VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) : null ; return new TYPE_6 ( VAR_1 . getName ( ) , group ) ; } 
private void METHOD_1 ( TYPE_1 cm ) { if ( cm . METHOD_2 ( ) ) { TYPE_2 VAR_1 = cm . METHOD_5 ( ) ; cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) ; cm . METHOD_5 ( null ) ; } } 
private TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 ; if ( ( VAR_2 ) == null ) { VAR_1 = VAR_3 . get ( ) . METHOD_2 ( ) ; } else { VAR_1 = VAR_2 ; } return new TYPE_1 ( VAR_3 . get ( ) , VAR_1 , VAR_4 . create ( VAR_1 , VAR_6 ) ) ; } 
private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = new TYPE_1 < java.lang.String > ( ) ; for ( TYPE_2 VAR_3 : METHOD_2 ( ) ) { TYPE_3 VAR_4 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_4 != null ) { VAR_2 . add ( VAR_3 . getName ( ) ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String config = STRING_1 + ( STRING_2 + STRING_3 ) ; TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_4 ( new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_5 . NameKey ( STRING_5 ) , new TYPE_5 . Id ( 1 ) , new TYPE_6 ( STRING_4 ) ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( new TYPE_3 ( STRING_4 ) . get ( ) , projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . METHOD_5 ( VAR_4 , VAR_9 ) . METHOD_5 ( VAR_8 , VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out ; out = METHOD_3 ( in ) ; org.junit.Assert . METHOD_4 ( ( ( out instanceof TYPE_2 ) || ( out instanceof TYPE_3 ) ) ) ; VAR_1 . METHOD_5 ( null ) ; out = METHOD_3 ( in ) ; org.junit.Assert . METHOD_4 ( ( out instanceof TYPE_4 ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_5 VAR_3 : VAR_4 ) { try { VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 ) ) ; } catch ( TYPE_3 e ) { VAR_2 . METHOD_2 ( e . METHOD_3 ( ) ) ; throw new TYPE_3 ( e . getMessage ( ) , VAR_2 ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_2 = new TYPE_2 ( ( ( TYPE_3 ) ( VAR_3 . METHOD_6 ( project ) ) ) ) ; VAR_4 = VAR_2 . METHOD_7 ( ) . parseCommit ( VAR_2 . METHOD_8 ( ) . METHOD_9 ( STRING_1 ) . METHOD_10 ( ) ) ; VAR_5 = admin . getId ( ) ; VAR_6 = VAR_7 . get ( ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit ) { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ; VAR_1 . error ( msg , e ) ; return false ; } } 
protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { try { return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } } return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( final TYPE_1 . ReviewDb db , final TYPE_1 . PatchSet ps ) throws TYPE_2 . OrmException { patchSet = ps ; info = db . METHOD_2 ( ) . get ( patchSet . getId ( ) ) ; VAR_1 = db . METHOD_3 ( ) . METHOD_4 ( patchSet . getId ( ) ) . METHOD_5 ( ) ; } 
private TYPE_4 METHOD_1 ( TYPE_2 cfg , java.lang.String revision ) { return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( METHOD_8 ( cfg , revision ) ) . METHOD_9 ( true ) ; } 
private void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5 VAR_3 ) { TYPE_6 event = new TYPE_6 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_7 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_8 . log , e ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; VAR_2 = VAR_4 . METHOD_3 ( ) ; if ( ! ( VAR_2 instanceof TYPE_5 ) ) return VAR_1 . METHOD_5 ( ) ; VAR_3 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_6 ( ) ; VAR_5 = this . VAR_6 ; return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ; final TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 . add ( file ( STRING_4 ) ) ; org.junit.Assert . METHOD_5 ( VAR_1 . commit ( ) ) ; org.junit.Assert.assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) ; } 
private void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , java.lang.String VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 event = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_6 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_7 . log , e ) ; } } } 
private double METHOD_1 ( double VAR_1 ) { int line = VAR_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( line == 0 ) { return VAR_1 ; } TYPE_1 p = VAR_3 . METHOD_1 ( VAR_4 , line ) ; double VAR_5 = VAR_2 . METHOD_3 ( VAR_6 , STRING_1 ) ; double VAR_7 = VAR_8 . METHOD_3 ( VAR_9 , STRING_1 ) ; return TYPE_2 . METHOD_4 ( 0 , ( VAR_7 + ( VAR_1 - VAR_5 ) ) ) ; } 
private int insert ( final java.util.List < TYPE_1 > in , int row ) { for ( TYPE_2 < TYPE_1 > VAR_1 = in . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; ) { final TYPE_1 c = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( row ) ; METHOD_7 ( row , VAR_3 , c , ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ; row ++ ; } return row ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( change == null ) { return false ; } TYPE_2 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ; if ( VAR_1 == null ) { return false ; } TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( user ) ; return VAR_3 . METHOD_2 ( db , change ) . METHOD_3 ( db ) ; } 
public void set ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { set ( ( ( VAR_1 . css ( ) ) != null ? VAR_1 . css ( ) : VAR_2 ) , ( ( VAR_1 . METHOD_1 ( ) ) != null ? VAR_1 . METHOD_1 ( ) : VAR_3 ) , ( ( VAR_1 . METHOD_2 ( ) ) != null ? VAR_1 . METHOD_2 ( ) : VAR_4 ) ) ; } else { set ( VAR_2 , VAR_3 , VAR_4 ) ; } } 
public static void METHOD_1 ( final TYPE_1 VAR_1 , int value ) throws java.io.IOException { while ( true ) { if ( ( value & ( ~ INT_1 ) ) == 0 ) { VAR_1 . METHOD_2 ( value ) ; return ; } VAR_1 . METHOD_2 ( ( ( value & INT_1 ) | INT_2 ) ) ; value >>>= INT_3 ; } } 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( req , res , null , c ) ; TYPE_4 . METHOD_4 ( null , res , msg ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; final java.lang.String name = STRING_2 ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( user ) ; org.junit.Assert . METHOD_5 ( r ) ; org.junit.Assert.assertEquals ( ( name + STRING_3 ) , r . name ) ; org.junit.Assert.assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } 
public void onSuccess ( final TYPE_1 result ) { VAR_1 = result . config ; if ( ( result . account ) != null ) { VAR_2 = result . account ; VAR_5 = VAR_6 ; } if ( ( VAR_7 ) != null ) { VAR_8 = VAR_7 ; } METHOD_2 ( ) ; } 
private static long METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String path , TYPE_3 t ) throws java.io.IOException { if ( ! ( TYPE_4 . METHOD_2 ( VAR_2 ) ) ) { return 0 ; } try ( TYPE_5 VAR_3 = TYPE_5 . METHOD_3 ( VAR_1 , path , t ) ) { return VAR_3 != null ? VAR_1 . METHOD_4 ( VAR_3 . METHOD_5 ( 0 ) , VAR_4 ) . METHOD_6 ( ) : 0 ; } } 
void METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_3 ; VAR_3 += VAR_1 ; int VAR_4 = ( VAR_3 ) - ( VAR_5 ) ; VAR_6 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) ; VAR_7 . add ( new TYPE_1 ( VAR_5 , ( - 1 ) , VAR_4 ) ) ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { if ( config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ) { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_3 ( config , STRING_2 ) ) ; } else { VAR_1 = new TYPE_1 ( ) ; } } } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( METHOD_2 ( ) ) { new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_3 ( ) ; } else { VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ; } } 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { notes = VAR_1 . create ( db , project , VAR_2 ) ; change = notes . getChange ( ) ; if ( ( change ) == null ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + ( VAR_2 ) ) ) ; } METHOD_3 ( null ) ; return change ; } 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class , VAR_2 ) ; METHOD_2 ( VAR_3 class , VAR_4 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; bind ( VAR_5 class ) . to ( VAR_6 class ) . in ( VAR_7 ) ; bind ( VAR_9 class ) ; bind ( VAR_8 class ) . METHOD_5 ( VAR_9 class ) ; bind ( VAR_10 class ) . to ( VAR_11 class ) ; install ( new TYPE_1 ( ) ) ; } 
static TYPE_1 < java.lang.String , java.util.List < java.lang.String > > METHOD_1 ( java.util.Map < java.lang.String , java.util.Set < java.lang.String > > VAR_1 ) { TYPE_1 < java.lang.String , java.util.List < java.lang.String > > result = new TYPE_2 < > ( ) ; for ( java.lang.String key : TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) { result . put ( key , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( key ) ) ) ; } return result ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; METHOD_3 ( project , STRING_1 , VAR_1 , false , VAR_2 ) ; METHOD_4 ( user ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( r , user . email ) . VAR_3 ) . isEqualTo ( user . getId ( ) . get ( ) ) ; } 
void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } else if ( ( VAR_1 ) == null ) { METHOD_7 ( false ) ; } else { METHOD_8 ( ) ; } } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( new TYPE_2 < java.util.List < TYPE_3 . Project > > ( this ) { protected void METHOD_4 ( final java.util.List < TYPE_3 . Project > result ) { projects . display ( result ) ; projects . METHOD_5 ( true ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_1 = METHOD_3 ( repo ) ; insert ( repo , VAR_1 ) ; java.lang.String VAR_2 = VAR_1 . METHOD_4 ( ) . getRevision ( ) . get ( ) ; METHOD_5 ( STRING_2 ) ; for ( int i = 0 ; i <= INT_1 ; i ++ ) { java.lang.String VAR_3 = VAR_2 . METHOD_6 ( 0 , ( INT_2 - i ) ) ; METHOD_5 ( VAR_3 , VAR_1 . getChange ( ) ) ; } } 
private void METHOD_1 ( ) { boolean VAR_4 = cfg . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( VAR_5 class ) . METHOD_4 ( ) ) ; int VAR_6 = cfg . METHOD_5 ( STRING_1 , STRING_3 , VAR_7 ) ; if ( VAR_4 && ( ( VAR_8 ) > VAR_6 ) ) { VAR_9 . METHOD_6 ( ( ( STRING_4 + VAR_6 ) + STRING_5 ) ) ; VAR_8 = VAR_6 ; } } 
public boolean METHOD_1 ( ) { if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) { return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; } return METHOD_4 ( ) . METHOD_9 ( ) ; } 
private TYPE_1 file ( final java.lang.String name ) throws java.io.IOException { try ( TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) ) { final TYPE_1 e = new TYPE_1 ( name ) ; e . METHOD_2 ( VAR_3 ) ; e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) ; VAR_1 . METHOD_5 ( ) ; return e ; } } 
private void METHOD_1 ( TYPE_1 . ProjectConfig VAR_1 ) throws java.lang.Exception { try ( TYPE_2 VAR_2 = VAR_3 . create ( VAR_1 . getProject ( ) . METHOD_2 ( ) , user ) ) { VAR_1 . commit ( VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_1 . getProject ( ) . METHOD_2 ( ) ) ; } } 
private void METHOD_1 ( TYPE_1 event ) { synchronized ( VAR_1 ) { if ( ! ( VAR_2 . METHOD_1 ( event ) ) ) { VAR_3 = true ; } if ( ( ( VAR_4 ) == null ) && ( ! ( VAR_5 ) ) ) { VAR_4 = VAR_6 . submit ( VAR_7 ) ; } } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_4 ) ; VAR_5 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , java.lang.String VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_4 e = new TYPE_4 ( change , revision , VAR_1 , VAR_2 ) ; for ( TYPE_5 VAR_4 : VAR_3 ) { VAR_4 . METHOD_4 ( e ) ; } } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( cd . METHOD_2 ( user ) ) { return true ; } try { com.google.gerrit.reviewdb.client.Change c = cd . change ( ) ; if ( c == null ) { return false ; } TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( c , user ) ; if ( VAR_1 . METHOD_4 ( db . get ( ) ) ) { cd . METHOD_5 ( VAR_1 ) ; return true ; } } catch ( TYPE_2 e ) { } return false ; } 
protected void METHOD_1 ( ) { install ( new TYPE_2 ( VAR_2 ) ) ; bind ( VAR_3 class ) . to ( VAR_4 class ) ; METHOD_4 ( ) . to ( VAR_4 class ) ; if ( VAR_5 ) { METHOD_4 ( ) . to ( VAR_6 class ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) { final java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList ( VAR_2 . length ) ; for ( final TYPE_2 e : VAR_2 ) { r . add ( e . METHOD_2 ( VAR_1 ) ) ; } return r ; } 
private TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > p ) { if ( p instanceof TYPE_3 < ? > ) { return METHOD_2 ( p ) ; } else { return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 ) . to ( VAR_7 , VAR_4 ) . METHOD_10 ( VAR_9 ) . METHOD_10 ( VAR_8 , VAR_10 ) . METHOD_11 ( VAR_11 ) . METHOD_11 ( VAR_3 ) ; } 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t instanceof TYPE_3 ) return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; if ( ! ( t instanceof TYPE_4 ) ) return false ; return VAR_2 . equals ( ( ( TYPE_4 ) ( t ) ) . VAR_2 ) ; } 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId id , java.lang.String VAR_1 ) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( id ) ; rw . METHOD_2 ( commit ) ; this . commit = commit . name ( ) ; VAR_2 = commit . METHOD_3 ( ) ; this . VAR_1 = VAR_1 ; } 
boolean METHOD_1 ( TYPE_1 t ) { if ( ! ( t instanceof TYPE_2 ) ) return false ; if ( t . equals ( VAR_1 ) ) return true ; return ( ( ( TYPE_2 ) ( t ) ) . name ( ) . length ( ) ) == 1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 ) ; METHOD_3 ( STRING_1 ) ; java.lang.String VAR_1 = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ; METHOD_5 ( user ) ; TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_2 , VAR_1 , false ) ) , METHOD_7 ( ) . get ( ) ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id key ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) { final TYPE_1 VAR_1 = METHOD_1 ( db , key ) ; java.lang.String user = VAR_1 . METHOD_3 ( ) ; if ( user != null ) { VAR_2 . put ( user , TYPE_2 . of ( VAR_1 . METHOD_4 ( ) . getId ( ) ) ) ; } return VAR_1 ; } } 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { TYPE_5 u = user . get ( ) ; if ( u . METHOD_1 ( ) ) { ( ( TYPE_6 ) ( u ) ) . METHOD_2 ( ) ; } return VAR_1 . create ( s ) . format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } 
private TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 ; if ( ( VAR_2 ) == null ) { VAR_1 = VAR_3 . METHOD_2 ( ) ; } else { VAR_1 = VAR_2 ; } if ( ( VAR_5 ) instanceof TYPE_4 ) { VAR_5 = null ; } return new TYPE_1 ( VAR_3 , VAR_1 , VAR_6 . METHOD_3 ( VAR_1 , VAR_7 , VAR_5 ) ) ; } 
protected void add ( final TYPE_1 s ) throws com.google.gwtorm.server.OrmException { final java.lang.String n = s . METHOD_1 ( ) ; METHOD_2 ( n ) ; if ( ( VAR_1 . put ( n , s ) ) != null ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + n ) ) ; } VAR_2 . add ( n ) ; } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) || ( ! ( TYPE_2 . schema ( VAR_2 ) . METHOD_3 ( VAR_3 ) ) ) ) { return java.util.Collections . METHOD_4 ( ) ; } return query ( new TYPE_3 ( VAR_1 ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_3 p ) { long VAR_1 = p . METHOD_2 ( schema ) ; long VAR_2 = p . METHOD_3 ( schema ) ; return TYPE_4 . METHOD_4 ( p . METHOD_5 ( ) . getName ( ) , ( VAR_1 != ( VAR_3 ) ? VAR_1 : null ) , ( VAR_2 != ( VAR_4 ) ? VAR_2 : null ) , false , false ) ; } 
private void METHOD_1 ( TYPE_1 label , TYPE_2 status ) { if ( ( status . METHOD_2 ( ) ) && ( ( status . METHOD_3 ( ) ) == 1 ) ) { TYPE_2 VAR_1 = status . METHOD_4 ( 0 ) ; if ( TYPE_4 . METHOD_5 ( VAR_1 ) ) { VAR_2 = new com.google.gerrit.reviewdb.client.Account.Id ( ( ( TYPE_5 ) ( VAR_1 . METHOD_4 ( 0 ) ) ) . METHOD_6 ( ) ) ; } } } 
TYPE_1 get ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.lib.Repository VAR_3 , com.google.gerrit.server.query.change.ChangeData VAR_4 , int VAR_5 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = VAR_4 . change ( ) . getProject ( ) ; java.lang.String branch = VAR_4 . change ( ) . METHOD_1 ( ) . get ( ) ; java.lang.String VAR_6 = TYPE_4 . METHOD_2 ( VAR_4 . getId ( ) . get ( ) , VAR_5 , branch ) ; return get ( VAR_1 , VAR_2 , VAR_6 , VAR_3 , VAR_4 , project , branch , VAR_4 . METHOD_3 ( ) ) ; } 
public boolean METHOD_1 ( ) { return ( ( ( ( ( ( VAR_1 ) > 0 ) && ( ( VAR_2 ) >= 0 ) ) && ( ( VAR_3 ) > 0 ) ) && ( ( VAR_4 ) >= 0 ) ) && ( ( VAR_1 ) <= ( VAR_3 ) ) ) && ( ( ( VAR_1 ) != ( VAR_3 ) ) || ( ( VAR_2 ) <= ( VAR_4 ) ) ) ; } 
public TYPE_1 < ? > METHOD_1 ( final int id ) { TYPE_1 < ? > result = null ; for ( final TYPE_2 e : VAR_1 ) { final TYPE_1 < ? > t = e . METHOD_1 ( id ) ; if ( t != null ) { if ( result != null ) { return null ; } result = t ; } } return result ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; org.junit.Assert . METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; org.junit.Assert . METHOD_2 ( b , b . append ( new TYPE_2 ( ) { public java.lang.String toString ( ) { return STRING_2 ; } } ) ) ; org.junit.Assert.assertEquals ( STRING_2 , b . METHOD_3 ( ) ) ; } 
private static TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet > patchSets = cd . patchSets ( ) ; TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > result = TYPE_4 . METHOD_3 ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { result . put ( ps . getId ( ) . get ( ) , ps ) ; } return result ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 = null ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_3 = null ; } TYPE_1 . METHOD_5 ( true ) ; } 
public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx . getChange ( ) ; TYPE_3 update = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ; change . METHOD_3 ( VAR_2 ) ; change . METHOD_4 ( ctx . METHOD_5 ( ) ) ; update . METHOD_3 ( VAR_2 ) ; METHOD_6 ( ctx , update ) ; return true ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { TYPE_2 p = new TYPE_2 ( ) ; TYPE_3 VAR_1 = repo . METHOD_2 ( ) ; try { p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ; return p ; } finally { VAR_1 . close ( ) ; } } 
public TYPE_1 create ( TYPE_2 req , org.eclipse.jgit.lib.Repository db ) throws TYPE_3 { final TYPE_4 VAR_1 = ( ( TYPE_4 ) ( req . METHOD_1 ( VAR_2 ) ) ) ; if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_3 ( ) ; } TYPE_5 VAR_3 = factory . create ( VAR_1 , db , null , TYPE_6 . of ( ) ) ; TYPE_1 rp = VAR_3 . METHOD_4 ( ) ; req . METHOD_5 ( VAR_4 , VAR_3 ) ; return rp ; } 
public TYPE_1 METHOD_1 ( TYPE_2 account , TYPE_3 VAR_1 ) throws TYPE_4 , TYPE_5 { try { return VAR_2 . create ( VAR_3 . get ( ) . METHOD_2 ( account , VAR_1 ) ) ; } catch ( TYPE_6 | com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_5 ( e ) ; } } 
void METHOD_1 ( boolean VAR_1 , TYPE_1 < TYPE_2 . ChangeInfo > VAR_2 ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( changeId . get ( ) ) ; TYPE_5 . METHOD_3 ( VAR_3 , TYPE_6 . of ( VAR_4 , VAR_5 ) ) ; if ( ! VAR_1 ) { VAR_3 . METHOD_4 ( ) ; } VAR_3 . get ( VAR_2 ) ; } 
public static int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { try { TYPE_2 VAR_3 = TYPE_3 . get ( VAR_1 ) ; TYPE_4 VAR_4 = TYPE_5 . get ( VAR_1 ) ; com.google.gerrit.server.query.change.ChangeData VAR_5 = TYPE_6 . get ( VAR_1 ) ; org.eclipse.jgit.lib.Repository VAR_6 = TYPE_7 . get ( VAR_1 ) ; return new TYPE_8 ( VAR_6 , VAR_5 , VAR_2 ) . METHOD_1 ( VAR_3 , VAR_4 ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { VAR_7 . error ( STRING_1 , e ) ; return 0 ; } } 
private java.lang.String METHOD_1 ( ) { java.lang.StringBuilder m = new java.lang.StringBuilder ( ) ; m . append ( METHOD_2 ( ) ) ; if ( user . METHOD_3 ( ) ) { TYPE_1 u = user . METHOD_4 ( ) ; if ( u . METHOD_6 ( ) . METHOD_7 ( ) ) { m . append ( STRING_1 ) . append ( u . METHOD_6 ( ) . get ( ) ) . append ( STRING_2 ) ; } } return m . toString ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 edit , boolean VAR_1 ) { TYPE_1 out = new TYPE_1 ( ) ; out . commit = TYPE_3 . METHOD_2 ( edit . METHOD_3 ( ) ) ; VAR_2 = edit . METHOD_4 ( ) . getRevision ( ) . get ( ) ; if ( VAR_1 ) { VAR_4 = METHOD_6 ( edit ) ; } return out ; } 
private static long METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String value ) { TYPE_2 < com.google.gerrit.server.query.change.ChangeData , ? > VAR_1 = schema . METHOD_2 ( ) . get ( TYPE_4 . getName ( ) ) ; if ( VAR_1 == ( TYPE_4 ) ) { return TYPE_5 . METHOD_1 ( value ) ; } else { return TYPE_6 . METHOD_3 ( value ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 c ) throws com.google.gwtorm.server.OrmException , TYPE_4 { java.lang.String url = c . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_1 d : VAR_1 ) { if ( d . METHOD_4 ( url , c ) ) { return d . METHOD_5 ( c ) ; } } throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + url ) ) ; } 
void METHOD_1 ( java.lang.String token ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( token ) ; try { TYPE_3 . METHOD_3 ( VAR_1 . label ( ) ) ; TYPE_4 . METHOD_4 ( VAR_2 , VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } catch ( TYPE_5 e ) { throw VAR_3 . reject ( e . getMessage ( ) ) ; } VAR_4 . put ( VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; TYPE_4 in = new TYPE_4 ( ) ; VAR_1 = user . email ; TYPE_5 VAR_2 = VAR_3 . changes ( ) . id ( r . getChangeId ( ) ) ; VAR_2 . METHOD_1 ( in ) ; org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , TYPE_7 . METHOD_3 ( VAR_2 . get ( ) ) ) ; } 
public void run ( ) { try { TYPE_1 cm = VAR_1 . create ( change.getId ( ) ) ; cm . METHOD_1 ( change . METHOD_2 ( ) ) ; cm . METHOD_3 ( patchSet , VAR_2 ) ; cm . METHOD_4 ( reviewers ) ; cm . METHOD_5 ( VAR_3 ) ; cm . METHOD_6 ( ) ; } catch ( java.lang.Exception e ) { VAR_4 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return false ; if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { final TYPE_2 < ? > p = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return ( TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ) && ( ( METHOD_3 ( ) ) == ( p . METHOD_3 ( ) ) ) ; } return false ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; final int VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( ( 0 <= VAR_1 ? VAR_1 : 0 ) ) ; display ( TYPE_1 . METHOD_4 ( ) ) ; display ( ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , TYPE_1 ... VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( db , VAR_4 . create ( db , c ) ) . values ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) ; } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw ) throws java.io.IOException , TYPE_1 { java.util.Set < TYPE_2 > VAR_1 = new TYPE_3 < > ( ) ; for ( java.lang.String VAR_2 : TYPE_4 . METHOD_2 ( ) ) { VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , VAR_2 ) ) ; } VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , STRING_1 ) ) ; return TYPE_5 . METHOD_1 ( rw , repo , STRING_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( ( ( VAR_3 ) + STRING_3 ) , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_3 ) , ( ( VAR_4 ) + STRING_4 ) , STRING_2 , STRING_5 , STRING_6 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.lib.Repository repo ) { return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , repo , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; } 
private void METHOD_1 ( TYPE_1 . ProjectConfig config , java.util.Set < java.lang.String > VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { for ( TYPE_4 VAR_3 : VAR_2 . METHOD_2 ( ) ) { for ( TYPE_5 VAR_4 : VAR_3 . METHOD_3 ( ) ) { METHOD_4 ( VAR_4 ) ; } } config . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_6 ( VAR_2 . getName ( ) ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; factory ( VAR_10 . Factory class ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ; try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { java.util.List < TYPE_1 > m = VAR_2 . METHOD_2 ( repo , METHOD_3 ( rw ) , rw , VAR_1 , false ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_4 , STRING_5 , STRING_6 ) ; } } 
public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { try { return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } } return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( ) . values ( ) ) { final TYPE_1 VAR_2 = VAR_3 . create ( VAR_4 , p . getAccountId ( ) ) ; if ( VAR_2 . METHOD_2 ( ) . contains ( VAR_5 ) ) { return true ; } } return false ; } 
public void METHOD_5 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) ) ; METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( VAR_2 ) . METHOD_8 ( STRING_2 ) . METHOD_9 ( ) , TYPE_1 . METHOD_3 ( STRING_3 ) ) ; } 
private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( ( VAR_2 ) == null ) || ( ( VAR_2 ) != ( VAR_1 ) ) ) ) { TYPE_2 VAR_3 = VAR_4 . create ( VAR_5 , VAR_1 , rw , repo , VAR_6 , VAR_7 , VAR_8 ) ; try { VAR_3 . update ( ) ; } catch ( TYPE_3 e ) { VAR_9 . error ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ; } } } 
public static < TYPE_1 > void METHOD_1 ( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 . Key < TYPE_5 < TYPE_1 > > key = ( ( TYPE_4 . Key < TYPE_5 < TYPE_1 > > ) ( TYPE_6 . get ( TYPE_7 . METHOD_2 ( VAR_2 class , VAR_1 . METHOD_3 ( ) ) ) ) ) ; binder . bind ( key ) . METHOD_4 ( new TYPE_8 ( VAR_1 , key ) ) . in ( VAR_3 ) ; } 
public static void METHOD_1 ( TYPE_1 < java.lang.String > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { for ( java.lang.String VAR_3 : VAR_1 ) { com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_1 + VAR_3 ) ) . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) . METHOD_6 ( ) ; } com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_2 + VAR_2 ) ) . METHOD_4 ( VAR_2 ) . isEmpty ( ) ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 ui , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , TYPE_3 { for ( TYPE_1 VAR_2 : VAR_1 ) { ui . message ( java.lang.String.format ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ) ; VAR_2 . METHOD_3 ( db ) ; } TYPE_4 s = ( ( TYPE_4 ) ( db ) ) ; try ( TYPE_5 e = new TYPE_5 ( s ) ) { s . METHOD_1 ( e ) ; } } 
public TYPE_1 METHOD_1 ( final java.lang.String name , java.lang.String value ) { if ( ( value != null ) && ( ( value . length ( ) ) > 0 ) ) { final java.lang.String e = METHOD_2 ( name ) ; return METHOD_3 ( name , ( ( e . length ( ) ) > 0 ? ( e + STRING_1 ) + value : value ) ) ; } return this ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , CHAR_1 , TYPE_3 . METHOD_3 ( ) ) { public void METHOD_4 ( final TYPE_4 event ) { event . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( ) ; } } ) ; } } 
public java.util.Set < java.lang.String > METHOD_1 ( ) throws TYPE_1 { try { return TYPE_2 . METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_3 ( true ) . apply ( revision ) . value ( ) ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { if ( user . METHOD_1 ( ) ) { user . METHOD_2 ( ) . METHOD_3 ( ) ; } return VAR_1 . create ( s ) . format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( STRING_3 , a . METHOD_4 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) , a . toString ( ) ) ; } 
private com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ; TYPE_1 notes = VAR_2 . create ( c ) . METHOD_2 ( ) ; return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = METHOD_4 ( db , cd ) . reviewers ( ) . values ( ) ; return VAR_1 . contains ( METHOD_2 ( ) . getAccountId ( ) ) ; } return false ; } 
private void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { walk . METHOD_2 ( walk . parseCommit ( VAR_1 ) ) ; for ( org.eclipse.jgit.revwalk.RevCommit commit : walk ) { METHOD_4 ( commit ) ; } METHOD_5 ( ) ; for ( TYPE_2 < com.google.gerrit.reviewdb.client . PatchSetApproval > VAR_2 : approvals . METHOD_6 ( ) . values ( ) ) { java.util.Collections . METHOD_7 ( ( ( java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > ) ( VAR_2 ) ) , VAR_3 ) ; } } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( getChange ( ) . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( db , cd ) ) ) ) { return false ; } return VAR_1 . METHOD_1 ( ) ; } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return false ; } final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; if ( ( ! ( name . equals ( VAR_2 . name ) ) ) || ( ( VAR_3 ) != ( VAR_4 ) ) ) { return false ; } return new TYPE_3 ( METHOD_1 ( ) ) . equals ( new TYPE_3 ( VAR_2 . METHOD_1 ( ) ) ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( false ) ; VAR_2 . METHOD_3 ( false ) ; super . METHOD_1 ( ) ; TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( false ) ; VAR_2 . METHOD_3 ( false ) ; display ( result ) ; } } ) ; } 
public java.lang.String format ( ) { if ( ( value ) == ( ( short ) ( 0 ) ) ) { return CHAR_1 + ( name ) ; } else if ( ( value ) < 0 ) { return ( name ) + ( value ) ; } else { return ( ( name ) + CHAR_2 ) + ( value ) ; } } 
public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String path , TYPE_1 < TYPE_2 > VAR_1 ) { if ( ( id . get ( ) ) != 0 ) { throw new TYPE_3 ( STRING_1 ) ; } TYPE_4 . METHOD_2 ( project , id . getParentKey ( ) . get ( ) , path ) . view ( STRING_2 ) . get ( VAR_1 ) ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = VAR_1 . change ( ) ; if ( c == null ) { return false ; } com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 = c . currentPatchSetId ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( ) . values ( ) ) { if ( ( p . METHOD_2 ( ) . equals ( VAR_2 ) ) && ( ( p . getValue ( ) ) != 0 ) ) { return true ; } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = name ( STRING_1 ) ; TYPE_1 r = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ; TYPE_2 VAR_3 = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 class ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . name ) . isEqualTo ( VAR_1 ) ; com.google.gerrit.reviewdb.client . AccountGroup group = VAR_5 . get ( new TYPE_3 . NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( group ) . METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( group , VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_2 u = util . user ( VAR_1 , VAR_3 ) ; TYPE_2 d = util . user ( VAR_1 , VAR_3 ) ; org.junit.Assert . METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ; org.junit.Assert . METHOD_4 ( STRING_5 , d . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ; } 
private < TYPE_1 extends TYPE_2 < ? > > void METHOD_1 ( final TYPE_3 VAR_1 , final TYPE_1 VAR_2 , final TYPE_1 VAR_3 ) { METHOD_1 ( VAR_1 , ( VAR_2 != null ? VAR_2 . name ( ) : STRING_1 ) , ( VAR_3 != null ? VAR_3 . name ( ) : STRING_1 ) ) ; } 
private < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 < TYPE_1 > VAR_2 ) { TYPE_5 < TYPE_1 > VAR_3 = new TYPE_5 ( VAR_4 , VAR_2 ) ; try { if ( ! ( VAR_4 ) ) { TYPE_6 . METHOD_2 ( ) ; } METHOD_3 ( VAR_1 ) . METHOD_4 ( null , VAR_3 ) ; } catch ( TYPE_7 e ) { VAR_3 . METHOD_5 ( null , e ) ; } } 
private TYPE_1 METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) { TYPE_1 result = new TYPE_1 ( ) ; for ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > VAR_1 : schema . METHOD_2 ( cd , VAR_2 ) ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { add ( result , VAR_1 ) ; } } return result ; } 
private void METHOD_1 ( final TYPE_1 result , final TYPE_2 . Id VAR_1 , final TYPE_3 . Id VAR_2 , final TYPE_4 . ReviewDb db ) throws TYPE_6 . OrmException { METHOD_1 ( result . change , VAR_4 . getId ( ) , VAR_1 , VAR_2 , db ) ; } 
public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( TYPE_1 . METHOD_2 ( STRING_1 ) ) . isEqualTo ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( TYPE_1 . METHOD_2 ( STRING_3 ) ) . isEqualTo ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( TYPE_1 . METHOD_2 ( STRING_5 ) ) . isEqualTo ( STRING_4 ) ; com.google.common.truth.Truth.assertThat ( TYPE_1 . METHOD_2 ( STRING_7 ) ) . isEqualTo ( STRING_6 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; METHOD_3 ( project , STRING_5 , VAR_1 , VAR_2 ) ; TYPE_1 in = METHOD_4 ( VAR_3 ) ; in . branch = STRING_1 ; METHOD_5 ( in , VAR_4 class , STRING_6 ) ; } 
public void run ( ) { try { TYPE_1 cm = VAR_1 . create ( change ) ; cm . METHOD_1 ( me ) ; cm . METHOD_2 ( ps , info ) ; cm . METHOD_3 ( reviewers ) ; cm . METHOD_4 ( VAR_2 ) ; cm . METHOD_5 ( ) ; } catch ( java.lang.Exception e ) { VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_2 new TYPE_2 ( VAR_3 , false ) ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_4 . METHOD_7 ( id . get ( ) ) ; VAR_4 . METHOD_7 ( id . get ( ) ) ; METHOD_8 ( ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return ( ) - > { ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) ; } ; case VAR_6 : return ( ) - > { ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) ; } ; default : return ( ) - > { } ; } } 
public com.google.gerrit.reviewdb.client.PatchSet patchSet ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . getId ( ) . equals ( psId ) ) ) { return VAR_1 ; } for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ( ) ) { if ( ps . getId ( ) . equals ( psId ) ) { return ps ; } } return null ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String [ ] args = VAR_1 . METHOD_3 ( ) ; if ( ( args . length ) > 1 ) { return ( VAR_2 + STRING_1 ) + ( args [ 1 ] ) ; } return VAR_2 ; } 
private TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String email ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_1 = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ; final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( name ) ; account . METHOD_4 ( email ) ; return new TYPE_1 ( new TYPE_3 ( VAR_2 ) , account , java.util.Collections . METHOD_5 ( ) , new TYPE_4 < > ( ) ) ; } 
