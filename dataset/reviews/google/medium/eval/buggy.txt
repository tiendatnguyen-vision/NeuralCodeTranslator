private org.eclipse.jgit.lib.Repository METHOD_1 ( final TYPE_1 . NameKey name ) { try { return VAR_1 . METHOD_1 ( name . get ( ) ) ; } catch ( TYPE_2 err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { return new TYPE_3 ( VAR_2 , true , ( ! ( TYPE_1 . METHOD_2 ( VAR_3 class , VAR_1 . METHOD_3 ( ) ) ) ) , TYPE_1 . METHOD_2 ( VAR_4 class , VAR_1 . METHOD_3 ( ) ) , TYPE_1 . METHOD_2 ( VAR_5 class , VAR_1 . METHOD_3 ( ) ) , null , null ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_5 ) ) ; TYPE_6 . Change change = TYPE_7 . get ( VAR_1 ) ; TYPE_8 . NameKey name = change . getProject ( ) ; if ( ! ( VAR_2 . METHOD_4 ( TYPE_9 . create ( name . get ( ) ) , VAR_6 ) ) ) { return VAR_1 . METHOD_5 ( ) ; } return VAR_7 ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( p ) ; TYPE_2 VAR_2 = repo . METHOD_3 ( ) ; return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , new TYPE_3 ( ) , true ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.util.List < TYPE_1 > VAR_2 = new TYPE_4 < > ( ) ; try { for ( TYPE_5 VAR_3 : VAR_4 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_1 ) ) ; } } catch ( TYPE_3 e ) { VAR_2 . METHOD_2 ( e . METHOD_4 ( ) ) ; throw new TYPE_3 ( e . getMessage ( ) , VAR_2 ) ; } return VAR_2 ; } 
public java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey project , final com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_1 VAR_1 = new TYPE_1 ( type . getRevision ( ) ) ; final java.util.Map < java.lang.String , java.lang.String > p = new TYPE_2 < java.lang.String , java.lang.String > ( ) ; p . put ( STRING_1 , METHOD_2 ( project . get ( ) ) ) ; p . put ( STRING_2 , METHOD_2 ( ps . getRevision ( ) . get ( ) ) ) ; return ( VAR_2 ) + ( VAR_1 . METHOD_3 ( p ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , java.io.IOException { TYPE_2 p = VAR_2 . get ( ) . METHOD_1 ( VAR_3 , id ) ; for ( TYPE_5 VAR_4 : p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { if ( VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 , p . METHOD_2 ( ) ) ; } } throw new TYPE_4 ( id ) ; } 
public < TYPE_1 > void put ( TYPE_2 < TYPE_1 > key , TYPE_1 value ) { TYPE_3 < TYPE_2 < TYPE_4 > , TYPE_4 > p = METHOD_1 ( ( value != null ) ) ; if ( ( p != null ) || ( value != null ) ) { TYPE_2 < TYPE_4 > VAR_1 = ( ( TYPE_2 < TYPE_4 > ) ( key ) ) ; if ( value != null ) { p . put ( VAR_1 , value ) ; } else { p . METHOD_2 ( VAR_1 ) ; } } } 
public void add ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { if ( ( VAR_2 ) == null ) { VAR_2 = TYPE_3 . METHOD_1 ( ) ; } VAR_2 . add ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) ; } VAR_3 . add ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 . PatchSet patchSet ) { TYPE_1 p = new TYPE_1 ( ) ; p . revision = patchSet . getRevision ( ) . get ( ) ; VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) ; p . ref = patchSet . getRefName ( ) ; final TYPE_4 VAR_2 = VAR_3 . get ( patchSet . METHOD_3 ( ) ) ; VAR_4 = METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; return p ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_1 , STRING_2 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_3 , STRING_4 , STRING_5 , STRING_2 , STRING_6 , STRING_7 ) ) ; } 
protected void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; } VAR_1 = null ; if ( ( db ) != null ) { try { db . close ( ) ; } catch ( TYPE_1 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } db = null ; } 
private < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 < TYPE_1 > VAR_1 ) { if ( VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 ) ; return TYPE_4 . METHOD_3 ( ) ; } TYPE_5 < TYPE_1 > VAR_4 = new TYPE_5 < TYPE_1 > ( VAR_1 ) ; VAR_5 . add ( VAR_4 ) ; VAR_6 . add ( VAR_4 ) ; return VAR_4 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( null ) ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( STRING_1 ) ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_1 ) ) . METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_2 ) ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_3 ) ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; assertEquals ( query ( in ) , METHOD_3 ( in ) ) ; VAR_1 . METHOD_4 ( new TYPE_2 ( VAR_2 ) ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_5 ( ( out instanceof TYPE_3 ) ) ; assertEquals ( TYPE_4 . of ( query ( in . METHOD_6 ( 0 ) ) , in . METHOD_6 ( 1 ) ) , out . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert.assertEquals ( TYPE_2 . METHOD_4 ( ( ( TYPE_2 . METHOD_4 ( STRING_2 ) ) + STRING_3 ) ) , n . METHOD_5 ( ) ) ; } 
private java.util.Set < java.lang.String > METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) { java.util.List < java.lang.String > VAR_1 = commit . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 . isEmpty ( ) ) || ( ( VAR_1 . size ( ) ) > 1 ) ) { return null ; } if ( VAR_1 . get ( 0 ) . isEmpty ( ) ) { return TYPE_1 . of ( ) ; } else { return TYPE_2 . METHOD_3 ( TYPE_3 . on ( CHAR_1 ) . METHOD_4 ( VAR_1 . get ( 0 ) ) ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Map < java.lang.String , java.util.Set < java.lang.String > > VAR_3 ) { for ( java.lang.String VAR_4 : METHOD_2 ( VAR_1 ) ) { java.util.Set < java.lang.String > VAR_5 = VAR_3 . METHOD_3 ( VAR_4 , ( VAR_6 ) - > TYPE_1 . METHOD_4 ( ) ) ; VAR_5 . add ( VAR_2 ) ; } } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 . METHOD_2 ( change . getProject ( ) . equals ( project ) , ( STRING_1 + STRING_2 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , change ) . METHOD_3 ( ) ; } 
protected void run ( ) throws TYPE_1 { try { METHOD_1 ( ) ; } catch ( TYPE_2 err ) { throw new TYPE_1 ( ( STRING_1 + ( err . getMessage ( ) ) ) ) ; } final TYPE_3 VAR_1 = factory . create ( in , out ) ; VAR_1 . METHOD_2 ( format ) ; if ( ( query ) != null ) { VAR_1 . METHOD_3 ( query ) ; } else { VAR_1 . run ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_1 n = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) ) ) ; METHOD_5 ( VAR_1 , n ) ; assertEquals ( STRING_4 , n . METHOD_6 ( ) ) ; } 
public void run ( ) { int line = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ; int res = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , 0 , 0 , 0 , line , false ) , METHOD_7 ( ) ) ; METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { TYPE_2 r = VAR_1 . get ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( id . name ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; TYPE_1 result = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_3 class ) ; r . METHOD_6 ( ) ; return result ; } 
public void METHOD_1 ( ) { final long VAR_1 = INT_1 ; final long VAR_2 = INT_2 ; final TYPE_1 p = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = new TYPE_2 ( p , VAR_2 ) ; METHOD_2 ( p , c . getParentKey ( ) ) ; METHOD_3 ( ( VAR_2 != ( c . METHOD_4 ( ) ) ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_3 < java.lang.String > n = TYPE_3 . not ( p ) ; assertEquals ( 1 , n . METHOD_3 ( ) ) ; METHOD_4 ( p , n . METHOD_5 ( 0 ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( final org.eclipse.jgit.revwalk.RevCommit [ ] VAR_1 , final org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , TYPE_2 { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ; for ( org.eclipse.jgit.revwalk.RevCommit VAR_3 : VAR_1 ) { walk . METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_3 . getId ( ) . name ( ) ) ; java.lang.String msg = VAR_3 . METHOD_3 ( ) ; VAR_2 . add ( new TYPE_1 ( VAR_4 , msg ) ) ; } return VAR_2 ; } 
protected void METHOD_1 ( TYPE_1 result ) { VAR_1 = new TYPE_2 ( this , METHOD_2 ( ) , getRevision ( ) , METHOD_3 ( ) , result . METHOD_4 ( ) , METHOD_5 ( ) . METHOD_6 ( ) ) ; METHOD_7 ( result . METHOD_8 ( ) ) ; display ( VAR_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ; TYPE_2 u = user ( VAR_4 ) ; METHOD_4 ( u ) ; METHOD_5 ( STRING_3 , u ) ; METHOD_5 ( STRING_4 , u ) ; METHOD_6 ( STRING_5 , u ) ; } 
protected void METHOD_1 ( ) { rpc ( VAR_1 class ) ; rpc ( VAR_2 class ) ; rpc ( VAR_3 class ) ; rpc ( VAR_4 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; install ( new TYPE_3 ( ) ) ; install ( new TYPE_4 ( ) ) ; } 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; view . METHOD_5 ( VAR_2 . METHOD_2 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 plugins = VAR_1 ; TYPE_2 . METHOD_2 ( plugins ) ; TYPE_1 VAR_2 = plugins . METHOD_3 ( STRING_1 ) ; TYPE_2 . METHOD_4 ( VAR_2 , STRING_2 . METHOD_5 ( VAR_3 ) ) ; VAR_4 . METHOD_6 ( STRING_3 ) ; TYPE_3 i = VAR_5 . config ( ) . server ( ) . METHOD_7 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_6 ) . METHOD_8 ( 1 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; TYPE_2 VAR_2 = repo . METHOD_3 ( ) ; return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , new TYPE_3 ( ) , true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo c = get ( changeId , VAR_1 , VAR_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( METHOD_3 ( 2 ) ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_3 . METHOD_4 ( ) ) ) ) . METHOD_5 ( TYPE_3 . of ( METHOD_3 ( 2 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . get ( METHOD_3 ( 2 ) ) . VAR_5 ) . isEqualTo ( INT_1 ) ; } 
private void METHOD_1 ( TYPE_1 < TYPE_2 . NameKey > VAR_1 ) { METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = VAR_3 . create ( VAR_4 ) ; try { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( STRING_2 ) ; } catch ( TYPE_4 e ) { METHOD_3 ( ( STRING_3 + STRING_4 ) , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; METHOD_2 ( VAR_1 , null , true ) ; TYPE_1 r = VAR_2 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_3 ) ; r . METHOD_5 ( ) ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( ( format ) == ( VAR_2 ) ) { TYPE_4 VAR_3 = new TYPE_4 ( ) ; display ( VAR_3 ) ; return TYPE_5 . create ( VAR_3 . METHOD_1 ( ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( TYPE_6 . name ( ) ) ; } return apply ( ) ; } 
public org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , java.lang.String path ) throws java.io.IOException { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { rw . METHOD_2 ( rw . parseCommit ( VAR_1 ) ) ; rw . METHOD_3 ( false ) ; rw . METHOD_4 ( TYPE_1 . create ( TYPE_2 . METHOD_5 ( path ) , VAR_2 ) ) ; return rw . METHOD_6 ( ) ; } finally { rw . METHOD_7 ( ) ; } } 
protected void METHOD_1 ( ) throws TYPE_1 { if ( ( db ) != null ) { try { final TYPE_2 . Project project = getProject ( ) ; if ( project != null ) { for ( TYPE_3 w : db . METHOD_2 ( ) . METHOD_3 ( project . getId ( ) ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } } catch ( TYPE_4 . OrmException err ) { } } } 
private java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { return VAR_1 . METHOD_2 ( ) ; } return VAR_1 . METHOD_3 ( ) . toString ( ) ; } return VAR_2 . getName ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ; assertEquals ( TYPE_2 . of ( query ( TYPE_1 . METHOD_6 ( in . METHOD_7 ( 0 ) , in . METHOD_7 ( 2 ) ) ) , in . METHOD_7 ( 1 ) , in . METHOD_7 ( INT_1 ) ) , out . METHOD_8 ( ) ) ; } 
private static void METHOD_1 ( java.util.List < java.lang.String > VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { com.google.gerrit.reviewdb.client.Change a = VAR_2 . change ; com.google.gerrit.reviewdb.client.Change b = VAR_3 . change ; java.lang.String VAR_4 = ( a . getId ( ) . equals ( b . getId ( ) ) ) ? TYPE_1 . METHOD_2 ( a . getId ( ) ) : STRING_1 ; TYPE_1 . METHOD_3 ( VAR_1 , VAR_5 . Change class , VAR_4 , a , b ) ; } 
private void METHOD_1 ( final TYPE_1 m , boolean VAR_1 ) { m . METHOD_2 ( ) ; m . METHOD_3 ( ) ; m . METHOD_4 ( TYPE_2 . css ( ) . METHOD_5 ( ) ) ; if ( VAR_1 ) { m . METHOD_6 ( TYPE_2 . css ( ) . METHOD_7 ( ) ) ; } else { m . METHOD_8 ( STRING_1 , STRING_2 ) ; } m . METHOD_9 ( ) ; } 
public void onSuccess ( TYPE_1 result ) { java.lang.String b = ( ( base ) != null ) ? java.lang.String . METHOD_1 ( base . get ( ) ) : null ; java.lang.String VAR_1 = java.lang.String . METHOD_1 ( revision . get ( ) ) ; TYPE_2 . display ( TYPE_3 . METHOD_2 ( changeId , VAR_1 ) , new TYPE_4 ( changeId , b , VAR_1 , VAR_2 ) ) ; } 
public TYPE_1 < ? extends java.util.Set < java.lang.String > > apply ( TYPE_2 req ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_5 VAR_1 = req . METHOD_1 ( ) ; TYPE_6 notes = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.Set < java.lang.String > VAR_2 = notes . METHOD_4 ( ) ; if ( VAR_2 == null ) { VAR_2 = java.util.Collections . METHOD_5 ( ) ; } return TYPE_1 . METHOD_6 ( new TYPE_7 < java.lang.String > ( VAR_2 ) ) ; } 
static java.lang.String METHOD_1 ( int change , int patch , java.lang.String branch ) { if ( ( branch . METHOD_2 ( TYPE_1 ) ) == 0 ) { branch = branch . METHOD_3 ( TYPE_1 . length ( ) ) ; } return ( ( ( change + STRING_1 ) + patch ) + STRING_1 ) + branch ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 , TYPE_1 msg ) { if ( msg != null ) { if ( ( VAR_1 != null ) && ( ( msg . METHOD_2 ( ) ) == null ) ) { msg . METHOD_3 ( VAR_1 . getAccountId ( ) ) ; } try { db . METHOD_4 ( ) . insert ( java.util.Collections.singleton ( msg ) ) ; } catch ( com.google.gwtorm.server.OrmException err ) { VAR_2 . METHOD_5 ( STRING_1 , err ) ; } } } 
private void METHOD_1 ( TYPE_1 out , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk walk , TYPE_2 VAR_1 , TYPE_2 VAR_2 , java.lang.String path ) throws java.io.IOException { TYPE_3 diff = new TYPE_4 ( VAR_3 , out ) ; try { if ( ! ( path . equals ( STRING_1 ) ) ) { diff . METHOD_2 ( TYPE_5 . create ( path ) ) ; } diff . METHOD_3 ( repo ) ; diff . METHOD_4 ( true ) ; diff . format ( VAR_1 , VAR_2 ) ; } finally { diff . METHOD_5 ( ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; boolean VAR_2 = false ; try { for ( TYPE_4 VAR_3 : VAR_4 ) { VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( event ) ) ; } } catch ( TYPE_5 e ) { VAR_1 . add ( new TYPE_1 ( e . getMessage ( ) , true ) ) ; VAR_2 = true ; } if ( VAR_2 ) { METHOD_5 ( VAR_1 , event ) ; } return VAR_1 ; } 
public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { final TYPE_2 p = ( ( TYPE_2 ) ( VAR_1 ) ) ; return ( METHOD_1 ( ) . equals ( p . METHOD_1 ( ) ) ) && ( id . equals ( p . id ) ) ; } return false ; } 
public void METHOD_1 ( final TYPE_1 . Id VAR_1 , final java.lang.String msg , final java.util.Set < TYPE_2 . Id > VAR_2 , final TYPE_3 < TYPE_4 > VAR_3 ) { TYPE_5 . METHOD_2 ( VAR_4 . create ( VAR_1 , msg , VAR_2 ) ) . to ( VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( false ) ; java.util.Set < TYPE_3 > VAR_2 = TYPE_4 . of ( ) ; return new TYPE_1 ( VAR_3 , account , VAR_2 , java.util.Collections . METHOD_4 ( ) , new TYPE_5 < TYPE_6 , java.util.Set < TYPE_7 > > ( ) ) ; } 
public boolean METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 key ) { return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + key ) + STRING_3 ) ) { TYPE_3 METHOD_2 ( ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_4 . METHOD_3 ( VAR_1 , key ) ; return VAR_3 . METHOD_4 ( TYPE_5 . on ( STRING_4 ) . METHOD_5 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; } } . METHOD_6 ( ) ; } 
private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( VAR_2 . get ( ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 ) ; try { if ( VAR_3 . METHOD_3 ( ) ) { return VAR_3 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException VAR_4 ) { throw new TYPE_2 ( STRING_2 ) ; } } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { return new TYPE_3 ( VAR_1 , VAR_2 , true , ( ! ( TYPE_1 . METHOD_2 ( VAR_3 class , VAR_1 . METHOD_3 ( ) ) ) ) , TYPE_1 . METHOD_2 ( VAR_4 class , VAR_1 . METHOD_3 ( ) ) , TYPE_1 . METHOD_2 ( VAR_5 class , VAR_1 . METHOD_3 ( ) ) , null , null ) ; } 
private com.google.gerrit.reviewdb.client.Change . Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String VAR_1 , java.lang.String name , java.lang.String email ) throws TYPE_1 , TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_4 . Key VAR_2 = new TYPE_4 . Key ( VAR_3 , VAR_1 ) ; TYPE_5 VAR_4 = db . METHOD_2 ( ) ; TYPE_4 VAR_5 = VAR_4 . get ( VAR_2 ) ; if ( VAR_5 == null ) { return VAR_6 . METHOD_3 ( VAR_1 , name , email ) ; } return VAR_5 . getAccountId ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result change = METHOD_2 ( git , true ) ; METHOD_2 ( git , false ) ; java.util.Set < java.lang.String > changes = METHOD_3 ( change ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( changes ) ) ) . isEmpty ( ) ; } 
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = VAR_2 . create ( METHOD_1 ( ) ) ; VAR_1 . add ( this ) ; TYPE_2 . METHOD_2 ( getChange ( ) , VAR_1 . METHOD_3 ( ) . get ( getId ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; return METHOD_5 ( ) ; } 
private java.lang.String METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 res = METHOD_2 ( path , ( STRING_1 + VAR_1 ) , VAR_2 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_3 ( VAR_3 ) ) . isEqualTo ( STRING_2 ) ; java.lang.String VAR_4 = res . METHOD_4 ( ) ; java.lang.String VAR_5 = STRING_3 ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( VAR_5 ) ; java.lang.String result = VAR_4 . METHOD_6 ( VAR_5 . length ( ) ) ; VAR_6 . METHOD_7 ( result ) ; return result ; } 
public static void topic ( int id , java.lang.String topic , TYPE_1 < java.lang.String > VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_1 ( id , STRING_1 ) ; topic = TYPE_3 . METHOD_2 ( topic ) ; if ( topic != null ) { TYPE_4 input = TYPE_4 . create ( ) ; input . topic ( topic ) ; VAR_2 . put ( input , TYPE_5 . METHOD_3 ( VAR_1 ) ) ; } else { VAR_2 . delete ( TYPE_5 . METHOD_3 ( VAR_1 ) ) ; } } 
public TYPE_1 METHOD_1 ( ) { if ( ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) { java.lang.String VAR_3 = VAR_4 . getProject ( ) . getName ( ) ; return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; } if ( VAR_4 . METHOD_4 ( ) ) { return METHOD_5 ( ) ; } return VAR_5 ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_2 ) ) . METHOD_4 ( STRING_3 ) . METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_4 ) ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_6 ) ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result result = METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; java.lang.String projectName = result . getChange ( ) . change ( ) . getProject ( ) . get ( ) ; METHOD_3 ( new TYPE_2 . NameKey ( projectName , STRING_5 ) ) ; METHOD_4 ( STRING_6 , projectName ) ; METHOD_5 ( result . getChangeId ( ) ) ; result . METHOD_6 ( ) ; METHOD_7 ( result ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < java.util.List < TYPE_3 . Branch > > ( ) { public void onSuccess ( final java.util.List < TYPE_3 . Branch > result ) { METHOD_2 ( true ) ; VAR_2 . display ( result ) ; } } ) ; } 
private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , java.util.List < java.lang.String > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_2 = new java.util.ArrayList < > ( VAR_1 . size ( ) ) ; for ( java.lang.String s : VAR_1 ) { VAR_2 . add ( TYPE_3 . commit ( schema , s ) ) ; } return VAR_2 ; } 
private boolean METHOD_1 ( final TYPE_1 < TYPE_2 > refs ) throws java.io.IOException { METHOD_2 ( refs ) ; java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_1 = new TYPE_3 < > ( ) ; java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_2 = new TYPE_3 < > ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; rw . METHOD_4 ( ) ; return ( ! ( METHOD_5 ( VAR_2 , 1 ) . isEmpty ( ) ) ) || ( ! ( METHOD_5 ( VAR_1 , 1 ) . isEmpty ( ) ) ) ; } 
private void METHOD_1 ( final boolean VAR_1 , final boolean VAR_2 , final boolean VAR_3 ) { VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_5 . METHOD_2 ( VAR_2 ) ; VAR_6 . METHOD_2 ( VAR_1 ) ; VAR_7 . METHOD_2 ( VAR_1 ) ; VAR_8 . METHOD_2 ( VAR_3 ) ; VAR_9 . METHOD_2 ( ( ( VAR_1 || VAR_2 ) || VAR_3 ) ) ; } 
public void update ( final int VAR_1 ) { VAR_2 += VAR_1 ; if ( ( VAR_3 ) != ( VAR_4 ) ) { int VAR_5 = ( ( VAR_2 ) * INT_1 ) / ( VAR_3 ) ; if ( VAR_5 > ( VAR_6 ) ) { VAR_6 = VAR_5 ; METHOD_1 ( ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ; VAR_1 = new TYPE_5 ( ) ; VAR_2 = ( repo . METHOD_3 ( ) . METHOD_4 ( ) ) / INT_1 ; } 
public void METHOD_1 ( ) { for ( TYPE_1 path : METHOD_2 ( ) ) { TYPE_2 VAR_1 = METHOD_3 ( path ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( VAR_2 . METHOD_5 ( new TYPE_3 ( ) ) ) { METHOD_6 ( path ) ; } } } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; assertEquals ( STRING_2 , VAR_2 . toString ( ) ) ; final TYPE_1 VAR_3 = new TYPE_1 ( STRING_3 ) ; VAR_3 . METHOD_2 ( VAR_2 . toString ( ) ) ; assertEquals ( VAR_2 , VAR_3 ) ; } 
public TYPE_1 . Result METHOD_1 ( final TYPE_2 index ) { TYPE_3 VAR_1 = new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( 2 ) ; TYPE_6 VAR_3 = TYPE_6 . METHOD_3 ( ) ; java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > VAR_4 ; try { VAR_4 = METHOD_4 ( VAR_1 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_5 . error ( STRING_1 , e ) ; return new TYPE_7 . Result ( VAR_3 , false , 0 , 0 ) ; } return METHOD_5 ( index , VAR_4 , VAR_1 ) ; } 
public final void onSuccess ( TYPE_1 result ) { if ( METHOD_1 ( ) ) { if ( ( ( result . size ( ) ) == 1 ) && ( TYPE_2 . METHOD_2 ( query ) ) ) { TYPE_3 . ChangeInfo c = result . get ( 0 ) ; com.google.gerrit.reviewdb.client.Change . Id id = c . METHOD_3 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_4 ( id ) , new TYPE_6 ( id ) ) ; } else { display ( result ) ; this . display ( ) ; } } } 
private void commit ( org.eclipse.jgit.lib.Repository VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) throws java.io.IOException { TYPE_3 VAR_4 = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; try ( TYPE_4 VAR_5 = METHOD_3 ( VAR_1 , VAR_4 ) ) { VAR_2 . commit ( VAR_5 ) ; } try ( TYPE_4 VAR_5 = METHOD_3 ( VAR_1 , VAR_4 ) ) { VAR_3 . commit ( VAR_5 ) ; } try ( org.eclipse.jgit.revwalk.RevWalk VAR_6 = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) ) { TYPE_5 . METHOD_4 ( VAR_4 , VAR_6 ) ; } } 
private static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 < java.lang.String > VAR_2 = TYPE_3 . METHOD_2 ( ) ; while ( VAR_1 != null ) { VAR_2 . METHOD_3 ( VAR_1 . value ( ) ) ; VAR_1 = TYPE_4 . METHOD_4 ( VAR_1 ) ; } VAR_2 . METHOD_5 ( ) ; return VAR_2 ; } 
public void METHOD_1 ( java.lang.String msg ) { if ( ( ( info ) == null ) && ( ( VAR_1 ) != null ) ) { info = new TYPE_1 ( TYPE_2 . info ( ) ) ; VAR_1 . add ( info ) ; } info . METHOD_2 ( msg ) ; } 
private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 . METHOD_2 ( ) ) && ( ( getRevision ( ) ) == null ) ) { org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ; try { METHOD_1 ( repo ) ; } catch ( TYPE_1 e ) { throw new java.io.IOException ( e ) ; } finally { repo . close ( ) ; } } } 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return METHOD_2 ( VAR_1 ) ; } else { switch ( status . getStatus ( ) ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } } 
protected java.lang.String METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = name + STRING_1 ; TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( VAR_2 ) ) { return METHOD_4 ( VAR_1 ) ; } else { return METHOD_5 ( name ) ; } } 
public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . get ( STRING_1 ) ) ) . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( VAR_1 ) ; VAR_3 = new TYPE_4 ( VAR_4 , cfg , TYPE_1 . METHOD_2 ( VAR_5 class ) , VAR_1 ) ; } 
public synchronized < TYPE_1 , TYPE_2 , TYPE_3 > TYPE_4 < TYPE_1 , TYPE_2 , TYPE_3 > METHOD_1 ( java.lang.String name , TYPE_5 VAR_1 , TYPE_6 < TYPE_1 > VAR_2 , TYPE_6 < TYPE_2 > VAR_3 , TYPE_6 < TYPE_3 > VAR_4 ) { TYPE_7 . METHOD_2 ( VAR_1 ) ; TYPE_8 m = new TYPE_8 ( this , name , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; METHOD_3 ( name , VAR_1 ) ; VAR_5 . put ( name , m ) ; return m . METHOD_4 ( ) ; } 
private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { try ( TYPE_3 VAR_2 = new TYPE_4 ( VAR_1 ) ; TYPE_3 in = TYPE_5 . METHOD_2 ( VAR_2 ) ) { return new TYPE_6 ( in ) ; } catch ( java.io.IOException e ) { throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; } catch ( TYPE_8 e ) { throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
private void METHOD_1 ( TYPE_1 ctx ) { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( psId ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; ctx . METHOD_1 ( ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return changes . id ( VAR_1 . get ( ) . apply ( revision , in ) . VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } super . METHOD_1 ( ) ; } 
private static boolean METHOD_1 ( TYPE_1 event , TYPE_2 update ) { return ( ( ( update != null ) && ( ( TYPE_3 . METHOD_2 ( VAR_1 ) ) == ( TYPE_3 . METHOD_2 ( update . METHOD_3 ( ) ) ) ) ) && ( VAR_2 . equals ( update . METHOD_4 ( ) ) ) ) && ( VAR_3 . equals ( update . METHOD_5 ( ) ) ) ; } 
protected < TYPE_1 > void METHOD_1 ( final java.lang.String VAR_1 , final boolean VAR_2 , final java.lang.String VAR_3 , final TYPE_2 < TYPE_1 > VAR_4 , final TYPE_3 < TYPE_1 > VAR_5 ) throws TYPE_4 { if ( ( url ) == null ) { throw new TYPE_5 ( ) ; } new TYPE_6 < TYPE_1 > ( this , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) . METHOD_2 ( ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Status VAR_1 , java.lang.String VAR_2 , TYPE_1 ... VAR_3 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = getChange ( ) . change ( ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( c . METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . isEqualTo ( c . getStatus ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( TYPE_2 . METHOD_3 ( c . METHOD_4 ( ) ) ) ; METHOD_5 ( c , VAR_3 ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 group ) { if ( VAR_1 . METHOD_2 ( ) ) { return ; } TYPE_3 . METHOD_3 ( changeId . get ( ) , VAR_1 . name ( ) , group . add ( new TYPE_4 < TYPE_5 > ( ) { public void onSuccess ( TYPE_5 info ) { VAR_1 . METHOD_4 ( info ) ; } public void METHOD_5 ( TYPE_6 VAR_2 ) { } } ) ) ; } 
public void METHOD_1 ( ) { final long VAR_1 = INT_1 ; final long VAR_2 = INT_2 ; final TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 ) , VAR_2 ) ; assertEquals ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) , VAR_3 . toString ( ) ) ; final TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( 0 ) , 0 ) ; VAR_4 . METHOD_2 ( VAR_3 . toString ( ) ) ; assertEquals ( VAR_3 , VAR_4 ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String name , org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException { try { org.eclipse.jgit.lib.ObjectId id = repo . METHOD_1 ( name ) ; return id != null ? walk . METHOD_2 ( id ) : null ; } catch ( TYPE_2 e ) { return null ; } catch ( TYPE_3 e ) { return null ; } catch ( TYPE_4 e ) { return null ; } } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 , com.google.gerrit.reviewdb.client.PatchSet VAR_3 , TYPE_2 VAR_4 ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.reviewdb.client . PatchSetApproval > VAR_5 = db . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; TYPE_4 . METHOD_1 ( db , VAR_1 , VAR_5 , VAR_2 , VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( server , admin ) ; VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 . get ( ) ) ; VAR_3 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_3 . get ( ) ) ; VAR_1 . close ( ) ; } 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_5 event = new TYPE_5 ( change , revision , VAR_1 , VAR_2 ) ; for ( TYPE_6 VAR_4 : VAR_3 ) { try { VAR_4 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_7 . log , e ) ; } } } 
protected void METHOD_1 ( java.lang.String changeId , int VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws java.io.IOException { TYPE_1 . ChangeInfo c = getChange ( changeId , VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_2 . name ( ) , VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_5 . get ( VAR_2 . name ( ) ) . VAR_6 ) ; } 
private void METHOD_1 ( final TYPE_1 . ReceiveCommand cmd ) { TYPE_2 ctl = VAR_1 . METHOD_2 ( cmd . getRefName ( ) ) ; if ( ctl . METHOD_3 ( ) ) { cmd . METHOD_4 ( rp ) ; } else { TYPE_3 . reject ( cmd , STRING_1 ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; commit . METHOD_2 ( ( VAR_1 ? ! ( VAR_3 . METHOD_3 ( ) . isEmpty ( ) ) : false ) ) ; VAR_4 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_4 ( ) : false ) ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_6 . METHOD_2 ( VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 { TYPE_3 cm = VAR_1 . create ( change.getId ( ) ) ; cm . METHOD_2 ( ctx . METHOD_3 ( ) . getAccountId ( ) ) ; cm . METHOD_4 ( patchSet , VAR_2 ) ; cm . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; cm . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) ; cm . METHOD_9 ( ) ; } 
public static boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 , final org.eclipse.jgit.revwalk.RevWalk rw , final TYPE_2 VAR_3 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 , VAR_3 ) ) { return false ; } try { return ( VAR_2 == null ) || ( rw . METHOD_3 ( VAR_2 , VAR_3 ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
protected static void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String table , java.lang.String VAR_1 , java.lang.String to ) throws com.google.gwtorm.server.OrmException { TYPE_1 s = ( ( TYPE_1 ) ( db ) ) ; try ( TYPE_2 e = new TYPE_2 ( s ) ) { s . METHOD_2 ( e , table , VAR_1 , to ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String projectName ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey key = new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_2 ( key ) ; try { TYPE_2 . ProjectConfig cfg = new TYPE_2 . ProjectConfig ( key ) ; cfg . METHOD_1 ( git ) ; return VAR_2 . create ( cfg ) ; } finally { git . close ( ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { switch ( type ) { case VAR_2 : this . VAR_3 = ( VAR_1 != null ) ? TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) : null ; return this ; case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : default : throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; } } 
private java.lang.String METHOD_1 ( TYPE_1 is ) throws java.io.IOException { VAR_1 = new TYPE_2 ( ) ; TYPE_3 input = new TYPE_3 ( is ) ; char [ ] VAR_2 = new char [ INT_1 ] ; int n = 0 ; while ( ( n = input . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ) { VAR_1 . METHOD_3 ( VAR_2 , 0 , n ) ; } return VAR_1 . toString ( ) ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { patchSet = ctx . METHOD_2 ( ) . patchSets ( ) . get ( psId ) ; if ( ! ( patchSet . METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } patchSet . METHOD_4 ( false ) ; } 
void METHOD_1 ( ) { TYPE_1 . get ( ) . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_2 ) == null ) ) { throw new TYPE_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_1 ( ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; java.lang.String VAR_1 = STRING_1 + ( r . getChangeId ( ) ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( getChange ( VAR_1 ) . VAR_3 ) . METHOD_6 ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( getChange ( VAR_1 ) . VAR_3 ) . METHOD_8 ( ) ; } 
protected void METHOD_1 ( ) { com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_1 class ) . to ( VAR_2 class ) ; bind ( VAR_3 class ) . to ( VAR_4 class ) ; install ( TYPE_1 . METHOD_2 ( ) ) ; bind ( VAR_5 class ) . METHOD_3 ( TYPE_2 . create ( ) ) . to ( VAR_6 class ) ; } 
private static synchronized TYPE_1 METHOD_1 ( ) throws TYPE_2 { final TYPE_3 p = new TYPE_3 ( ) ; p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) ; p . METHOD_2 ( STRING_2 , ( ( STRING_3 + STRING_4 ) + ( ++ ( VAR_2 ) ) ) ) ; final TYPE_1 VAR_3 = new TYPE_4 ( p ) ; return VAR_3 ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 [ ] VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 , TYPE_4 { TYPE_5 d = new TYPE_5 ( ) ; if ( ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ) { VAR_2 = VAR_3 ; } else { VAR_2 = VAR_4 ; VAR_5 = TYPE_6 . METHOD_2 ( VAR_1 [ 0 ] ) ; } METHOD_1 ( db , d ) ; } 
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = VAR_2 . create ( METHOD_1 ( ) ) ; VAR_1 . add ( this ) ; TYPE_2 . METHOD_2 ( getChange ( ) , VAR_1 . METHOD_3 ( ) . get ( ctl . getId ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; return METHOD_5 ( ) ; } 
public synchronized void METHOD_1 ( TYPE_1 index ) { int VAR_1 = index . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_1 i : VAR_2 ) { if ( ( i . METHOD_2 ( ) . METHOD_3 ( ) ) == VAR_1 ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } } VAR_2 . add ( index ) ; } 
private PatchSet . Id METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) throws TYPE_1 { java.util.List < java.lang.String > VAR_1 = commit . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 . size ( ) ) != 1 ) { throw METHOD_3 ( STRING_1 , VAR_2 , VAR_1 ) ; } TYPE_2 psId = TYPE_3 . METHOD_4 ( VAR_1 . get ( 0 ) ) ; if ( psId == null ) { throw METHOD_3 ( STRING_2 , VAR_2 , VAR_1 . get ( 0 ) ) ; } return new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , psId ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 0 ) ; TYPE_1 VAR_1 ; METHOD_3 ( ( ( VAR_2 ) - FLOAT_1 ) ) ; METHOD_4 ( ) ; TYPE_2 . ChangeInfo info = METHOD_5 ( METHOD_6 ( VAR_3 ) ) ; java.lang.String message = VAR_4 . get ( VAR_5 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_6 , admin . METHOD_7 ( ) . METHOD_8 ( ) ) ) ; } 
private static TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 < TYPE_2 > VAR_2 , java.util.Map < java.lang.String , TYPE_4 > VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) { return new TYPE_5 ( VAR_1 , TYPE_6 . METHOD_1 ( VAR_2 ) , TYPE_7 . METHOD_1 ( VAR_3 ) , VAR_4 , VAR_5 ) ; } 
private void METHOD_1 ( TYPE_1 . Result r ) throws java.lang.Exception { revision ( r ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; revision ( r ) . submit ( ) ; org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( project ) ; try { org.junit.Assert.assertEquals ( r . METHOD_5 ( ) , repo . METHOD_6 ( STRING_1 ) . METHOD_7 ( ) ) ; } finally { repo . close ( ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( 0 ) ) ) ) ; assertEquals ( STRING_1 , TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( 1 , CHAR_1 ) ) ) ) ; assertEquals ( STRING_2 , TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( INT_1 , CHAR_2 , CHAR_3 , CHAR_4 , CHAR_4 , CHAR_5 , CHAR_5 , CHAR_6 ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . Result r = METHOD_3 ( ) ; TYPE_2 revision = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ; TYPE_3 in = new TYPE_3 ( ) ; VAR_2 = VAR_3 . toString ( ) ; in . label ( STRING_1 , INT_1 ) ; VAR_4 . METHOD_5 ( VAR_5 class ) ; VAR_4 . METHOD_6 ( STRING_2 ) ; revision . METHOD_7 ( in ) ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = TYPE_8 . of ( id ) ; java.util.List < TYPE_1 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } else { throw new TYPE_9 ( ) ; } } 
public static boolean METHOD_1 ( ) { return ( ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( TYPE_1 . METHOD_4 ( ) . auth ( ) . METHOD_5 ( ) ) ) && ( ! ( TYPE_1 . METHOD_2 ( ) . METHOD_6 ( ) ) ) ; } 
private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( false ) ; TYPE_3 < TYPE_4 > VAR_2 = java.util.Collections . METHOD_4 ( ) ; TYPE_3 < TYPE_5 > VAR_3 = java.util.Collections . METHOD_4 ( ) ; java.util.Set < TYPE_6 > VAR_4 = TYPE_7 . of ( ) ; return new TYPE_1 ( account , VAR_4 , VAR_2 , VAR_3 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return ( ) - > { ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) ; } ; case VAR_6 : return ( ) - > { ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) ; } ; default : return ( ) - > { } ; } } 
private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; } 
private java.util.Set < TYPE_1 > METHOD_1 ( java.util.List < com.google.gerrit.server.query.change.ChangeData > VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 < TYPE_1 > result = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_1 ) { TYPE_1 commit = VAR_2 . get ( cd . getId ( ) ) ; TYPE_4 . METHOD_3 ( ( commit != null ) , STRING_1 , cd . change ( ) . getId ( ) ) ; result . add ( commit ) ; } return result ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } 
private TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 : com.google.gerrit.server.query.change.ChangeData . METHOD_2 ( db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ) { VAR_1 . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; } } return VAR_1 ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { table . METHOD_3 ( 0 , VAR_1 , TYPE_2 . METHOD_4 ( ) ) ; table . METHOD_5 ( ) . METHOD_6 ( 0 , VAR_1 , TYPE_3 . css ( ) . METHOD_7 ( ) ) ; } } 
private void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( git , VAR_2 ) ; TYPE_2 res ; try { res = METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; } finally { try { VAR_1 . close ( ) ; } catch ( TYPE_3 VAR_3 ) { VAR_4 . METHOD_5 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 ) ; } } METHOD_6 ( res . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) >= 0 ) ) { final TYPE_1 c = TYPE_2 . METHOD_3 ( VAR_2 ) ; if ( c != null ) { VAR_3 . put ( VAR_1 , METHOD_4 ( c ) ) ; } } super . METHOD_1 ( ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.lang.String base ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . METHOD_2 ( base ) . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > factory ) { java.util.List < TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_4 VAR_2 : VAR_3 ) { for ( TYPE_5 < ? > VAR_4 : VAR_2 . METHOD_3 ( ) ) { VAR_1 . add ( factory . METHOD_4 ( VAR_4 ) ) ; } } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { return changes . id ( VAR_1 . get ( ) . apply ( revision , null ) . VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 != null ) { VAR_1 . close ( ) ; } for ( TYPE_1 VAR_3 : VAR_4 ) { if ( VAR_3 != VAR_1 ) { VAR_3 . METHOD_1 ( ) ; VAR_3 . close ( ) ; } } } 
public boolean METHOD_1 ( ) { com.google.gerrit.reviewdb.client.Account.Id VAR_1 = notes . getChange ( ) . METHOD_2 ( ) ; if ( ( VAR_1 != null ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) { com.google.gerrit.reviewdb.client.Account.Id id = METHOD_3 ( ) . getAccountId ( ) ; return id . equals ( VAR_1 . get ( ) ) ; } return false ; } 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , TYPE_2 VAR_2 , org.eclipse.jgit.revwalk.RevCommit VAR_3 , TYPE_3 VAR_4 , java.lang.String VAR_5 , byte [ ] VAR_6 , org.eclipse.jgit.revwalk.RevCommit base ) throws TYPE_4 , java.io.IOException { TYPE_5 VAR_7 = TYPE_6 . METHOD_2 ( VAR_4 , VAR_3 ) ; TYPE_6 . METHOD_3 ( VAR_1 , repo , rw , base , VAR_7 . METHOD_4 ( ) , VAR_2 , VAR_5 , VAR_6 ) ; return VAR_7 . METHOD_5 ( VAR_2 ) ; } 
public void run ( ) throws java.lang.Exception { METHOD_1 ( ) ; final TYPE_1 VAR_1 = factory . create ( in , out ) ; VAR_1 . METHOD_2 ( format ) ; if ( ( query ) != null ) { VAR_1 . METHOD_3 ( query ) ; } else { VAR_1 . run ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) ; TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_4 ( STRING_2 , u . METHOD_5 ( STRING_3 ) . METHOD_6 ( ) ) ; } 
public java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) { final java.lang.String VAR_2 = TYPE_1 . get ( VAR_1 ) ; boolean VAR_3 ; try { VAR_3 = METHOD_2 ( VAR_2 , null ) ; } catch ( TYPE_2 e ) { VAR_3 = false ; } return VAR_3 ? TYPE_1 . METHOD_3 ( VAR_1 ) : null ; } 
public void METHOD_1 ( final TYPE_1 < TYPE_2 > event ) { if ( ( VAR_1 ) == null ) { TYPE_3 . METHOD_2 ( patchSet . getId ( ) , new TYPE_4 < TYPE_5 > ( ) { public void onSuccess ( final TYPE_5 result ) { METHOD_3 ( result ) ; VAR_2 . METHOD_4 ( true ) ; } } ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , null , true ) ; TYPE_2 r = VAR_3 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_4 ) ; r . METHOD_5 ( ) ; } 
private void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 < ? > in = VAR_2 ; while ( in != null ) { for ( final TYPE_3 VAR_3 : in . METHOD_2 ( ) ) { if ( ( VAR_3 . METHOD_3 ( VAR_4 class ) ) != null ) { VAR_1 . add ( new TYPE_1 ( VAR_3 ) ) ; } } in = in . METHOD_4 ( ) ; } METHOD_1 ( VAR_1 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 , TYPE_4 > VAR_1 ) throws java.io.IOException { TYPE_5 p = METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { return new TYPE_6 ( VAR_1 , VAR_2 ) ; } else { return new TYPE_7 ( VAR_1 , VAR_3 , p . METHOD_3 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 , TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ; cd . METHOD_2 ( user ) ; if ( TYPE_5 . METHOD_3 ( cfg ) ) { return METHOD_4 ( db , new TYPE_1 ( cd , db , null ) , user ) ; } return METHOD_5 ( db , new TYPE_1 ( cd , db , null ) , user ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; for ( TYPE_2 ref : VAR_3 . values ( ) ) { TYPE_3 . AccountGroup VAR_4 = VAR_1 . get ( ref . METHOD_2 ( ) ) ; if ( ( VAR_4 != null ) && ( ! ( VAR_4 . getName ( ) . equals ( ref . getName ( ) ) ) ) ) { VAR_2 = true ; ref . METHOD_3 ( VAR_4 . getName ( ) ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; int VAR_1 = VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_2 ) ) . getAccountId ( ) . get ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { METHOD_5 ( repo , null , null , VAR_1 , null ) . insert ( ) ; } METHOD_6 ( STRING_3 ) ; METHOD_6 ( STRING_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 p = VAR_2 . projects ( ) . name ( ( VAR_1 + STRING_2 ) ) . create ( ) . get ( ) ; com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_3 ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 { try { final TYPE_3 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 class , new TYPE_4 < TYPE_1 > ( VAR_1 , this ) ) ; VAR_2 . create ( ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_3 class ) ; } catch ( TYPE_6 err ) { VAR_4 = null ; VAR_5 = null ; throw err ; } } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( binder ( ) , VAR_1 ) ; bind ( VAR_2 class ) ; METHOD_3 ( VAR_3 , STRING_1 ) . to ( VAR_2 class ) ; delete ( VAR_1 ) . to ( VAR_4 class ) ; get ( VAR_5 , STRING_2 ) . to ( VAR_6 class ) ; put ( VAR_5 , STRING_2 ) . to ( VAR_7 class ) ; get ( VAR_8 , STRING_3 ) . to ( VAR_9 class ) ; put ( VAR_8 , STRING_3 ) . to ( VAR_10 class ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ; com.google.gerrit.reviewdb.client.PatchSet.Id ps = VAR_1 . to ( git , STRING_1 ) . METHOD_3 ( ) ; java.util.List < TYPE_2 > VAR_3 = METHOD_4 ( ps ) ; org.junit.Assert.assertEquals ( 0 , VAR_3 . size ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 p = VAR_2 . projects ( ) . create ( VAR_1 ) . get ( ) ; com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_2 ) ; } 
private com.google.gerrit.reviewdb.client . AccountGroup group ( java.lang.String name ) throws java.lang.Exception { TYPE_1 args = new TYPE_1 ( ) ; args . METHOD_1 ( name ) ; VAR_1 = java.util.Collections.singleton ( admin . getId ( ) ) ; return VAR_2 . create ( args ) . METHOD_2 ( ) ; } 
private void delete ( java.lang.String path ) { METHOD_1 ( ) ; TYPE_1 . delete ( changeId . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_2 ( changeId ) ) ; } public void METHOD_3 ( TYPE_6 VAR_1 ) { } } ) ; } 
private com.google.gerrit.reviewdb.client.Change . Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String VAR_1 , java.lang.String name , java.lang.String email ) throws TYPE_1 , TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_4 . Key VAR_2 = new TYPE_4 . Key ( VAR_3 , VAR_1 ) ; TYPE_5 VAR_4 = db . METHOD_2 ( ) ; TYPE_4 VAR_5 = VAR_4 . get ( VAR_2 ) ; if ( VAR_5 == null ) { return VAR_6 . METHOD_3 ( VAR_1 , name , email ) ; } else { return VAR_5 . getAccountId ( ) ; } } 
protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1 . add ( c . getName ( ) ) ; } return VAR_1 ; } 
private static java.lang.StringBuilder METHOD_1 ( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( VAR_1 ) ; int n = ( VAR_2 . get ( ) ) % INT_1 ; if ( n < INT_2 ) { r . append ( CHAR_1 ) ; } r . append ( n ) ; r . append ( CHAR_2 ) ; r . append ( VAR_2 . get ( ) ) ; r . append ( CHAR_2 ) ; return r ; } 
private static void METHOD_1 ( final java.lang.String token , final TYPE_1 . Key id , final int line ) { TYPE_2 . METHOD_2 ( new TYPE_3 ( token ) { public void onSuccess ( ) { TYPE_4 . display ( token , new TYPE_5 ( id , line ) ) ; } } ) ; } 
TYPE_1 METHOD_1 ( final TYPE_2 . Key key , final TYPE_1 VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_2 = VAR_1 . getAccountId ( ) ; final boolean VAR_3 = VAR_1 . METHOD_2 ( ) ; final TYPE_3 . Key VAR_4 = VAR_1 . METHOD_3 ( ) ; return METHOD_1 ( key , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } 
private long METHOD_1 ( java.lang.String n , java.lang.String VAR_1 , long VAR_2 ) { final long d = TYPE_1 . METHOD_2 ( VAR_2 , TYPE_2 ) ; final long m ; m = TYPE_3 . METHOD_3 ( config , STRING_1 , n , VAR_1 , d , TYPE_1 ) ; return TYPE_2 . METHOD_2 ( m , TYPE_1 ) ; } 
private void add ( com.google.gerrit.reviewdb.server.ReviewDb db , java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { try { VAR_1 . add ( new TYPE_1 ( VAR_2 . getKey ( ) , TYPE_3 . METHOD_1 ( VAR_2 ) ) ) ; } catch ( TYPE_4 e ) { throw e ; } catch ( TYPE_5 e ) { METHOD_2 ( db , VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_2 ) ; } 
private TYPE_1 get ( ) { TYPE_1 p = VAR_1 ; if ( ( VAR_2 ) && ( p . METHOD_1 ( ) ) ) { final TYPE_1 VAR_3 ; try { VAR_3 = new TYPE_1 ( ) ; } catch ( java.io.IOException e ) { VAR_4 . error ( STRING_1 , e ) ; return p ; } p = VAR_3 ; VAR_1 = p ; } return p ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 git = METHOD_2 ( ) ; TYPE_4 . Result change = METHOD_3 ( git , true ) ; METHOD_3 ( git , false ) ; java.util.Set < java.lang.String > changes = METHOD_4 ( change ) ; org.junit.Assert.assertEquals ( 0 , changes . size ( ) ) ; } 
private java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 notes ) throws com.google.gwtorm.server.OrmException { java.util.Set < java.lang.String > result = new TYPE_2 < > ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : VAR_1 . METHOD_2 ( db . get ( ) , notes ) ) { java.util.List < java.lang.String > VAR_2 = ps . METHOD_3 ( ) ; if ( VAR_2 != null ) { result . METHOD_4 ( VAR_2 ) ; } } return result ; } 
public void add ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { if ( VAR_1 instanceof TYPE_2 ) { if ( ( VAR_3 ) == null ) { VAR_3 = TYPE_3 . METHOD_1 ( ) ; } VAR_3 . add ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) ; } VAR_2 . add ( VAR_1 ) ; } } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_7 { final TYPE_8 result = VAR_1 . create ( VAR_2 , message ) . METHOD_1 ( ) ; if ( ( result . METHOD_2 ( ) . size ( ) ) > 0 ) { throw new TYPE_6 ( result . getChangeId ( ) ) ; } return VAR_3 . create ( result . getChangeId ( ) ) . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 r = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; r . METHOD_3 ( ) ; r . METHOD_4 ( true ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) ; TYPE_3 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
protected void METHOD_1 ( TYPE_1 value ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . create ( project ) ; TYPE_3 . ProjectConfig config = TYPE_4 . METHOD_2 ( VAR_1 ) ; config . getProject ( ) . METHOD_1 ( value ) ; config . commit ( VAR_1 ) ; VAR_3 . METHOD_3 ( config . getProject ( ) ) ; } 
public void METHOD_1 ( final TYPE_1 . Key VAR_1 , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_3 , final TYPE_2 VAR_4 , final TYPE_3 < TYPE_4 > VAR_5 ) { if ( VAR_3 == null ) { VAR_5 . METHOD_2 ( new TYPE_5 ( ) ) ; return ; } TYPE_6 . METHOD_3 ( VAR_6 . create ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) . to ( VAR_5 ) ; } 
public static void METHOD_1 ( final TYPE_1 . NameKey project , final java.lang.String ref ) { for ( final TYPE_2 cfg : TYPE_3 . METHOD_2 ( ) ) { if ( cfg . METHOD_3 ( ref ) ) { for ( final TYPE_4 VAR_1 : cfg . METHOD_4 ( project ) ) { TYPE_3 . METHOD_5 ( project , ref , cfg , VAR_1 ) ; } } } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_7 class ) . in ( VAR_5 ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_10 class ) . to ( VAR_11 class ) ; install ( VAR_12 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { for ( TYPE_2 < java.lang.String , TYPE_3 < TYPE_4 < ? , ? > > > VAR_3 : VAR_4 . METHOD_2 ( VAR_1 . getName ( ) ) . METHOD_3 ( ) ) { TYPE_4 < ? , ? > VAR_5 = VAR_3 . getValue ( ) . get ( ) ; if ( VAR_2 . METHOD_4 ( VAR_5 ) ) { ( ( TYPE_5 < ? , ? > ) ( VAR_5 ) ) . METHOD_5 ( ) ; } } } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; factory ( VAR_2 . Factory class ) ; install ( new TYPE_2 ( VAR_3 ) ) ; if ( ( ( VAR_4 ) == null ) && ( ( base ) == null ) ) { install ( new TYPE_3 ( ) ) ; } else { install ( new TYPE_4 ( ) ) ; } } 
public TYPE_1 create ( ) { final java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( out . size ( ) ) ; for ( final com.google.gerrit.reviewdb.client.Account a : out . values ( ) ) { r . add ( new TYPE_2 ( a ) ) ; } return new TYPE_1 ( r ) ; } 
public boolean METHOD_1 ( ) { if ( ( TYPE_1 . equals ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { if ( ! ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) ) { return false ; } } return ( METHOD_8 ( VAR_3 ) ) && ( METHOD_9 ( ) ) ; } 
public static void METHOD_1 ( boolean VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_2 , TYPE_1 < java.lang.String > VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_1 , id , VAR_2 ) . get ( new TYPE_3 < TYPE_4 , java.lang.String > ( VAR_3 ) { public void onSuccess ( TYPE_4 VAR_4 ) { VAR_5 . onSuccess ( TYPE_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ) ; } } ) ; } 
private int METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > s ) { int n = ( VAR_1 . METHOD_2 ( s ) ) ? VAR_1 . METHOD_3 ( s ) : VAR_2 ; return ( VAR_3 ) > 0 ? ( TYPE_2 . METHOD_4 ( n , VAR_3 ) ) + 1 : n ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( METHOD_2 ( ) ) || ( VAR_1 . METHOD_3 ( METHOD_2 ( ) ) ) ) || ( VAR_1 . METHOD_1 ( ) ) ) && ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) && ( ! ( METHOD_9 ( db ) ) ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 . Id VAR_1 ) throws TYPE_3 { final TYPE_4 . AccountGroup group = VAR_2 . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( user . get ( ) , group ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 { try { final TYPE_3 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 class , new TYPE_4 < TYPE_1 > ( VAR_1 , this ) ) ; VAR_2 . create ( ) . METHOD_4 ( METHOD_5 ( VAR_1 ) , VAR_3 class ) ; } catch ( TYPE_5 err ) { VAR_4 = null ; VAR_5 = null ; throw err ; } } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String name ) throws java.lang.Exception { TYPE_3 create = VAR_1 . create ( name ) ; create . apply ( VAR_2 , new TYPE_4 ( ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_3 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) ; } 
private static TYPE_1 < ? extends TYPE_2 > METHOD_1 ( java.lang.String name , TYPE_3 VAR_1 ) throws TYPE_4 { if ( TYPE_5 . METHOD_2 ( name ) ) { return null ; } TYPE_1 < ? > VAR_2 = TYPE_1 . METHOD_3 ( name , false , VAR_1 ) ; if ( ! ( VAR_3 class . METHOD_4 ( VAR_2 ) ) ) { throw new TYPE_6 ( java.lang.String.format ( STRING_1 , name , VAR_3 class . getName ( ) ) ) ; } return ( ( TYPE_1 < ? extends TYPE_2 > ) ( VAR_2 ) ) ; } 
public void onSuccess ( final java.util.List < TYPE_1 > result ) { final java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ; for ( final TYPE_1 VAR_1 : result ) { r . add ( new TYPE_2 ( VAR_1 ) ) ; } VAR_2 . METHOD_1 ( req , new TYPE_3 ( r ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.client . AccountGroup > schema , TYPE_3 cfg , TYPE_4 VAR_1 ) throws java.io.IOException { if ( TYPE_5 . METHOD_2 ( cfg ) ) { return new TYPE_6 ( ) ; } TYPE_7 VAR_2 = TYPE_8 . METHOD_3 ( VAR_1 , ( ( VAR_3 ) + STRING_1 ) , schema ) ; return TYPE_9 . METHOD_4 ( VAR_2 ) ; } 
public boolean METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 key ) { return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( METHOD_2 ( key ) ) ) + STRING_3 ) ) { TYPE_3 METHOD_3 ( ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_4 . METHOD_4 ( VAR_1 , key ) ; return VAR_3 . METHOD_5 ( TYPE_5 . on ( STRING_4 ) . METHOD_6 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; } } . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_1 = insert ( METHOD_3 ( repo ) ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = insert ( METHOD_3 ( repo ) ) ; METHOD_4 ( STRING_2 ) ; METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) ; METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ; } 
public TYPE_1 . ChangeInfo apply ( TYPE_2 req , final TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { TYPE_6 VAR_1 = req . METHOD_1 ( ) ; TYPE_7 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ! ( VAR_1 . METHOD_4 ( VAR_3 . get ( ) ) ) ) { throw new TYPE_8 ( STRING_1 ) ; } com.google.gerrit.reviewdb.client.Change change = METHOD_5 ( VAR_1 , input . message , VAR_2 . METHOD_6 ( ) ) ; return VAR_4 . create ( VAR_5 ) . format ( change ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_7 class ) . in ( VAR_5 ) ; factory ( VAR_8 . Factory class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_9 class ) . to ( VAR_10 class ) ; } 
private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { TYPE_2 . Key key = new TYPE_2 . Key ( VAR_2 , VAR_1 ) ; return auth ( db . METHOD_3 ( ) . get ( key ) ) ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_4 ( ) . log ( STRING_1 , e ) ; return null ; } } 
public TYPE_1 METHOD_1 ( ) { final TYPE_1 user = VAR_1 . METHOD_1 ( ) ; if ( ( user != null ) && ( user . METHOD_2 ( ) ) ) { TYPE_2 VAR_2 = VAR_3 . create ( ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) ) ; VAR_2 . METHOD_3 ( user . METHOD_4 ( ) ) ; return VAR_2 ; } return user ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) ) . METHOD_5 ( null ) . METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( STRING_4 , VAR_1 . METHOD_9 ( ) ) ; } 
public TYPE_1 run ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws TYPE_2 , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id me = getAccountId ( ) ; for ( final TYPE_3 . Key VAR_1 : VAR_2 ) { if ( ! ( me . equals ( VAR_1 . getParentKey ( ) ) ) ) throw new TYPE_2 ( new TYPE_4 ( ) ) ; } db . METHOD_1 ( ) . METHOD_2 ( VAR_2 ) ; return VAR_3 ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException { TYPE_2 VAR_1 = new TYPE_2 ( admin ) ; java.lang.String result = VAR_1 . METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_2 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_3 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_4 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_5 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_6 ) ) ; VAR_1 . close ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_2 ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; r . METHOD_4 ( ) ; } 
private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId , org.eclipse.jgit.lib.ObjectId VAR_1 , int VAR_2 ) { TYPE_1 result = new TYPE_1 ( ) ; VAR_3 = psId . getParentKey ( ) . get ( ) ; result . commit = new TYPE_2 ( ) ; VAR_4 . commit = VAR_1 . name ( ) ; VAR_5 = psId . get ( ) ; VAR_6 = VAR_2 ; result . status = STRING_1 ; return result ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_1 = insert ( METHOD_3 ( repo , null , null , null , null ) ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = insert ( METHOD_3 ( repo , null , null , null , null ) ) ; METHOD_4 ( STRING_2 ) ; METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) ; METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ; } 
public void delete ( TYPE_1 edit ) throws java.io.IOException { com.google.gerrit.reviewdb.client.Change change = edit . getChange ( ) ; org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_1 ( change . getProject ( ) ) ; try { TYPE_2 . METHOD_2 ( repo , edit ) ; } finally { repo . close ( ) ; } VAR_2 . index ( db . get ( ) , change ) ; } 
private TYPE_1 . OrmException METHOD_1 ( final java.lang.String VAR_1 , final TYPE_2 err ) { if ( ( ( err . METHOD_2 ( ) ) == null ) && ( ( err . METHOD_3 ( ) ) != null ) ) { err . METHOD_4 ( err . METHOD_3 ( ) ) ; } return schema . METHOD_5 ( ) . METHOD_1 ( VAR_1 , TYPE_3 . METHOD_6 ( ) , err ) ; } 
private static void METHOD_1 ( final java.lang.String in ) { try { TYPE_1 . METHOD_2 ( in ) ; METHOD_3 ( ( STRING_1 + in ) ) ; } catch ( TYPE_2 e ) { assertEquals ( ( STRING_2 + in ) , e . getMessage ( ) ) ; } } 
private static void METHOD_1 ( byte [ ] VAR_1 , TYPE_1 p ) { while ( ( ( p . value ) < ( VAR_1 . length ) ) && ( ( VAR_1 [ p . value ] ) == CHAR_1 ) ) { ( p . value ) ++ ; } } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 ) ) { return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; } return VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) . METHOD_4 ( VAR_3 ) ; } 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { METHOD_1 ( db , VAR_1 ) ; final TYPE_2 . AccountGroup group = db . METHOD_2 ( ) . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } group . METHOD_3 ( VAR_2 ) ; db . METHOD_2 ( ) . update ( java.util.Collections.singleton ( group ) ) ; return VAR_3 ; } 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { final TYPE_2 . Change change = db . changes ( ) . get ( id ) ; if ( change == null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } final TYPE_6 VAR_1 = new TYPE_6 ( ) ; final TYPE_1 d = new TYPE_1 ( ) ; d . METHOD_1 ( db , new TYPE_7 ( db ) , VAR_1 , change ) ; return d ; } 
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = VAR_2 . create ( METHOD_1 ( ) ) ; VAR_1 . add ( this ) ; VAR_1 . METHOD_2 ( getChange ( ) ) ; VAR_1 . METHOD_3 ( ) ; return METHOD_4 ( ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { if ( VAR_2 . equals ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; } else { TYPE_4 VAR_5 = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; return VAR_5 . METHOD_4 ( VAR_3 ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; } 
private Project . NameKey METHOD_1 ( TYPE_1 p ) { java.lang.String projectName = VAR_1 . METHOD_2 ( p ) . toString ( ) ; if ( ( VAR_2 ) != CHAR_1 ) { projectName = projectName . METHOD_3 ( VAR_2 , CHAR_1 ) ; } if ( projectName . METHOD_4 ( TYPE_2 ) ) { int VAR_3 = ( projectName . length ( ) ) - ( TYPE_2 . length ( ) ) ; projectName = projectName . METHOD_5 ( 0 , VAR_3 ) ; } return new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 . getName ( ) , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( VAR_2 ) ; } public void METHOD_3 ( TYPE_5 VAR_3 ) { VAR_4 . METHOD_4 ( STRING_2 ) ; super . METHOD_3 ( VAR_3 ) ; } } ) ; } 
private static TYPE_1 . Test METHOD_1 ( java.lang.String VAR_1 ) { if ( STRING_1 . equals ( VAR_1 ) ) { return VAR_2 ; } else if ( STRING_2 . equals ( VAR_1 ) ) { return VAR_3 ; } else if ( STRING_3 . equals ( VAR_1 ) ) { return VAR_4 ; } else { throw new TYPE_2 ( ( STRING_4 + VAR_1 ) ) ; } } 
private void METHOD_1 ( final TYPE_1 event ) { TYPE_2 change = VAR_1 . get ( ) ; if ( VAR_2 . METHOD_2 ( change ) ) { METHOD_3 ( change ) ; } try { METHOD_4 ( change ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_3 | java.io.IOException | TYPE_4 e ) { VAR_3 . error ( ( STRING_1 + ( VAR_4 ) ) , e ) ; } } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_3 class ) ) ; return VAR_4 . METHOD_3 ( modules ) ; } 
protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; VAR_1 . add ( STRING_2 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1 . add ( c . getName ( ) ) ; } return VAR_1 ; } 
public java.lang.String METHOD_1 ( ) { final java.lang.String s = METHOD_2 ( ) ; if ( ( s == null ) || ( ( s . length ( ) ) == 0 ) ) { return STRING_1 ; } final java.lang.String [ ] VAR_1 = s . METHOD_3 ( STRING_2 ) ; if ( ( VAR_1 . length ) < INT_1 ) { return STRING_1 ; } return VAR_1 [ INT_1 ] ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String config = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_5 , STRING_6 ) , new TYPE_4 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_7 , STRING_8 ) ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 < java.lang.String > VAR_2 , java.util.Set < java.lang.String > VAR_3 , java.util.Set < java.lang.String > VAR_4 , TYPE_2 VAR_5 ) { if ( ! ( VAR_6 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } try { METHOD_1 ( util . METHOD_4 ( change ) , util . METHOD_5 ( VAR_1 ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_7 . error ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; repo . branch ( STRING_2 ) . commit ( ) . add ( STRING_3 , VAR_1 ) . create ( ) ; java.lang.String VAR_2 = METHOD_2 ( STRING_4 ) ; org.junit.Assert . METHOD_3 ( VAR_2 . contains ( STRING_5 ) ) ; } 
void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { try { if ( ( VAR_1 ) == null ) { return ; } message . insert ( 0 , STRING_1 ) ; VAR_2 . create ( project , git , VAR_3 ) . METHOD_2 ( VAR_1 , VAR_4 , VAR_5 , message . toString ( ) ) ; } finally { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( ) ; } } } 
public static void METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_2 . METHOD_2 ( ) ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( VAR_3 ) ) . METHOD_4 ( ) ; } com.google.common.truth.Truth.assertThat ( ( ( TYPE_3 < ? > ) ( VAR_1 ) ) ) . isEmpty ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 info ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ; if ( ( ! ( TYPE_4 . equals ( info . path ( ) ) ) ) && ( ! ( info . METHOD_5 ( ) ) ) ) { VAR_1 . append ( ( ( info . METHOD_6 ( ) ) - ( info . METHOD_7 ( ) ) ) ) ; } VAR_1 . METHOD_8 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_2 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : break ; case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : default : revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) ; TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) ; break ; } this . VAR_15 = revision ; return this ; } 
public final java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) { VAR_1 . add ( VAR_2 . get ( ) ) ; } return VAR_1 ; } 
public static com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , org.eclipse.jgit.lib.ObjectId revision , com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet ( id ) ; ps . METHOD_2 ( new TYPE_1 ( revision . name ( ) ) ) ; ps . METHOD_3 ( VAR_1 ) ; ps . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; return ps ; } 
private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.Repository repo ; try { repo = VAR_2 . METHOD_2 ( VAR_3 ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } try { TYPE_1 VAR_4 = repo . METHOD_3 ( ) ; return VAR_4 . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } finally { repo . close ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_5 ( VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 cfg ) { METHOD_2 ( TYPE_2 . METHOD_3 ( true , java.util.Collections . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 , VAR_2 ) ) , VAR_3 ) ) ; TYPE_4 < TYPE_5 > factory ; if ( cfg . METHOD_6 ( STRING_1 , null , STRING_2 , false ) ) { factory = new TYPE_6 . Factory ( ) ; } else { factory = TYPE_7 . METHOD_7 ( ) ; } METHOD_8 ( new TYPE_8 ( factory ) ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { if ( VAR_2 . equals ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; } TYPE_4 VAR_5 = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; return VAR_5 . METHOD_4 ( VAR_3 ) ; } 
void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_3 VAR_2 , TYPE_1 < TYPE_4 < TYPE_5 > > VAR_3 , TYPE_1 < TYPE_4 < TYPE_5 > > VAR_4 , TYPE_6 VAR_5 ) { TYPE_4 < TYPE_2 > VAR_6 = VAR_1 . values ( ) ; TYPE_2 . METHOD_2 ( VAR_6 ) ; TYPE_7 cmd = new TYPE_7 ( VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; if ( cmd . METHOD_3 ( ) ) { cmd . METHOD_4 ( ) ; TYPE_8 . get ( ) . METHOD_5 ( cmd ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.String name , org.eclipse.jgit.lib.ObjectId id , org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = walk . METHOD_2 ( id ) ; TYPE_3 VAR_2 = walk . METHOD_1 ( VAR_1 ) ; return new TYPE_1 ( name , VAR_1 , VAR_1 . METHOD_3 ( ) , VAR_2 , VAR_2 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( STRING_1 ) ) ; final TYPE_4 ui = TYPE_5 . METHOD_2 ( VAR_2 class ) ; TYPE_5 . METHOD_3 ( ui ) ; TYPE_6 lib = new TYPE_6 ( new TYPE_7 < TYPE_8 > ( ) { public TYPE_8 get ( ) { return new TYPE_8 ( ui , VAR_1 ) ; } } ) ; METHOD_4 ( VAR_3 ) ; METHOD_4 ( VAR_4 ) ; TYPE_5 . METHOD_5 ( ui ) ; } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { final TYPE_2 . Key key = new TYPE_2 . Key ( VAR_2 , VAR_1 ) ; final TYPE_2 id = db . METHOD_3 ( ) . get ( key ) ; if ( id != null ) { return TYPE_1 . of ( id . getAccountId ( ) ) ; } return TYPE_1 . METHOD_4 ( ) ; } finally { db . close ( ) ; } } 
