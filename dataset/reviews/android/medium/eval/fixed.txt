private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } } 
public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { double VAR_1 = METHOD_2 ( METHOD_3 ( ) ) ; if ( ( VAR_1 >= FLOAT_1 ) && ( VAR_1 <= FLOAT_2 ) ) { return ; } if ( METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ) { if ( ( VAR_1 >= FLOAT_3 ) && ( VAR_1 <= FLOAT_2 ) ) { return ; } } fail ( ( STRING_2 + VAR_1 ) ) ; } 
public java.util.List < android.bluetooth.BluetoothDevice > METHOD_1 ( ) { final TYPE_1 service = VAR_2 ; if ( service != null ) { try { return service . METHOD_1 ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } return new java.util.ArrayList < > ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; int VAR_2 = INT_1 ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( 10 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( 100 ) ; TYPE_2 VAR_5 = METHOD_3 ( VAR_1 , VAR_2 ) ; try { VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) ; fail ( STRING_2 ) ; } catch ( TYPE_3 expected ) { } } 
public static void METHOD_1 ( java.lang.Object test , java.lang.Object VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { assertNotNull ( STRING_1 , VAR_2 ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( test , STRING_2 ) ; VAR_2 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) , VAR_3 ) ; } 
private final void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ; java.util.List < TYPE_3 > VAR_3 = TYPE_4 . METHOD_5 ( VAR_4 ) ; for ( TYPE_3 VAR_5 : VAR_3 ) { TYPE_5 VAR_6 = VAR_2 . METHOD_6 ( VAR_5 ) ; if ( ( VAR_6 . METHOD_7 ( ) ) && ( ( VAR_6 . equals ( METHOD_8 ( ) ) ) == false ) ) { METHOD_9 ( VAR_6 , VAR_6 ) ; } } } 
public void METHOD_1 ( TYPE_1 test , java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 , test . METHOD_3 ( ) , test . METHOD_4 ( ) , VAR_3 ) ; VAR_2 . METHOD_2 ( METHOD_5 ( VAR_1 ) ) ; } VAR_4 . METHOD_6 ( test ) ; super . METHOD_1 ( test , VAR_1 ) ; } 
private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { java.lang.String VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) ; if ( ( VAR_2 != null ) && ( ( VAR_2 . length ( ) ) > 0 ) ) { return VAR_2 ; } } return null ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) { return true ; } if ( ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) { return false ; } if ( ! ( super . equals ( VAR_1 ) ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( VAR_3 ) == ( VAR_4 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_6 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_7 , VAR_1 , STRING_1 , VAR_2 , false ) ; VAR_4 . METHOD_3 ( VAR_8 ) ; } 
public boolean METHOD_1 ( int subId ) { boolean VAR_1 = false ; try { TYPE_1 telephony = METHOD_2 ( ) ; if ( telephony != null ) VAR_1 = telephony . METHOD_1 ( subId ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ; } catch ( java.lang.NullPointerException e ) { } return VAR_1 ; } 
private void METHOD_1 ( java.lang.String parent , TYPE_1 c , java.lang.String VAR_1 ) { java.lang.String VAR_2 = c . METHOD_2 ( ) ; if ( METHOD_3 ( VAR_2 , parent , METHOD_4 ( ) ) ) { java.lang.String value = METHOD_5 ( c . METHOD_6 ( ) ) ; METHOD_7 ( context , VAR_2 , value , parent , VAR_1 , c , c ) ; } } 
public boolean METHOD_4 ( TYPE_1 context ) { if ( TYPE_2 . METHOD_2 ( context ) ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { return TYPE_2 . METHOD_3 ( context ) . METHOD_4 ( ) ; } else { return TYPE_2 . METHOD_3 ( context ) . METHOD_1 ( ) ; } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 = new TYPE_1 [ ] { } ; VAR_2 = VAR_3 = VAR_4 = - 1 ; VAR_5 = new TYPE_2 ( INT_1 , 0 , TYPE_3 . METHOD_4 ( STRING_1 ) ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; VAR_7 = new TYPE_4 ( METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_7 . start ( ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_8 class , STRING_2 , VAR_9 , VAR_10 ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( name ) ; if ( VAR_1 == null ) { VAR_1 = TYPE_3 . METHOD_1 ( name ) ; } if ( VAR_1 == null ) { VAR_1 = TYPE_5 . METHOD_1 ( name ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) . METHOD_3 ( 2 , 1 ) . METHOD_4 ( ) ; assertEquals ( VAR_3 , VAR_4 . METHOD_5 ( VAR_1 ) ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; } 
public void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_2 . METHOD_2 ( ) ) ) ) ; METHOD_3 ( VAR_3 ) ; synchronized ( this ) { METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ; } } 
public void METHOD_1 ( boolean VAR_1 ) { try { final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; long VAR_3 = TYPE_3 . METHOD_4 ( ) ; long VAR_4 = 10 ; assertFalse ( c . METHOD_5 ( VAR_4 , VAR_5 ) ) ; assertTrue ( ( ( METHOD_6 ( VAR_3 ) ) >= VAR_4 ) ) ; VAR_2 . METHOD_7 ( ) ; } catch ( TYPE_4 fail ) { METHOD_8 ( fail ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = VAR_2 ; VAR_5 . METHOD_3 ( VAR_1 ) ; VAR_6 . verify ( VAR_4 , METHOD_4 ( ) ) . METHOD_5 ( METHOD_6 ( VAR_7 class ) ) ; VAR_6 . verify ( VAR_4 , METHOD_4 ( ) ) . METHOD_7 ( METHOD_8 ( ) , METHOD_6 ( VAR_8 class ) ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; TYPE_1 . METHOD_3 ( VAR_1 . getName ( ) ) . METHOD_5 ( STRING_1 ) ; VAR_3 = TYPE_1 . METHOD_6 ( VAR_4 class ) ; VAR_5 = new TYPE_2 ( VAR_6 , VAR_7 , VAR_1 ) ; } 
private void METHOD_1 ( ) { if ( ( ( VAR_1 . length ) > 0 ) && ( ( VAR_1 [ 0 ] ) != null ) ) { if ( ( VAR_2 ) == null ) { VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , mContext , this , VAR_5 ) ; } else { VAR_2 . METHOD_3 ( VAR_3 , mContext , this ) ; } } else { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_4 ( ) ; } VAR_2 = null ; } } 
public java.lang.Object METHOD_1 ( ) { try { TYPE_1 e = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; VAR_1 = ( ( VAR_2 ) == null ) ? null : VAR_2 . METHOD_1 ( ) ; return e ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( e ) ; } } 
public android.os.Bundle METHOD_1 ( TYPE_1 VAR_1 , java.lang.String action , int x , int y , int VAR_2 , android.os.Bundle VAR_3 , boolean VAR_4 ) { synchronized ( VAR_5 ) { long VAR_6 = TYPE_2 . METHOD_2 ( ) ; try { return METHOD_3 ( METHOD_4 ( this , VAR_1 , true ) , action , x , y , VAR_2 , VAR_3 , VAR_4 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_6 ) ; } } } 
public boolean METHOD_1 ( com.android.jack.ir.ast.JMethod VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 != null ) { assert VAR_2 != null ; if ( ( VAR_2 . METHOD_5 ( VAR_3 class ) ) == null ) { VAR_2 . METHOD_6 ( new TYPE_3 ( VAR_2 ) ) ; } } return super . METHOD_1 ( VAR_1 ) ; } 
private static void METHOD_1 ( java.lang.String [ ] VAR_1 , int VAR_2 , int VAR_3 , java.util.List < java.lang.String > VAR_4 ) { for ( int i = VAR_2 ; i < VAR_3 ; i ++ ) { final java.lang.String VAR_5 = VAR_1 [ i ] ; if ( TYPE_1 . METHOD_2 ( VAR_5 ) ) { VAR_4 . METHOD_3 ( VAR_5 ) ; } else { break ; } } } 
public void METHOD_1 ( ) throws TYPE_1 { final short VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_2 ) ; args . METHOD_2 ( STRING_2 , 0 ) ; args . METHOD_2 ( STRING_3 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( VAR_1 , VAR_2 ) ; TYPE_4 . METHOD_6 ( VAR_4 ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , boolean VAR_4 , int subId ) { TYPE_2 VAR_5 ; if ( TYPE_3 . METHOD_2 ( subId ) ) { VAR_5 = TYPE_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , null ) ; } else { VAR_5 = TYPE_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } return new TYPE_1 ( VAR_5 ) ; } 
public static java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_3 > VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) . METHOD_5 ( ) . VAR_3 ; return TYPE_5 . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_2 , true , VAR_1 ) ) ; } 
public static int METHOD_1 ( int VAR_1 ) { int result = 0 ; int VAR_2 = 1 ; while ( VAR_1 != 0 ) { if ( ( VAR_1 & 1 ) != 0 ) { result |= TYPE_2 . METHOD_3 ( VAR_2 ) ; } VAR_1 >>>= 1 ; VAR_2 <<= 1 ; } return result ; } 
public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( 100 ) ; sb.append ( METHOD_1 ( ) . getName ( ) ) ; sb.append ( CHAR_1 ) ; sb.append ( VAR_1 . toString ( ) ) ; sb.append ( CHAR_2 ) ; sb.append ( type . METHOD_2 ( ) ) ; sb.append ( CHAR_3 ) ; return sb . toString ( ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 = method . METHOD_1 ( ) ; if ( ( ( method . METHOD_3 ( ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_2 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } session = VAR_1 . METHOD_7 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( method ) ; VAR_3 . METHOD_5 ( method ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { synchronized ( this ) { if ( ( VAR_2 ) == null ) { VAR_3 = VAR_1 ; VAR_2 = VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) ; } if ( ! ( VAR_2 . METHOD_3 ( ) ) ) VAR_2 . METHOD_4 ( ) ; } return true ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { TYPE_2 . i ( STRING_1 , STRING_2 ) ; throw new java.lang.NullPointerException ( STRING_3 ) ; } return ( ( ( VAR_2 ) >= ( VAR_3 ) ) && ( ( VAR_2 ) <= ( VAR_4 ) ) ) && ( VAR_1 . METHOD_3 ( STRING_4 , false ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ( ( VAR_3 ) + STRING_1 ) ) ; VAR_2 . METHOD_3 ( VAR_4 , VAR_5 , new TYPE_1 ( ) ) ; VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) ; try { VAR_2 . METHOD_3 ( VAR_4 , VAR_5 , new TYPE_1 ( ) ) ; fail ( ) ; } catch ( TYPE_3 expected ) { } } 
public void METHOD_1 ( ) throws android.os.RemoteException { TYPE_1 config = new TYPE_2 ( ) . addFeature ( 0 , VAR_1 ) . addFeature ( 0 , VAR_2 ) . build ( ) ; VAR_3 = config ; TYPE_1 result = VAR_4 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( config , result ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( device ) ; } 
private void METHOD_1 ( ) { try { synchronized ( this ) { METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; if ( VAR_3 ) out . METHOD_5 ( ) ; } } catch ( TYPE_2 x ) { TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) ; } catch ( java.io.IOException x ) { VAR_4 = true ; } } 
protected static java.lang.String METHOD_1 ( char [ ] s ) { TYPE_1 result = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( s . length ) ; ++ i ) { if ( i != 0 ) result . append ( CHAR_1 ) ; result . append ( TYPE_2 . METHOD_1 ( s [ i ] ) ) ; } return result . toString ( ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( TYPE_2 VAR_3 : m . METHOD_2 ( ) ) { sb.append ( VAR_3 . toString ( ) ) . append ( CHAR_1 ) ; for ( TYPE_3 item : VAR_3 . METHOD_3 ( ) ) { sb.append ( STRING_1 ) . append ( item . toString ( ) ) . append ( CHAR_1 ) ; } } return sb . toString ( ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , int index , int VAR_2 ) { if ( VAR_3 ) android.util.Log.d ( VAR_4 . TAG , ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) ) ; VAR_5 . METHOD_2 ( VAR_2 ) ; } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 < TYPE_4 > VAR_2 ) { java.util.List < TYPE_4 > VAR_3 = TYPE_5 . METHOD_2 ( VAR_2 ) ; TYPE_4 VAR_4 = TYPE_5 . METHOD_3 ( VAR_5 , VAR_1 . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; return new TYPE_6 ( TYPE_7 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , null , null ) , TYPE_8 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) , VAR_3 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 , VAR_1 ) ; for ( int i = 0 , size = VAR_3 . size ( ) ; i < size ; ++ i ) { TYPE_1 type = VAR_3 . get ( i ) ; if ( type . equals ( VAR_1 ) ) { VAR_3 . set ( i , VAR_2 ) ; } } } 
public static TYPE_1 < TYPE_2 > METHOD_1 ( com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 , TYPE_1 < com.android.jack.ir.ast.JDefinedClassOrInterface > VAR_3 ) { java.util.Set < TYPE_2 > VAR_2 = new TYPE_3 < TYPE_2 > ( ) ; for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : VAR_3 ) { if ( ( VAR_1 . METHOD_2 ( type ) ) || ( type . METHOD_2 ( VAR_1 ) ) ) { for ( com.android.jack.ir.ast.JMethod method : type . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( method . METHOD_5 ( ) ) ; } } } return VAR_2 ; } 
private long METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 class ) ; int VAR_3 = VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ; boolean VAR_5 = VAR_3 <= ( VAR_6 ) ; return VAR_5 ? VAR_3 : TYPE_1 . METHOD_6 ( ) . METHOD_5 ( VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 s = new TYPE_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; s . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ; s . METHOD_6 ( ) . getElement ( ) . METHOD_8 ( ) ; s . METHOD_8 ( ) ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; java.io.File VAR_3 ; try { VAR_3 = TYPE_2 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( TYPE_4 . getName ( ) , TYPE_5 . toString ( VAR_4 ) ) ; VAR_1 . METHOD_4 ( TYPE_6 . getName ( ) , STRING_3 ) ; VAR_1 . METHOD_4 ( TYPE_7 . getName ( ) , VAR_3 . METHOD_5 ( ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_8 ( e ) ; } return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_3 ) METHOD_2 ( ) ; if ( VAR_3 ) android.util.Log.d ( VAR_4 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ; VAR_5 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_5 . METHOD_5 ( ) ) { if ( VAR_2 ) { METHOD_6 ( VAR_7 ) ; } else { METHOD_6 ( VAR_8 ) ; } } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_5 ) != null ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , STRING_1 , VAR_1 , VAR_4 , ( ( TYPE_4 ) ( VAR_5 . METHOD_2 ( ) ) ) ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_3 , VAR_7 < TYPE_5 > METHOD_3 ( VAR_1 ) , VAR_2 ) ; return VAR_6 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ; VAR_1 . METHOD_6 ( null ) ; TYPE_6 < TYPE_7 > request = METHOD_8 ( TYPE_8 . with ( VAR_1 ) , VAR_2 ) ; request . METHOD_13 ( VAR_1 ) ; } 
void METHOD_1 ( java.lang.String uri , java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 , int VAR_4 ) throws TYPE_1 { if ( ( ( VAR_5 ) ++ ) > 0 ) { super . METHOD_1 ( uri , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_3 ; int VAR_4 = ( ( int ) ( METHOD_2 ( VAR_5 ) ) ) ; int VAR_6 = VAR_4 + ( VAR_7 ) ; int VAR_8 = METHOD_3 ( VAR_1 ) ; int VAR_9 = METHOD_4 ( VAR_5 ) ; METHOD_6 ( VAR_2 , VAR_4 , VAR_6 , VAR_8 , VAR_11 , VAR_9 ) ; } 
private void METHOD_1 ( TYPE_1 b ) { java.util.List < TYPE_2 > VAR_1 = b . METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( ( ( VAR_3 . METHOD_4 ( ) ) != ( VAR_4 ) ) && ( VAR_3 != ( VAR_5 ) ) ) { throw new java.lang.RuntimeException ( ( STRING_1 + STRING_2 ) ) ; } } 
public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new java.util.HashMap < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 , FLOAT_2 ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } java.util.Map < java.lang.Integer , TYPE_3 > m = new java.util.HashMap < > ( ) ; m . METHOD_4 ( 1 , FLOAT_1 ) ; try { TYPE_1 . METHOD_2 ( m ) . METHOD_3 ( 1 , FLOAT_1 , FLOAT_2 ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } } 
public void METHOD_1 ( ) { TYPE_1 match ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( 1 ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_1 , 2 ) ) ; VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( STRING_2 , 3 ) ) ) ; TYPE_1 result = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_2 , STRING_1 ) ; assertEquals ( match , result ) ; } 
public synchronized void METHOD_1 ( int VAR_1 ) throws TYPE_1 { if ( ( VAR_1 < 0 ) || ( VAR_1 > INT_1 ) ) throw new java.lang.IllegalArgumentException ( STRING_1 ) ; if ( METHOD_2 ( ) ) throw new TYPE_1 ( STRING_2 ) ; METHOD_3 ( ) . METHOD_4 ( VAR_2 , new java.lang.Integer ( VAR_1 ) ) ; } 
void METHOD_1 ( final long id , final int VAR_1 ) { if ( ( ( status ) & ( VAR_2 ) ) == 0 ) { status |= VAR_2 ; VAR_3 = new int [ ( VAR_1 / INT_1 ) + 1 ] ; } VAR_3 [ ( ( int ) ( id > > > INT_1 ) ) ] |= ( ( int ) ( id ) ) ; } 
private static void METHOD_1 ( TYPE_1 session , TYPE_2 < TYPE_3 > VAR_1 , TYPE_4 VAR_2 ) { if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { TYPE_3 VAR_4 = VAR_1 . METHOD_3 ( VAR_2 , session ) ; session . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) ; } } 
public synchronized TYPE_1 METHOD_1 ( java.lang.String name ) throws TYPE_2 { try { return METHOD_2 ( name ) ; } catch ( TYPE_3 e ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( this , name ) ; VAR_3 . METHOD_3 ( name , VAR_1 ) ; return VAR_1 ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( VAR_2 . METHOD_4 ( this , name ) , e ) ; } } 
public boolean equals ( java.lang.Object VAR_1 ) { return ( ( this ) == VAR_1 ) || ( ( ( VAR_1 != null ) && ( VAR_1 instanceof TYPE_1 ) ) && ( VAR_3 . equals ( ( ( TYPE_1 ) ( VAR_1 ) ) . VAR_3 ) ) ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 [ ] VAR_3 = VAR_4 ; if ( METHOD_2 ( VAR_3 ) ) { TYPE_4 VAR_5 = VAR_6 ; if ( VAR_5 == null ) { return false ; } java.lang.String VAR_7 = TYPE_5 . METHOD_3 ( VAR_2 ) ; TYPE_6 item = TYPE_7 . METHOD_4 ( VAR_7 , VAR_5 ) ; if ( item != null ) { METHOD_5 ( VAR_7 , item ) ; METHOD_6 ( VAR_3 , item ) ; } } return false ; } 
public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) return ; VAR_2 = VAR_1 ; if ( ( VAR_3 ) == null ) return ; if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 ) ; TYPE_1 . METHOD_3 ( mContext , VAR_5 ) ; } else { VAR_3 . METHOD_4 ( VAR_4 ) ; TYPE_1 . METHOD_5 ( mContext , VAR_5 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; boolean VAR_3 = VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_3 , true ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { while ( VAR_1 != null ) { java.lang.Class < ? extends TYPE_1 > type = VAR_1 . METHOD_2 ( ) ; if ( ( type == ( VAR_2 class ) ) || ( type == ( VAR_3 class ) ) ) { return VAR_1 ; } VAR_1 = VAR_1 . METHOD_3 ( ) ; } return null ; } 
private void METHOD_1 ( int VAR_1 , int VAR_2 ) { for ( TYPE_1 < TYPE_2 > i = VAR_4 . METHOD_2 ( ) ; i . METHOD_3 ( ) ; ) { TYPE_2 VAR_5 = i . METHOD_4 ( ) ; try { VAR_5 . METHOD_5 ( VAR_1 , VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_6 , ( ( STRING_1 + STRING_2 ) + ( e.getMessage ( ) ) ) ) ; i . METHOD_6 ( ) ; } } } 
public TYPE_1 METHOD_1 ( ) { int size = ( this . METHOD_2 ( ) ) > > 2 ; int VAR_1 = METHOD_3 ( ) ; return new TYPE_2 ( this , ( - 1 ) , 0 , size , size , VAR_1 , METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( TYPE_1 . eq ( STRING_3 ) , TYPE_1 . eq ( STRING_4 ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String name = TYPE_2 . getName ( VAR_1 ) ; if ( name == null ) { name = TYPE_3 . getName ( VAR_1 ) ; if ( name == null ) { name = TYPE_4 . getName ( VAR_1 ) ; } } return name ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 a = METHOD_2 ( STRING_1 ) ; TYPE_1 b = METHOD_2 ( STRING_2 ) ; TYPE_1 VAR_1 = new TYPE_2 ( a , b , VAR_2 ) . METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( a , VAR_1 , VAR_2 ) ; try { VAR_3 . METHOD_3 ( ) ; fail ( ) ; } catch ( TYPE_3 expected ) { assertEquals ( STRING_3 , expected . getMessage ( ) ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 type ) { switch ( type . METHOD_2 ( ) ) { case VAR_1 : return VAR_2 ; case VAR_3 : return VAR_4 ; case VAR_5 : return VAR_6 ; case VAR_7 : return VAR_8 ; case VAR_9 : return VAR_10 ; } return TYPE_3 . METHOD_3 ( type ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( VAR_2 . METHOD_3 ( ) ) ) { android.util.Log.w ( VAR_3 . TAG , ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_4 ) ; VAR_2 . METHOD_6 ( VAR_4 ) ; } METHOD_7 ( ) ; if ( ( METHOD_8 ( ) ) == 0 ) { if ( VAR_5 ) android.util.Log.d ( VAR_3 . TAG , STRING_3 ) ; METHOD_9 ( false ) ; } } 
public boolean METHOD_1 ( android.os.Message VAR_1 ) { if ( VAR_2 ) log ( ( ( ( getName ( ) ) + ( VAR_1 . toString ( ) ) ) + STRING_1 ) ) ; switch ( VAR_3 ) { case VAR_4 : if ( ( message.arg1 ) == ( VAR_5 ) ) { METHOD_2 ( VAR_1 ) ; } break ; case VAR_6 : METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; transitionTo ( VAR_7 ) ; break ; default : return VAR_8 ; } return VAR_10 ; } 
public void METHOD_1 ( ) { TYPE_1 match ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( 1 ) ) ; VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( INT_1 , 2 ) ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_2 , 3 ) ) ; TYPE_1 result = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_1 ) ; assertEquals ( match , result ) ; } 
private void METHOD_1 ( java.lang.String path ) { try { java.io.File VAR_1 = new java.io.File ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 , false ) ) ; TYPE_3 . METHOD_2 ( VAR_3 , path , false ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( VAR_4 , ( STRING_1 + ( e.getMessage ( ) ) ) ) ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 VAR_1 ) { if ( VAR_1 == null ) { TYPE_4 . i ( STRING_1 , STRING_2 ) ; VAR_1 = TYPE_5 . METHOD_2 ( context ) ; if ( VAR_1 == null ) { TYPE_4 . i ( STRING_1 , STRING_3 ) ; return null ; } } return context . METHOD_3 ( VAR_4 class ) . METHOD_1 ( VAR_1 ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String [ ] VAR_1 , int start , int VAR_2 ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( INT_1 ) ; for ( int i = start ; i < VAR_2 ; ++ i ) { if ( i != start ) { VAR_3 . append ( CHAR_1 ) ; } VAR_3 . append ( VAR_1 [ i ] ) ; } return VAR_3 . toString ( ) ; } 
public void METHOD_1 ( ) { android.renderscript.Allocation VAR_1 = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 4 ] ; TYPE_2 . METHOD_3 ( INT_1 , 1 , INT_2 , n ) ; VAR_1 . METHOD_4 ( n ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( INT_3 , 16 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_3 ( this ) ) { if ( VAR_1 . METHOD_4 ( ) ) { METHOD_5 ( ) ; METHOD_6 ( ) ; } VAR_1 . METHOD_7 ( VAR_4 ) ; VAR_1 . METHOD_7 ( VAR_5 ) ; } VAR_1 . METHOD_8 ( this ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_3 . assertTrue ( STRING_3 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_4 , null ) ) ; TYPE_3 . assertTrue ( STRING_5 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_6 , null ) ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_3 ( ) ) { return ; } VAR_1 . print ( STRING_1 ) ; VAR_1 . print ( METHOD_4 ( ) ) ; VAR_1 . println ( STRING_2 ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } VAR_1 . print ( STRING_3 ) ; VAR_1 . println ( ) ; } 
public void METHOD_1 ( ) { java.lang.Class < ? > target = VAR_1 class ; TYPE_1 VAR_3 = new TYPE_2 ( VAR_4 , null , target , VAR_5 , VAR_6 , 0 ) ; VAR_3 . run ( STRING_2 , null , null ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_3 . METHOD_2 ( 8 ) ) . METHOD_3 ( VAR_7 ) ; } 
public int METHOD_1 ( ) throws java.io.IOException { byte [ ] b = new byte [ 1 ] ; int res = - 1 ; res = METHOD_1 ( b , 0 , 1 ) ; return res != ( - 1 ) ? ( b [ 0 ] ) & INT_1 : - 1 ; } 
public void error ( TYPE_1 VAR_1 , TYPE_2 location , java.lang.String VAR_2 , java.lang.Object ... VAR_3 ) { switch ( VAR_1 ) { case VAR_4 : VAR_5 . info ( STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) ; break ; case VAR_6 : VAR_5 . METHOD_2 ( STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) ; break ; case VAR_7 : VAR_5 . error ( null , STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) ; break ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; TYPE_1 . when ( VAR_1 . METHOD_3 ( METHOD_4 ( ) ) ) . METHOD_5 ( VAR_2 ) ; assertFalse ( VAR_3 . METHOD_3 ( 0 ) ) ; assertFalse ( VAR_3 . METHOD_6 ( ) ) ; } 
public static int METHOD_1 ( int uid , int VAR_1 , int [ ] VAR_2 , boolean VAR_3 , int [ ] [ ] VAR_4 ) { int VAR_5 = ( VAR_3 ) ? VAR_6 : 0 ; return TYPE_1 . METHOD_1 ( uid , VAR_1 , VAR_2 , VAR_5 , VAR_4 , null , null ) ; } 
void METHOD_1 ( ) { final int VAR_1 = VAR_2 . size ( ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { TYPE_1 w = VAR_2 . get ( i ) ; if ( VAR_3 ) android.util.Slog.v ( TYPE_2 . TAG , ( STRING_1 + w ) ) ; w . METHOD_2 ( ) ; } } 
public java.lang.Integer METHOD_1 ( ) { java.lang.Integer count = 0 ; TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , null , null , null , null ) ; if ( VAR_1 != null ) { count = VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } return count ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; try { TYPE_3 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new java.lang.Class < ? > [ ] { VAR_3 class , VAR_4 class , VAR_5 class , VAR_6 class } , VAR_1 ) ; java.lang.System.out.println ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException VAR_8 ) { java.lang.System.out.println ( STRING_2 ) ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = ( ( TYPE_1 < TYPE_2 > ) ( super . METHOD_1 ( ) ) ) ; VAR_1 . METHOD_2 ( new TYPE_3 < TYPE_2 , java.lang.Object > ( m ) ) ; return VAR_1 ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( ) ; } } 
private synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) || ( ( VAR_2 ) != null ) ) { return ; } TYPE_1 pm = ( ( TYPE_1 ) ( mContext . METHOD_2 ( VAR_3 ) ) ) ; VAR_2 = pm . METHOD_3 ( VAR_4 , VAR_5 ) ; } 
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; java.lang.Class [ ] VAR_2 = TYPE_1 . METHOD_3 ( ) ; if ( ( ( VAR_2 . length ) == 1 ) && ( ( ( VAR_3 . size ( ) ) == 1 ) && ( VAR_4 class . METHOD_4 ( ) . equals ( VAR_3 . get ( 0 ) . getName ( ) ) ) ) ) { METHOD_5 ( STRING_1 ) ; VAR_5 . METHOD_6 ( VAR_6 ) ; } else { METHOD_7 ( VAR_2 , VAR_7 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 c = TYPE_1 . METHOD_2 ( ) ; TYPE_2 e = VAR_1 . METHOD_3 ( ) ; java.lang.String [ ] VAR_2 = e . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_2 , e . METHOD_4 ( ) ) ; c . METHOD_7 ( ) ; } 
public void METHOD_1 ( TYPE_1 context ) { if ( ( VAR_1 ) != null ) { for ( TYPE_2 < java.lang.String , TYPE_3 > VAR_2 : VAR_1 ) { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; if ( ( ( VAR_4 ) == null ) || ( ! ( VAR_4 . METHOD_3 ( VAR_3 ) ) ) ) { continue ; } TYPE_3 location = VAR_2 . METHOD_4 ( ) ; context . METHOD_5 ( VAR_5 , location , VAR_6 ) ; } } } 
public void METHOD_1 ( java.lang.StringBuilder sb ) { sb.append ( STRING_1 ) ; if ( ( VAR_1 ) == null ) { sb.append ( STRING_2 ) ; return ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( sb ) ; } else { sb.append ( STRING_3 ) ; } VAR_3 . METHOD_1 ( sb ) ; } 
public static final java.util.HashMap < java.lang.String , ? > METHOD_1 ( TYPE_1 in ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( in , null ) ; return ( ( java.util.HashMap < java.lang.String , ? > ) ( TYPE_5 . METHOD_4 ( VAR_1 , new java.lang.String [ 1 ] ) ) ) ; } 
public final char METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_2 ( i , VAR_2 ) ; return ( ( char ) ( TYPE_2 . METHOD_3 ( METHOD_4 ( i ) , ( ! ( VAR_3 ) ) ) ) ) ; } 
public void METHOD_1 ( int VAR_1 , TYPE_1 listener ) throws TYPE_2 { METHOD_2 ( ) ; if ( listener == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } try { TYPE_3 p = METHOD_3 ( VAR_1 , listener ) ; VAR_2 . METHOD_4 ( p ) ; VAR_3 . METHOD_1 ( p ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( STRING_2 , e , VAR_5 ) ; } } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , ( ( ( VAR_4 ) | ( VAR_5 ) ) | ( VAR_6 ) ) ) ; VAR_3 . METHOD_2 ( new TYPE_4 [ ] { TYPE_5 . METHOD_3 ( ) } ) ; return VAR_3 ; } 
public void METHOD_1 ( TYPE_1 context ) { if ( ( VAR_1 ) != null ) { TYPE_2 VAR_2 = context . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( VAR_2 != ( VAR_3 ) ) ) { java.lang.String name = TYPE_3 . METHOD_3 ( VAR_4 . getName ( ) ) ; if ( ! ( name . METHOD_4 ( VAR_1 ) ) ) { TYPE_4 location = TYPE_4 . METHOD_5 ( VAR_4 ) ; context . METHOD_6 ( VAR_5 , location , METHOD_7 ( name ) ) ; } } } } 
protected TYPE_1 METHOD_1 ( java.util.List < java.lang.Class < ? extends TYPE_3 > > VAR_1 ) throws TYPE_2 { TYPE_1 VAR_4 = null ; VAR_4 = TYPE_4 . METHOD_3 ( VAR_5 class , VAR_1 ) ; java.io.File [ ] VAR_6 = VAR_4 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_6 ) ; VAR_4 . METHOD_6 ( VAR_7 ) ; return VAR_4 ; } 
protected boolean METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { if ( ( VAR_4 ) == null ) { return false ; } TYPE_1 c = VAR_4 . METHOD_2 ( ) ; if ( ( c != null ) && ( c . METHOD_3 ( VAR_1 ) ) ) { android.content.Intent VAR_5 = METHOD_4 ( c , VAR_2 , VAR_3 ) ; METHOD_5 ( VAR_5 ) ; return true ; } return false ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , java.lang.String VAR_4 , java.lang.Object ... VAR_5 ) { switch ( VAR_1 ) { case VAR_6 : VAR_7 . info ( STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) ; break ; case VAR_8 : VAR_7 . METHOD_3 ( STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) ; break ; case VAR_9 : VAR_7 . error ( null , STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) ; break ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_4 , VAR_5 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) ; VAR_7 . METHOD_6 ( VAR_6 ) ; TYPE_2 . METHOD_7 ( VAR_8 ) ; org.mockito.Mockito.verify ( VAR_3 . METHOD_8 ( ) , TYPE_3 . METHOD_9 ( ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_6 ) , org.mockito.Matchers . METHOD_10 ( ) ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { assert ! ( METHOD_2 ( ) ) ; java.io.File path = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( ( ! ( path . METHOD_1 ( ) ) ) || ( path . METHOD_5 ( ) ) ) { throw new TYPE_2 ( VAR_1 ) ; } VAR_1 . METHOD_7 ( ) ; } 
public void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException , TYPE_2 { byte [ ] VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_5 . METHOD_4 ( VAR_3 ) ; if ( ( VAR_6 ) != null ) { byte [ ] VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_4 ) ; } if ( VAR_1 ) { METHOD_5 ( ) ; } else { METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( this . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( true , null ) ; VAR_2 = this . VAR_1 ; new TYPE_1 ( TAG ) . start ( ) ; METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; TYPE_2 . METHOD_8 ( 100 ) ; } 
static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = new TYPE_4 ( VAR_3 ) ; VAR_2 . METHOD_2 ( new java.lang.String [ ] { context . METHOD_3 ( VAR_4 ) } ) ; return new TYPE_1 ( new TYPE_5 [ ] { VAR_2 , VAR_1 } , context ) ; } 
private static int METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { if ( VAR_1 ) { if ( ( ( VAR_3 ) == ( VAR_4 ) ) || ( ( VAR_3 ) == ( VAR_5 ) ) ) { return 0 ; } } else { if ( ( VAR_3 ) == ( VAR_6 ) ) { return 0 ; } } throw VAR_2 . METHOD_2 ( ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { boolean VAR_3 = false ; for ( TYPE_1 VAR_4 : VAR_2 . METHOD_3 ( ) ) { if ( VAR_4 . METHOD_4 ( ) . equals ( VAR_1 . METHOD_4 ( ) ) ) { VAR_3 = true ; break ; } } return VAR_3 ; } 
public void METHOD_1 ( ) { android.renderscript.Allocation VAR_1 = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 2 ] ; TYPE_2 . METHOD_3 ( INT_1 , 1 , INT_2 , n ) ; VAR_1 . METHOD_4 ( n ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( INT_1 , 16 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . i ( VAR_1 , STRING_1 ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; VAR_3 . METHOD_4 ( VAR_9 ) ; VAR_2 . METHOD_5 ( VAR_10 ) ; } else { TYPE_1 . i ( VAR_1 , STRING_4 ) ; } VAR_2 . METHOD_6 ( ) ; } 
java.util.List < TYPE_1 < TYPE_2 > > METHOD_1 ( ) { java.util.List < TYPE_1 < TYPE_2 > > VAR_1 = super . METHOD_1 ( ) ; TYPE_1 < TYPE_2 > VAR_2 = TYPE_3 . not ( new TYPE_4 ( VAR_3 class ) ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_4 ) ) { TYPE_1 < TYPE_2 > VAR_5 = TYPE_3 . not ( new TYPE_4 ( VAR_6 class ) ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; } return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( ) . equals ( VAR_3 ) ) ) { context . METHOD_4 ( VAR_4 , VAR_2 , context . METHOD_5 ( VAR_2 ) , STRING_1 ) ; } } 
public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( 100 ) ; sb.append ( METHOD_1 ( ) . getName ( ) ) ; sb.append ( CHAR_1 ) ; sb.append ( VAR_1 . METHOD_2 ( ) ) ; sb.append ( CHAR_2 ) ; return sb . toString ( ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; METHOD_3 ( new TYPE_4 ( info , METHOD_4 ( info , VAR_2 ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_5 ( x , e ) ; } } 
void METHOD_1 ( ) { for ( int i = ( VAR_1 . size ( ) ) - 1 ; i >= 0 ; i -- ) { android.util.Slog.v ( VAR_2 . TAG , ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_1 . get ( i ) . VAR_3 ) ) ) ; } } 
public int METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { android.util.Log.d ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; return - 1 ; } if ( METHOD_3 ( VAR_3 ) ) { android.util.Log.d ( TYPE_2 . TAG , ( ( ( STRING_3 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; } return 1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 [ ] VAR_1 = new TYPE_1 [ 0 ] ; TYPE_2 request = new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_4 ( ) . METHOD_4 ( VAR_2 ) ) . build ( ) ; TYPE_5 result = METHOD_5 ( request ) ; TYPE_6 . METHOD_6 ( result . METHOD_7 ( ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; VAR_9 = VAR_10 ; VAR_11 = VAR_12 ; VAR_13 = VAR_14 ; VAR_15 = VAR_16 ; VAR_17 = VAR_18 ; VAR_19 = VAR_20 ; VAR_21 = VAR_22 ; return VAR_2 ; } 
public boolean METHOD_1 ( android.os.Message VAR_1 ) { switch ( VAR_2 ) { case VAR_3 : VAR_4 . METHOD_2 ( this ) ; break ; case VAR_5 : transitionTo ( VAR_6 ) ; break ; case VAR_7 : METHOD_3 ( ) ; transitionTo ( VAR_8 ) ; break ; case VAR_9 : VAR_10 . METHOD_4 ( VAR_11 , this ) ; VAR_10 . METHOD_5 ( VAR_11 , this ) . METHOD_6 ( ) ; transitionTo ( VAR_8 ) ; break ; } return VAR_12 ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws TYPE_3 { if ( VAR_1 == null ) { throw new TYPE_3 ( STRING_1 ) ; } TYPE_4 VAR_3 = TYPE_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 == null ) { throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; } return TYPE_5 . METHOD_1 ( VAR_1 , VAR_3 ) ; } 
public void METHOD_1 ( final java.lang.String log ) { if ( METHOD_2 ( log , false ) ) { METHOD_3 ( VAR_1 , new java.lang.Runnable ( ) { public void run ( ) { METHOD_4 ( VAR_2 , ( STRING_1 + log ) ) ; } } ) ; if ( ( VAR_3 ) != null ) { VAR_3 . info ( STRING_2 , log ) ; } } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_3 . equals ( VAR_2 , VAR_1 ) ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_5 ) ; TYPE_1 VAR_6 = null ; if ( ( VAR_5 ) != null ) { VAR_6 = VAR_7 . METHOD_3 ( ) ; } METHOD_4 ( VAR_6 ) ; METHOD_5 ( ) ; if ( ( VAR_5 ) != null ) { METHOD_6 ( VAR_5 ) ; VAR_5 = null ; } } } 
public static void METHOD_1 ( int i , byte [ ] VAR_1 , int offset ) { VAR_1 [ offset ] = ( ( byte ) ( i > > > 16 ) ) ; VAR_1 [ ( offset + 1 ) ] = ( ( byte ) ( i > > > 8 ) ) ; VAR_1 [ ( offset + 2 ) ] = ( ( byte ) ( i ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) throws java.io.IOException { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; } server = METHOD_4 ( VAR_1 , VAR_2 ) ; try { out = new TYPE_2 ( new TYPE_3 ( server . METHOD_5 ( ) ) , true , VAR_3 ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( ( ( VAR_3 ) + STRING_1 ) , e ) ; } in = new TYPE_6 ( server . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > VAR_3 , TYPE_3 < java.lang.String > VAR_4 , TYPE_4 VAR_5 , int VAR_6 , boolean VAR_7 , java.lang.String [ ] args ) { if ( new TYPE_5 ( VAR_3 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ) { return new TYPE_6 ( VAR_1 , VAR_3 , args ) ; } else { return null ; } } 
public void METHOD_1 ( ) { when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) ) ) . thenReturn ( false ) ; when ( VAR_2 . METHOD_4 ( METHOD_5 ( VAR_3 class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) ; VAR_4 . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 , VAR_6 , VAR_7 ) , null , null , false , true , null ) ; } 
public void METHOD_1 ( ) { java.lang.String [ ] res = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_1 , STRING_1 } ; TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_3 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( STRING_4 ) ; int VAR_3 = 0 ; for ( ; VAR_2 . METHOD_4 ( ) ; VAR_3 ++ ) { assertEquals ( res [ VAR_3 ] , VAR_2 . METHOD_5 ( ) ) ; } assertEquals ( 4 , VAR_3 ) ; } 
public void METHOD_1 ( ) { java.util.ArrayList VAR_1 = new java.util.ArrayList ( 5 ) ; assertEquals ( STRING_1 , 0 , VAR_1 . size ( ) ) ; VAR_1 = new java.util.ArrayList ( 0 ) ; assertEquals ( STRING_1 , 0 , VAR_1 . size ( ) ) ; try { new java.util.ArrayList ( ( - 1 ) ) ; fail ( STRING_2 ) ; } catch ( java.lang.IllegalArgumentException expected ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; VAR_1 = METHOD_2 ( true , STRING_1 , false ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; METHOD_3 ( VAR_2 , VAR_3 , STRING_2 ) ; METHOD_3 ( VAR_2 , VAR_4 , STRING_3 ) ; METHOD_3 ( VAR_2 , VAR_5 , STRING_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Set < java.io.File > VAR_1 = TYPE_1 . METHOD_2 ( new java.io.File ( STRING_1 ) ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; assertTrue ( ( STRING_2 + ( VAR_1 . toString ( ) ) ) , VAR_1 . METHOD_5 ( ) ) ; } 
public static int METHOD_1 ( int value , int VAR_1 ) { int VAR_3 = INT_1 ; return ( ( ( value < < ( VAR_1 | INT_2 ) ) + ( value > > ( VAR_1 ^ INT_3 ) ) ) + ( value > > > ( VAR_1 + INT_4 ) ) ) + ( value < < ( VAR_1 - VAR_3 ) ) ; } 
private static void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_3 [ i ] . get ( ) ) ) { java.lang.System.out.println ( ( ( ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_2 [ i ] ) ) + STRING_3 ) + ( VAR_3 [ i ] . get ( ) ) ) ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( new byte [ 0 ] ) ) ; assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( new byte [ 1 ] ) ) ; } 
public final void verify ( TYPE_1 key , java.lang.String VAR_1 ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { java.lang.String VAR_2 = TYPE_7 . METHOD_1 ( c . METHOD_2 ( ) ) ; TYPE_8 VAR_3 ; if ( VAR_1 != null ) { VAR_3 = TYPE_8 . METHOD_3 ( VAR_2 , VAR_1 ) ; } else { VAR_3 = TYPE_8 . METHOD_3 ( VAR_2 ) ; } METHOD_4 ( key , VAR_3 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , int index , int VAR_2 , TYPE_1 VAR_3 ) { if ( VAR_4 ) android.util.Log.d ( VAR_5 . TAG , ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) ) ; TYPE_3 VAR_6 = new TYPE_3 ( mContext , VAR_1 , null ) ; VAR_6 . set ( VAR_3 ) ; VAR_7 . METHOD_2 ( VAR_6 , VAR_2 , new TYPE_4 ( VAR_8 , VAR_8 ) ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 element ) { TYPE_2 VAR_1 = element . METHOD_2 ( ) ; for ( int j = 0 ; j < ( VAR_1 . METHOD_3 ( ) ) ; j ++ ) { TYPE_3 VAR_2 = VAR_1 . item ( j ) ; if ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ) { return VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; } } return null ; } 
public static TYPE_1 METHOD_1 ( int state , java.lang.String VAR_1 ) { return new TYPE_1 ( state , false , VAR_2 , new TYPE_2 ( VAR_3 ) , null , null , null , null , null , false , false , false , false , false , false , false , 0 , false , false , false , true , VAR_4 , false , VAR_1 , null ) ; } 
public int METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , int version , int VAR_4 , int VAR_5 ) { if ( ! ( VAR_6 ) ) { throw new java.lang.RuntimeException ( ( ( VAR_7 . TAG ) + STRING_1 ) ) ; } return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , version , VAR_4 , VAR_5 ) ; } 
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( ( ( ! ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) && ( ! ( VAR_1 . METHOD_2 ( STRING_2 ) ) ) ) && ( ! ( VAR_1 . METHOD_2 ( STRING_3 ) ) ) ) && ( ! ( VAR_1 . METHOD_3 ( STRING_5 ) ) ) ; } 
void METHOD_1 ( java.lang.String [ ] expected , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; assertEquals ( expected . length , VAR_2 . length ) ; for ( int i = 0 ; i < ( expected . length ) ; ++ i ) { assertEquals ( ( STRING_1 + i ) , expected [ i ] , VAR_2 [ i ] ) ; } } 
public static java.lang.String METHOD_1 ( TYPE_1 context ) { java.lang.String msg = STRING_1 ; try { TYPE_2 pm = context . METHOD_2 ( ) ; TYPE_3 VAR_1 = pm . METHOD_3 ( context . METHOD_4 ( ) , 0 ) ; msg = STRING_2 ; if ( ( VAR_2 ) != null ) { msg = VAR_2 ; } } catch ( TYPE_4 e ) { android.util.Log.d ( VAR_3 . TAG , msg ) ; } return msg ; } 
private static TYPE_1 METHOD_1 ( TYPE_7 locale , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { java.lang.String key = ( ( ( locale + STRING_1 ) + VAR_2 ) + STRING_1 ) + VAR_3 ; TYPE_4 VAR_4 = TYPE_5 . get ( key ) ; if ( VAR_4 == null ) { VAR_4 = TYPE_6 . METHOD_2 ( locale , null , VAR_2 , VAR_3 ) ; TYPE_5 . METHOD_3 ( key , VAR_4 ) ; } return VAR_4 ; } 
public void METHOD_1 ( byte VAR_1 , TYPE_1 status ) { if ( VAR_2 ) { android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) ) ; } VAR_3 . METHOD_3 ( VAR_1 , status . status , true ) ; } 
private boolean METHOD_1 ( int VAR_2 , int VAR_3 ) { if ( VAR_2 >= 0 ) { if ( VAR_3 == ( VAR_5 ) ) { if ( VAR_2 <= ( VAR_6 ) ) { return true ; } } else if ( ( VAR_3 < ( VAR_5 ) ) && ( VAR_3 >= ( VAR_7 ) ) ) { return true ; } } return false ; } 
private static TYPE_1 METHOD_1 ( ) { TYPE_2 . d ( STRING_1 , STRING_2 ) ; TYPE_1 VAR_1 = null ; try { VAR_1 = TYPE_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( true ) ; } catch ( java.io.IOException e ) { } return VAR_1 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , VAR_4 . METHOD_6 ( ) ) ; if ( ( VAR_1 . METHOD_7 ( ) ) == ( VAR_5 ) ) { final TYPE_3 config = new TYPE_3 ( ) ; VAR_1 . METHOD_8 ( config ) ; METHOD_9 ( config ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) == null ) { throw new TYPE_2 ( STRING_1 ) ; } try { VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 . METHOD_2 ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_5 , STRING_2 ) ; VAR_1 = null ; throw new TYPE_1 ( VAR_6 ) ; } } 
static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return false ; } TYPE_2 path = TYPE_2 . METHOD_2 ( VAR_2 ) ; if ( path == null ) { return false ; } if ( VAR_5 . METHOD_3 ( ) ) { path . METHOD_4 ( ) ; return false ; } path . METHOD_5 ( VAR_5 . METHOD_6 ( new TYPE_3 ( ) ) ) ; return true ; } 
public void METHOD_1 ( ) { int [ ] VAR_1 = new int [ ] { VAR_2 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 } ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { try { new TYPE_1 ( ) . METHOD_2 ( VAR_1 [ i ] , STRING_1 ) ; fail ( ( STRING_2 + ( VAR_1 [ i ] ) ) ) ; } catch ( java.io.IOException expected ) { } } } 
public TYPE_1 METHOD_1 ( ) { TYPE_1 pkg = super . METHOD_1 ( ) ; if ( pkg == null ) { try { pkg = TYPE_2 . METHOD_2 ( null , METHOD_3 ( ) , 0 , null , STRING_1 , null , METHOD_6 ( ) . METHOD_7 ( ) ) ; METHOD_8 ( pkg ) ; } catch ( java.lang.Exception e ) { METHOD_9 ( STRING_2 , e.toString ( ) ) ; } } return pkg ; } 
public static float METHOD_1 ( float a , float b ) { if ( a != a ) return a ; if ( ( ( a == FLOAT_1 ) && ( b == FLOAT_1 ) ) && ( ( java.lang.Float.floatToRawIntBits ( a ) ) == ( VAR_1 ) ) ) { return b ; } return a >= b ? a : b ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) throws TYPE_3 { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_2 p : VAR_1 ) { if ( ( p . METHOD_2 ( ) ) && ( p . METHOD_3 ( VAR_3 ) ) ) { VAR_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( p ) ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_3 = TYPE_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; VAR_6 = TYPE_3 . METHOD_3 ( VAR_7 , VAR_8 ) ; TYPE_4 < TYPE_5 > VAR_9 = TYPE_4 . METHOD_4 ( VAR_10 class ) ; org.mockito.Mockito.verify ( VAR_2 ) . METHOD_5 ( VAR_9 . METHOD_6 ( ) ) ; VAR_11 = VAR_9 . METHOD_7 ( ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , float ... VAR_2 ) throws java.lang.Throwable { METHOD_2 ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; METHOD_2 ( STRING_2 ) ; METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( 10 , VAR_3 ) ) ; try { METHOD_6 ( VAR_2 ) ; } finally { METHOD_7 ( ) ; } } 
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { synchronized ( VAR_1 ) { final int VAR_2 = VAR_1 . size ( ) ; java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( VAR_2 ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_3 . METHOD_2 ( new TYPE_1 ( VAR_1 . METHOD_3 ( i ) ) ) ; } return VAR_3 ; } } 
public synchronized boolean METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( VAR_2 , STRING_1 ) ; if ( VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ) { METHOD_4 ( STRING_2 ) ; return false ; } METHOD_4 ( ( STRING_3 + VAR_1 ) ) ; VAR_6 = VAR_1 ; VAR_7 . METHOD_6 ( VAR_8 ) ; return true ; } 
private int METHOD_1 ( java.lang.Class < ? > VAR_1 , boolean VAR_2 ) throws java.io.IOException { output . METHOD_2 ( VAR_3 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_3 ( VAR_1 ) ; if ( VAR_4 . METHOD_4 ( ) ) { METHOD_5 ( VAR_4 , VAR_2 ) ; } else { METHOD_6 ( VAR_4 , VAR_2 ) ; } int VAR_5 = METHOD_7 ( ) ; if ( ! VAR_2 ) { VAR_6 . METHOD_8 ( VAR_1 , VAR_5 ) ; } return VAR_5 ; } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 item = VAR_2 . get ( VAR_1 ) ; if ( item == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return item . METHOD_3 ( ) ; } 
protected java.lang.Integer METHOD_1 ( ) { int n = number ; if ( n <= 1 ) return n ; TYPE_1 VAR_1 = new TYPE_1 ( ( n - 1 ) ) ; VAR_1 . METHOD_2 ( ) ; return ( new TYPE_1 ( ( n - 2 ) ) . METHOD_1 ( ) ) + ( VAR_1 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) { assertTrue ( STRING_1 , ( ( VAR_1 . get ( INT_1 ) ) == ( VAR_2 [ INT_1 ] ) ) ) ; try { VAR_1 . get ( INT_2 ) ; fail ( STRING_2 ) ; } catch ( TYPE_1 e ) { assertNotNull ( e.getMessage ( ) ) ; } } 
public void METHOD_1 ( int VAR_1 ) { TYPE_2 . d ( this , STRING_1 ) ; if ( ! ( METHOD_2 ( ) ) ) { final int VAR_2 = METHOD_3 ( VAR_1 ) ; if ( VAR_2 != ( VAR_3 ) ) { METHOD_4 ( VAR_2 ) ; } } } 
public static TYPE_1 METHOD_1 ( byte [ ] name ) { TYPE_2 VAR_1 ; try { VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; } catch ( TYPE_3 VAR_2 ) { throw new TYPE_4 ( STRING_2 , VAR_2 ) ; } byte [ ] VAR_3 = VAR_1 . METHOD_3 ( name ) ; VAR_3 [ 6 ] &= INT_1 ; VAR_3 [ 6 ] |= INT_2 ; VAR_3 [ 8 ] &= INT_3 ; VAR_3 [ 8 ] |= INT_4 ; return new TYPE_1 ( VAR_3 ) ; } 
private static int METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : return VAR_6 ; case VAR_7 : case VAR_8 : case VAR_9 : return VAR_11 ; default : throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( TYPE_1 . METHOD_2 ( ( VAR_1 & - 1 ) ) ) ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { assert ( VAR_3 ) != null ; try { VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_7 e ) { } catch ( TYPE_8 e ) { throw new TYPE_3 ( e ) ; } } 
public void METHOD_1 ( ) { assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) ; assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) ; assertTrue ( STRING_3 , TYPE_1 . METHOD_2 ( CHAR_3 ) ) ; assertTrue ( STRING_4 , TYPE_1 . METHOD_2 ( CHAR_4 ) ) ; assertTrue ( STRING_5 , TYPE_1 . METHOD_2 ( CHAR_5 ) ) ; assertTrue ( STRING_6 , TYPE_1 . METHOD_2 ( CHAR_6 ) ) ; assertFalse ( STRING_7 , TYPE_1 . METHOD_2 ( CHAR_7 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this ) ; when ( mContext . METHOD_4 ( VAR_2 ) ) . thenReturn ( VAR_3 ) ; METHOD_5 ( ) . when ( VAR_3 ) . METHOD_6 ( METHOD_7 ( ) , METHOD_8 ( ) , METHOD_9 ( VAR_4 . String class ) , VAR_5 . METHOD_10 ( ) , METHOD_9 ( VAR_6 class ) ) ; VAR_7 = new TYPE_3 ( mContext , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , boolean VAR_1 , int VAR_2 , byte [ ] VAR_3 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( device , VAR_1 , VAR_2 , VAR_3 ) ; } 
public static < TYPE_1 , TYPE_2 > java.util.Map < TYPE_1 , TYPE_2 > METHOD_1 ( java.util.Set < TYPE_1 > set , TYPE_3 < ? super TYPE_1 , TYPE_2 > VAR_1 ) { if ( set instanceof TYPE_4 ) { return TYPE_5 . METHOD_1 ( ( ( TYPE_4 < TYPE_1 > ) ( set ) ) , VAR_1 ) ; } else { return new TYPE_6 < TYPE_1 , TYPE_2 > ( set , VAR_1 ) ; } } 
protected java.lang.String METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { final java.lang.String VAR_3 ; if ( VAR_1 == 16 ) { VAR_3 = STRING_1 ; } else { VAR_3 = STRING_2 ; } return ( VAR_3 + STRING_3 ) + ( VAR_2 . toString ( ) . METHOD_2 ( VAR_5 ) ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_5 VAR_3 = TYPE_6 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_1 . METHOD_4 ( ) ) ) ; TYPE_7 VAR_4 = TYPE_3 . METHOD_7 ( VAR_1 ) ; TYPE_8 VAR_5 = new TYPE_9 ( VAR_3 , VAR_4 , VAR_6 , METHOD_8 ( ) , TYPE_3 . METHOD_6 ( VAR_1 . METHOD_3 ( ) ) ) ; METHOD_9 ( VAR_5 ) ; METHOD_10 ( VAR_7 , VAR_4 ) ; return false ; } 
private TYPE_1 METHOD_1 ( com.android.jack.ir.ast.JMethod VAR_1 ) throws TYPE_2 , TYPE_3 , java.io.IOException { TYPE_1 VAR_2 = VAR_3 . get ( ) ; if ( ( VAR_2 == null ) || ( ( VAR_2 . METHOD_2 ( ) ) != ( VAR_4 ) ) ) { TYPE_4 VAR_5 = VAR_6 . METHOD_1 ( VAR_4 ) ; VAR_2 = VAR_5 . METHOD_6 ( VAR_1 ) ; } return VAR_2 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_2 != null ) { TYPE_3 data = VAR_2 . METHOD_3 ( VAR_1 ) ; if ( data != null ) { TYPE_4 VAR_3 = data . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) ; } } VAR_5 = null ; } 
private void METHOD_1 ( TYPE_1 is , TYPE_2 VAR_1 , java.lang.String name ) { try { TYPE_3 VAR_2 = new TYPE_3 ( name ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( is , VAR_1 ) ; } catch ( java.lang.Exception e ) { throw new TYPE_4 ( ( STRING_1 + name ) , e ) ; } } 
public static synchronized int METHOD_1 ( TYPE_1 provider , int VAR_1 ) { java.lang.String VAR_2 = provider . getName ( ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_3 ( ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_4 ( VAR_3 , provider , ( VAR_1 - 1 ) ) ; if ( VAR_3 == VAR_4 ) { return - 1 ; } TYPE_2 . METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( VAR_4 ) ; return ( VAR_4 . METHOD_7 ( VAR_2 ) ) + 1 ; } 
public void METHOD_1 ( int VAR_1 , int count , int [ ] d ) { int VAR_2 = ( VAR_3 . METHOD_2 ( ) ) * count ; METHOD_3 ( VAR_1 , count , ( ( d . length ) * 4 ) , VAR_2 ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 is ) throws TYPE_3 { final TYPE_4 VAR_1 = new TYPE_4 ( is , true ) ; try { final long VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 == INT_1 ) { return null ; } return new TYPE_1 ( VAR_2 ) ; } catch ( java.lang.Exception e ) { throw new TYPE_3 ( e ) ; } finally { VAR_1 . METHOD_4 ( ) ; } } 
void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String s = METHOD_2 ( VAR_1 , 10 ) ; this . METHOD_3 ( ) ; int VAR_2 = TYPE_1 . METHOD_4 ( this . VAR_3 , s ) ; if ( VAR_2 < ( s . length ( ) ) ) { throw METHOD_6 ( VAR_1 ) ; } } 
public TYPE_1 METHOD_1 ( ) { try { android.os.Bundle VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; if ( VAR_1 . METHOD_4 ( ) ) return null ; TYPE_1 VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 . METHOD_4 ( ) ) return null ; return VAR_2 ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } } 
synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , long [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; METHOD_4 ( VAR_1 ) ; assertFalse ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) ; METHOD_5 ( VAR_1 ) ; assertTrue ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { VAR_1 . METHOD_6 ( ) ; } } ) ; } } 
public void METHOD_1 ( TYPE_1 device ) { if ( ! ( device . METHOD_2 ( VAR_1 ) ) ) return ; TYPE_2 VAR_2 = device . METHOD_3 ( ) ; try { for ( TYPE_3 listener : VAR_3 . values ( ) ) { listener . METHOD_4 ( VAR_2 ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( TYPE_4 . TAG , STRING_1 , e ) ; } } 
private final boolean METHOD_1 ( TYPE_1 uri , int uid , int VAR_1 ) { if ( uid == 0 ) { return true ; } java.util.HashMap < TYPE_1 , TYPE_3 > VAR_2 = VAR_3 . get ( uid ) ; if ( VAR_2 == null ) return false ; TYPE_3 VAR_4 = VAR_2 . get ( uri ) ; if ( VAR_4 == null ) return false ; return ( VAR_1 & ( VAR_5 ) ) == VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_3 . METHOD_3 ( VAR_5 , VAR_2 ) ; } VAR_3 . METHOD_4 ( rr , VAR_1 , VAR_2 ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 c ) { return new TYPE_1 ( VAR_1 . METHOD_2 ( ) , c . state , VAR_2 , VAR_3 , VAR_4 , VAR_1 . METHOD_3 ( ) , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , false , false , 0 , 0 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ; } 
static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 device ) throws TYPE_3 , TYPE_4 , java.io.IOException { if ( device != null ) { java.lang.String msg = STRING_1 + ( device . METHOD_2 ( ) ) ; byte [ ] VAR_2 = TYPE_5 . METHOD_3 ( msg ) ; TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 ) ; TYPE_6 VAR_3 = TYPE_5 . METHOD_5 ( VAR_1 , false ) ; if ( ! ( VAR_4 ) ) { throw new TYPE_3 ( VAR_5 , true ) ; } } } 
private void METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_2 { VAR_3 = new TYPE_3 ( new TYPE_4 ( this ) , VAR_4 . value ( ) ) ; VAR_3 . start ( ) ; VAR_5 = new TYPE_5 ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { METHOD_2 ( VAR_1 ) ; } else { for ( java.lang.String VAR_6 : METHOD_3 ( ) ) { METHOD_2 ( VAR_6 ) ; } } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , VAR_2 ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . METHOD_4 ( VAR_2 , VAR_4 ) ; assertTrue ( TYPE_1 . equals ( VAR_4 , VAR_1 . get ( VAR_2 ) ) ) ; assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; METHOD_5 ( VAR_1 . get ( VAR_2 ) ) ; } 
public static TYPE_1 METHOD_1 ( int VAR_1 , int uid , java.lang.String VAR_2 , boolean VAR_3 , boolean VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { final TYPE_1 config = new TYPE_1 ( ) ; VAR_7 = VAR_2 ; VAR_8 = VAR_1 ; VAR_9 = uid ; VAR_10 = VAR_3 ; config . status = ( VAR_4 ) ? VAR_11 : VAR_12 ; VAR_13 = VAR_5 ; VAR_14 = VAR_6 ; return config ; } 
private TYPE_1 METHOD_1 ( TYPE_2 p , TYPE_3 VAR_1 , TYPE_4 VAR_2 , byte a , byte VAR_3 ) { TYPE_3 [ ] VAR_4 = ( a == 0 ) ? VAR_5 : VAR_6 ; TYPE_5 VAR_7 = TYPE_6 . METHOD_2 ( VAR_3 , VAR_8 ) ; byte [ ] VAR_9 = TYPE_6 . METHOD_3 ( VAR_3 , VAR_1 , VAR_8 , TYPE_5 . METHOD_4 ( VAR_10 ) , VAR_7 , VAR_4 ) ; return TYPE_7 . METHOD_5 ( p , VAR_9 , VAR_2 ) ; } 
public int [ ] METHOD_1 ( int [ ] src , int [ ] VAR_1 , int [ ] result ) { return new int [ ] { src [ 0 ] , VAR_1 [ 1 ] , VAR_1 [ 2 ] , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; } 
static int METHOD_1 ( int [ ] a , int [ ] b ) { int x = 0 ; for ( int i = TYPE_1 . METHOD_2 ( b . length ) ; i < ( a . length ) ; i ++ ) { x += a [ i ] ; } return x ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . METHOD_3 ( ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } METHOD_7 ( method ) ; VAR_2 . METHOD_8 ( method ) ; } 
public void METHOD_1 ( ) { assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( ) . toString ( ) ) ; assertEquals ( STRING_2 , VAR_2 . METHOD_2 ( ) . toString ( ) ) ; assertEquals ( STRING_3 , VAR_3 . METHOD_2 ( ) . toString ( ) ) ; assertEquals ( STRING_4 , VAR_4 . METHOD_2 ( ) . toString ( ) ) ; assertEquals ( STRING_5 , VAR_5 . METHOD_2 ( ) . toString ( ) ) ; } 
protected void METHOD_1 ( ) { if ( VAR_1 ) log ( STRING_1 ) ; if ( ! ( VAR_2 ) ) return ; if ( ( METHOD_2 ( ) ) == false ) { METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_3 ) ; } else { METHOD_5 ( VAR_3 ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { try { TYPE_4 VAR_2 = TYPE_4 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_5 VAR_3 = TYPE_5 . METHOD_1 ( VAR_2 , VAR_1 . METHOD_5 ( ) ) ; return new TYPE_1 ( TYPE_6 . METHOD_6 ( VAR_2 . METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) , null ) ) ; } catch ( java.lang.Exception e ) { throw new TYPE_3 ( e ) ; } } 
public java.lang.String METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return new java.lang.StringBuilder ( ) . append ( METHOD_3 ( ) . print ( VAR_1 ) ) . append ( STRING_2 ) . append ( VAR_2 . METHOD_4 ( ) ) . append ( STRING_2 ) . append ( VAR_2 . METHOD_5 ( ) ) . toString ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 ) && ( VAR_2 != ( VAR_4 ) ) ) { return VAR_5 ; } if ( ( VAR_6 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( VAR_7 ) ) > 0 ) ) { VAR_2 = VAR_8 ; } if ( ( VAR_6 . METHOD_5 ( ) ) && ( VAR_2 == ( VAR_9 ) ) ) { VAR_2 = VAR_5 ; } return VAR_2 ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 m = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( m . METHOD_3 ( ) ) { java.lang.String v = m . METHOD_4 ( 1 ) ; int VAR_3 ; try { VAR_3 = java.lang.Integer.parseInt ( v ) ; } catch ( TYPE_3 e ) { return null ; } TYPE_1 VAR_4 = new TYPE_1 ( VAR_3 ) ; return VAR_4 ; } return null ; } 
public void METHOD_1 ( int VAR_1 , int count , long [ ] d ) { int VAR_2 = ( VAR_3 . METHOD_2 ( ) ) * count ; METHOD_3 ( VAR_1 , count , ( ( d . length ) * 8 ) , VAR_2 ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) ; } 
private void METHOD_1 ( int VAR_1 ) { int VAR_2 = java.util.HashMap . METHOD_2 ( VAR_1 ) ; float VAR_3 = VAR_2 * ( VAR_4 ) ; if ( VAR_3 > ( ( VAR_5 ) + 1 ) ) { VAR_3 = ( VAR_5 ) + 1 ; } VAR_6 = ( ( int ) ( VAR_3 ) ) ; VAR_7 = new TYPE_1 [ VAR_2 ] ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , TYPE_1 VAR_6 , TYPE_1 VAR_7 , java.lang.String VAR_8 ) { TYPE_2 VAR_9 = new TYPE_2 ( VAR_8 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; try { VAR_9 . METHOD_2 ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.String path ) throws TYPE_2 { TYPE_3 fd = VAR_1 . METHOD_2 ( path , VAR_2 , 0 ) ; try { long size = VAR_1 . METHOD_3 ( fd ) . VAR_3 ; long address = VAR_1 . METHOD_4 ( INT_1 , size , VAR_4 , VAR_5 , fd , 0 ) ; return new TYPE_1 ( address , size ) ; } finally { VAR_1 . METHOD_5 ( fd ) ; } } 
private static java.util.Set < java.lang.String > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { java.util.Set < java.lang.String > VAR_4 = new TYPE_4 < java.lang.String > ( ) ; if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { VAR_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_1 , VAR_5 ) ) ; } else { VAR_4 . METHOD_3 ( VAR_2 . METHOD_6 ( VAR_3 ) ) ; } return VAR_4 ; } 
void METHOD_1 ( ) { try { int VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_1 > 0 ) { VAR_4 = VAR_6 ; } else if ( VAR_1 == 0 ) { VAR_4 = VAR_5 ; } else { VAR_4 = VAR_7 ; } } catch ( android.os.RemoteException e ) { } } 
public static void METHOD_1 ( TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; final TYPE_4 VAR_4 = VAR_1 . METHOD_3 ( STRING_1 ) ; if ( VAR_4 != null ) { VAR_3 . METHOD_4 ( VAR_4 ) ; } final TYPE_5 VAR_5 = TYPE_5 . METHOD_6 ( VAR_2 ) ; VAR_5 . METHOD_7 ( VAR_3 , STRING_1 ) ; } 
public boolean METHOD_1 ( int VAR_1 ) { boolean VAR_2 = false ; VAR_3 = VAR_1 ; if ( ! ( VAR_4 ) ) { METHOD_2 ( ) ; if ( VAR_5 ) TYPE_1 . d ( VAR_6 , ( STRING_1 + VAR_1 ) ) ; VAR_7 . METHOD_3 ( ) . METHOD_4 ( this ) ; METHOD_4 ( VAR_1 ) ; if ( ( VAR_8 ) != null ) { VAR_2 = VAR_8 . METHOD_5 ( this ) ; } VAR_9 = null ; } METHOD_6 ( ) ; METHOD_7 ( ) ; return VAR_2 ; } 
protected void METHOD_1 ( int VAR_1 , TYPE_1 key , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws TYPE_4 , TYPE_5 { if ( VAR_2 != null ) { throw new TYPE_4 ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) . getName ( ) ) ) ) ; } METHOD_3 ( VAR_1 , key , VAR_2 ) ; } 
static void METHOD_1 ( long VAR_1 , int r , int VAR_2 , int b ) { TYPE_1 . METHOD_2 ( VAR_1 , ( ( ( - INT_1 | ( r < < 16 ) ) | ( ( VAR_2 & INT_2 ) < < 8 ) ) | ( b & INT_2 ) ) , VAR_3 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 e ) { if ( ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ) && ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } long id = VAR_1 . METHOD_5 ( 5 , e . METHOD_6 ( VAR_1 ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( id , VAR_1 ) ; VAR_2 . METHOD_7 ( FLOAT_1 ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . build ( ) ; VAR_2 . METHOD_2 ( STRING_1 , VAR_3 , TYPE_3 . METHOD_3 ( VAR_4 ) ) ; VAR_2 . METHOD_2 ( STRING_2 , VAR_5 , TYPE_3 . METHOD_3 ( VAR_6 ) ) ; VAR_2 . METHOD_2 ( STRING_3 , 0 , TYPE_3 . METHOD_3 ( VAR_7 ) ) ; VAR_2 . METHOD_2 ( STRING_4 , false , TYPE_3 . METHOD_3 ( VAR_8 ) ) ; } 
void METHOD_1 ( java.lang.String [ ] expected , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( expected . length , VAR_2 . length ) ; for ( int i = 0 ; i < ( expected . length ) ; ++ i ) { org.junit.Assert.assertEquals ( ( STRING_1 + i ) , expected [ i ] , VAR_2 [ i ] ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { int VAR_1 = METHOD_2 ( STRING_1 ) ; try ( TYPE_1 s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 , true ) ) { assertTrue ( STRING_2 , ( ( s . METHOD_5 ( ) ) == VAR_1 ) ) ; } s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 , false ) ; } 
public final java.lang.String METHOD_1 ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( 100 ) ; boolean VAR_1 = true ; sb.append ( STRING_1 ) ; for ( TYPE_2 i : VAR_2 ) { if ( VAR_1 ) { VAR_1 = false ; } else { sb.append ( STRING_2 ) ; } sb.append ( i . METHOD_1 ( ) ) ; } sb.append ( STRING_3 ) ; return sb . toString ( ) ; } 
protected com.android.jack.ir.ast.JDefinedClassOrInterface METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { if ( ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) { for ( TYPE_2 VAR_3 : VAR_4 ) { try { return VAR_3 . METHOD_1 ( this , VAR_1 ) ; } catch ( TYPE_3 e ) { } } } throw new TYPE_4 ( this , VAR_1 ) ; } 
public final TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } return new TYPE_3 ( VAR_2 , this . METHOD_2 ( ) , this . METHOD_3 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) , offset , true ) ; } 
public void METHOD_1 ( ) { when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) ; VAR_2 . METHOD_5 ( false ) ; int VAR_3 = VAR_2 . METHOD_6 ( ) ; VAR_2 . METHOD_7 ( VAR_4 ) ; int VAR_5 = VAR_2 . METHOD_6 ( ) ; assertEquals ( ( VAR_3 * 2 ) , VAR_5 ) ; } 
void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( METHOD_2 ( VAR_1 ) ) == ( VAR_3 ) ) { return ; } java.lang.String msg = ( ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( TYPE_1 . METHOD_3 ( ) ) ) + STRING_3 ) + ( TYPE_1 . METHOD_4 ( ) ) ) + STRING_4 ) + VAR_1 ; android.util.Slog.w ( com.android.server.am.ActivityManagerService.TAG , msg ) ; throw new TYPE_2 ( msg ) ; } 
private int METHOD_1 ( ) { switch ( VAR_1 ) { case VAR_2 : return VAR_3 ; case VAR_4 : case VAR_5 : return VAR_8 ; case VAR_6 : case VAR_7 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : return VAR_13 ; case VAR_14 : return VAR_15 ; case VAR_16 : return VAR_17 ; case VAR_18 : return VAR_19 ; case VAR_20 : return VAR_21 ; default : return VAR_22 ; } } 
public void METHOD_2 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_2 ( STRING_2 ) ; org.junit.Assert.assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 0 ) ; VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; org.junit.Assert.assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 2 ) ; VAR_3 . METHOD_5 ( TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; org.junit.Assert.assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 0 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( true ) ; do { } while ( ! ( VAR_1 . METHOD_2 ( true , false ) ) ) ; assertFalse ( VAR_1 . get ( ) ) ; do { } while ( ! ( VAR_1 . METHOD_2 ( false , false ) ) ) ; assertFalse ( VAR_1 . get ( ) ) ; do { } while ( ! ( VAR_1 . METHOD_2 ( false , true ) ) ) ; assertTrue ( VAR_1 . get ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 ) ; assertEquals ( VAR_1 , VAR_3 ) ; VAR_3 = new TYPE_1 ( VAR_4 ) ; assertFalse ( VAR_1 . equals ( VAR_3 ) ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } try { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } catch ( java.io.IOException e ) { android.util.Log.e ( VAR_3 . TAG , ( STRING_1 + ( e.toString ( ) ) ) ) ; } VAR_4 . METHOD_3 ( VAR_5 , this ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final int VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_1 ) ; args . METHOD_2 ( STRING_2 , VAR_2 ) ; TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_2 , true ) ; TYPE_4 . METHOD_6 ( VAR_3 ) ; } 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { if ( ! ( METHOD_2 ( ) ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( VAR_2 ) ) ) ; } if ( ( VAR_2 . METHOD_4 ( 0 ) ) == CHAR_1 ) { VAR_1 = VAR_2 ; } else { VAR_1 = VAR_2 . METHOD_5 ( 1 , ( ( VAR_2 . length ( ) ) - 1 ) ) ; } } return VAR_1 ; } 
public static void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { TYPE_1 VAR_3 = TYPE_2 . METHOD_3 ( ) ; if ( VAR_4 ) { VAR_3 . METHOD_4 ( VAR_1 , false ) ; } else { VAR_3 . METHOD_4 ( VAR_1 ) ; } } catch ( java.lang.Throwable e ) { throw TYPE_3 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( this ) ; VAR_2 . METHOD_4 ( this ) ; } if ( ( VAR_3 ) != null ) { VAR_1 . METHOD_5 ( VAR_3 ) ; } VAR_1 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) != null ) { VAR_1 . METHOD_5 ( VAR_5 ) ; } VAR_1 . METHOD_5 ( VAR_6 ) ; } 
private void METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : VAR_3 . METHOD_2 ( VAR_4 , true ) ; break ; case VAR_5 : VAR_3 . METHOD_2 ( VAR_6 , true ) ; break ; case VAR_7 : VAR_3 . METHOD_2 ( VAR_8 , true ) ; break ; default : VAR_3 . METHOD_2 ( null , false ) ; break ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( this ) ; VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 class ) ; TYPE_2 . METHOD_4 ( VAR_2 class ) ; TYPE_2 . METHOD_5 ( VAR_2 class , VAR_3 ) ; TYPE_3 . when ( mContext . METHOD_6 ( VAR_4 ) ) . thenReturn ( VAR_5 ) ; TYPE_3 . when ( mContext . METHOD_6 ( VAR_6 ) ) . thenReturn ( VAR_7 ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return false ; } if ( ( VAR_1 . METHOD_2 ( ) . length ( ) ) == 0 ) { return false ; } TYPE_1 VAR_2 = new TYPE_1 ( new java.io.File ( VAR_1 ) ) ; return ( VAR_2 . METHOD_3 ( ) ) == ( VAR_3 ) ; } 
private static TYPE_1 METHOD_1 ( ) { for ( TYPE_2 VAR_1 : TYPE_3 . METHOD_2 ( ) ) { TYPE_1 project = VAR_1 . METHOD_3 ( ) ; TYPE_4 state = TYPE_5 . METHOD_4 ( project ) ; if ( ( state != null ) && ( state . METHOD_5 ( ) ) ) { TYPE_6 VAR_2 = TYPE_6 . get ( project ) ; if ( VAR_2 . METHOD_6 ( ) . equals ( STRING_1 ) ) { return project ; } } } return null ; } 
public static int METHOD_1 ( int a , int b , int c , int d , int e , int f ) { int [ ] values = new int [ ] { a , b , c , d , e , f } ; java.lang.System.out.println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; } 
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_2 ) ; ++ i ) { java.lang.Integer x = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( x ) ; assertTrue ( VAR_1 . METHOD_3 ( x ) ) ; } assertEquals ( 0 , VAR_1 . METHOD_4 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 context , java.lang.Object VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { if ( context . METHOD_2 ( VAR_2 ) ) { boolean VAR_4 = context . METHOD_3 ( ) ; if ( VAR_4 ) { int VAR_5 = METHOD_4 ( context , VAR_1 ) ; if ( ( VAR_5 >= 0 ) && ( context . METHOD_5 ( VAR_5 , VAR_2 ) ) ) { return ; } } context . METHOD_1 ( VAR_2 , METHOD_6 ( context , VAR_1 ) , VAR_3 ) ; } } 
public void METHOD_1 ( int count ) { if ( count < 0 ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } int VAR_1 = ( VAR_2 ) + count ; if ( VAR_3 ) { METHOD_2 ( VAR_1 ) ; } else if ( VAR_1 > ( data . length ) ) { TYPE_1 . METHOD_3 ( ) ; return ; } VAR_2 = VAR_1 ; } 
static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 context ) { java.lang.String VAR_2 = TYPE_5 . METHOD_4 ( context ) . METHOD_5 ( ) ; return TYPE_6 . METHOD_6 ( VAR_2 ) ? TYPE_1 . of ( TYPE_6 . get ( VAR_2 ) ) : TYPE_1 . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; if ( ( VAR_6 ) != null ) { TYPE_1 VAR_5 = ( ( TYPE_1 ) ( VAR_6 . METHOD_4 ( ) ) ) ; VAR_5 . flags &= ~ ( VAR_7 ) ; VAR_8 . METHOD_5 ( VAR_6 , VAR_5 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) , null , 0 ) ) { VAR_1 . METHOD_4 ( true ) ; assertTrue ( STRING_1 , VAR_1 . METHOD_5 ( ) ) ; VAR_1 . METHOD_4 ( false ) ; assertFalse ( STRING_2 , VAR_1 . METHOD_5 ( ) ) ; } } 
private void METHOD_1 ( short VAR_1 , short VAR_2 , java.lang.String VAR_3 , java.lang.Throwable VAR_4 ) throws java.io.IOException { VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; byte [ ] error = new byte [ 2 ] ; error [ 0 ] = ( ( byte ) ( VAR_1 ) ) ; error [ 1 ] = ( ( byte ) ( VAR_2 ) ) ; METHOD_3 ( VAR_6 , error , 0 , 2 ) ; } 
public static void METHOD_1 ( long i , TYPE_1 output ) throws java.io.IOException { output . METHOD_2 ( ( ( byte ) ( i > > > INT_1 ) ) ) ; output . METHOD_2 ( ( ( byte ) ( i > > > 16 ) ) ) ; output . METHOD_2 ( ( ( byte ) ( i > > > 8 ) ) ) ; output . METHOD_2 ( ( ( byte ) ( i ) ) ) ; } 
public java.lang.String METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; TYPE_1 VAR_2 = METHOD_3 ( ) ; return ( ( ( ( ( VAR_1 == 0 ? STRING_1 : ( TYPE_2 . toString ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + ( METHOD_5 ( ) . METHOD_4 ( ) ) ) + STRING_3 ) + ( getName ( ) ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . METHOD_3 ( ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( method ) ; VAR_2 . METHOD_5 ( method ) ; new TYPE_2 ( ) . METHOD_5 ( method ) ; } 
public static boolean METHOD_1 ( TYPE_1 element ) { java.lang.String VAR_1 = element . METHOD_2 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) { return TYPE_2 . METHOD_4 ( VAR_1 ) ; } else { for ( TYPE_1 VAR_4 : TYPE_3 . METHOD_5 ( element ) ) { if ( VAR_4 . METHOD_6 ( ) . equals ( VAR_5 ) ) { return true ; } } } return false ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { synchronized ( this ) { if ( ( VAR_1 ) == null ) { try { VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class . METHOD_3 ( VAR_3 ) ) ; } catch ( TYPE_3 e ) { VAR_4 . error ( e , null ) ; VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; } catch ( java.lang.Exception e ) { VAR_4 . error ( null , STRING_1 ) ; VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; } } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_3 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_4 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; } 
public final void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String format , byte [ ] VAR_3 ) throws java.lang.RuntimeException { synchronized ( VAR_4 ) { if ( ( VAR_5 ) == null ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } try { VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , format , VAR_3 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_6 , ( STRING_2 + ( e.getMessage ( ) ) ) ) ; METHOD_2 ( VAR_1 , VAR_2 , VAR_7 ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 = null ; VAR_1 = null ; VAR_3 = null ; VAR_4 = null ; VAR_5 = null ; VAR_6 = null ; VAR_7 . METHOD_3 ( ) ; VAR_8 = null ; } 
protected void METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 VAR_3 = new TYPE_2 ( ) { public boolean run ( ) throws TYPE_3 , TYPE_4 , java.io.IOException { METHOD_2 ( ) . METHOD_5 ( VAR_1 ) ; return true ; } } ; METHOD_6 ( STRING_5 , VAR_3 , VAR_4 ) ; } 
public synchronized long METHOD_1 ( long n ) throws java.io.IOException { if ( VAR_1 ) { return 0 ; } long VAR_2 = ( n > ( ( expected ) - ( count ) ) ) ? ( expected ) - ( count ) : n ; n = in . METHOD_1 ( VAR_2 ) ; METHOD_2 ( n ) ; return n ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int line ) { if ( ( VAR_3 ) != null ) { for ( TYPE_1 VAR_4 : VAR_3 ) { try { if ( VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , line ) ) { break ; } } catch ( java.lang.Throwable t ) { } } } } 
public void METHOD_1 ( ) throws java.lang.Exception { long c = TYPE_1 . METHOD_2 ( ) ; long s = TYPE_1 . METHOD_3 ( c ) ; try { TYPE_1 . METHOD_4 ( s ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } TYPE_1 . METHOD_5 ( s ) ; TYPE_1 . METHOD_6 ( c ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( ) ; synchronized ( VAR_3 ) { ( VAR_4 ) ++ ; VAR_3 . METHOD_3 ( new TYPE_2 ( VAR_2 , VAR_1 ) ) ; VAR_5 . METHOD_4 ( ) ; } int uid = TYPE_3 . METHOD_5 ( ) ; final long VAR_6 = TYPE_3 . METHOD_6 ( ) ; try { VAR_7 . METHOD_7 ( uid ) ; } catch ( android.os.RemoteException e ) { } finally { TYPE_3 . METHOD_8 ( VAR_6 ) ; } } 
protected void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( 0 , STRING_1 , STRING_2 , null , null ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_3 , 0 ) ; VAR_1 . METHOD_5 ( VAR_4 , STRING_3 , STRING_1 , STRING_2 , false ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { return VAR_2 < TYPE_2 > of ( ) . METHOD_1 ( ) ; } java.util.List < TYPE_2 > VAR_3 = new java.util.ArrayList < TYPE_2 > ( ) ; METHOD_3 ( METHOD_4 ( VAR_1 ) . METHOD_5 ( ) , VAR_3 ) ; return VAR_3 . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . i ( STRING_1 , STRING_2 ) ; TYPE_2 . METHOD_2 ( mContext ) ; METHOD_3 ( VAR_1 , METHOD_5 ( ) ) ; METHOD_6 ( VAR_1 . METHOD_7 ( ) , VAR_1 . METHOD_8 ( ) , VAR_1 . METHOD_9 ( ) . METHOD_10 ( ) , VAR_1 . METHOD_11 ( ) ) ; TYPE_3 . METHOD_12 ( ) . METHOD_13 ( ) . METHOD_1 ( ) ; } 
private void METHOD_1 ( java.lang.String packageName , java.util.Set < java.lang.String > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 = packageName + CHAR_1 ; java.lang.String VAR_4 = VAR_3 . METHOD_2 ( CHAR_1 , CHAR_2 ) ; for ( java.lang.String entry : VAR_5 ) { java.io.File VAR_6 = new java.io.File ( entry ) ; if ( VAR_6 . METHOD_3 ( ) ) { VAR_7 . METHOD_5 ( VAR_6 , VAR_4 , packageName , VAR_1 , VAR_2 ) ; } } } 
public TYPE_1 < TYPE_3 > METHOD_1 ( ) { return new TYPE_2 < TYPE_3 , TYPE_3 , TYPE_4 > ( new TYPE_5 < TYPE_3 , TYPE_3 , TYPE_4 > ( ) { public TYPE_6 get ( TYPE_7 < TYPE_6 , TYPE_8 > entry ) { return entry . key ; } } , VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 expected , TYPE_1 VAR_1 ) { if ( ! ( expected . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) { return new TYPE_4 ( VAR_1 . METHOD_4 ( ) , VAR_1 , expected ) ; } else { return VAR_1 ; } } 
public void METHOD_1 ( TYPE_1 event ) { if ( event . METHOD_2 ( ) . equals ( VAR_1 ) ) { VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) ) ; } else if ( event . METHOD_2 ( ) . equals ( VAR_3 ) ) { TYPE_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ; } super . METHOD_1 ( event ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { switch ( VAR_1 ) { case VAR_3 : return new TYPE_4 ( this ) ; case VAR_4 : return new TYPE_5 ( this , VAR_1 , VAR_2 ) ; case VAR_7 : case VAR_10 : return new TYPE_6 ( this , VAR_1 , VAR_2 ) ; case VAR_11 : return new TYPE_7 ( this ) ; default : throw new java.lang.IllegalArgumentException ( ( STRING_1 + VAR_1 ) ) ; } } 
public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { synchronized ( VAR_2 ) { if ( ( VAR_3 ) == null ) { return null ; } return ( ( TYPE_1 ) ( VAR_3 . get ( VAR_1 ) ) ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , int VAR_5 ) { java.lang.String key = VAR_2 + VAR_3 ; TYPE_2 VAR_6 = VAR_7 . get ( key ) ; if ( VAR_6 == null ) { VAR_6 = new TYPE_2 ( VAR_2 , 0 ) ; } return new TYPE_1 ( VAR_8 , VAR_3 , TYPE_3 . METHOD_2 ( VAR_1 ) , ( VAR_5 - ( VAR_9 ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( 1 , 1 , VAR_2 , 1 ) ; byte [ ] VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 [ ( ( VAR_3 . length ) - 3 ) ] = CHAR_1 ; TYPE_2 VAR_4 = METHOD_3 ( VAR_3 ) ; assertEquals ( VAR_5 , VAR_6 . METHOD_4 ( VAR_4 ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; } 
public void METHOD_1 ( com.android.jack.ir.ast.JMethod VAR_1 ) { synchronized ( this ) { if ( VAR_2 ) { return ; } TYPE_1 node ; try { node = METHOD_2 ( VAR_3 ) ; node . METHOD_3 ( VAR_1 , this ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( METHOD_4 ( VAR_1 ) , e ) ; } VAR_2 = true ; if ( VAR_4 ) { VAR_1 . METHOD_5 ( ) ; } } } 
public void METHOD_1 ( ) throws java.io.IOException { int VAR_1 = INT_1 * INT_1 ; byte [ ] VAR_2 = new byte [ INT_2 ] ; TYPE_1 in = new TYPE_1 ( new TYPE_2 ( METHOD_2 ( 1 , VAR_1 ) ) ) ; while ( ( in . METHOD_3 ( ) ) != null ) { while ( ( in . METHOD_4 ( VAR_2 , 0 , VAR_2 . length ) ) != ( - 1 ) ) { } } in . METHOD_5 ( ) ; } 
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == 1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; VAR_2 . start ( ) ; VAR_3 = new TYPE_2 ( VAR_2 . METHOD_3 ( ) ) ; } } } 
public static void METHOD_1 ( java.io.File VAR_1 , TYPE_4 location ) throws TYPE_2 , TYPE_3 { assert VAR_1 != null ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( location ) ; } if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { throw new TYPE_3 ( location ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.Object obj ) { if ( obj instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( obj ) ) ; } else if ( obj != null ) { return new TYPE_1 ( TYPE_3 . METHOD_1 ( obj ) ) ; } return null ; } 
void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int VAR_3 = VAR_1 . length ; for ( TYPE_2 < TYPE_3 , TYPE_4 > e = VAR_4 ; e != ( VAR_5 ) ; e = VAR_6 ) { int index = METHOD_3 ( VAR_7 , VAR_3 ) ; VAR_8 = VAR_1 [ index ] ; VAR_1 [ index ] = e ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( VAR_3 class ) ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_6 , VAR_7 ) ; TYPE_2 < TYPE_3 > VAR_8 = TYPE_2 . METHOD_7 ( VAR_3 class ) ; org.mockito.Mockito.verify ( VAR_2 , TYPE_1 . METHOD_8 ( VAR_6 ) ) . METHOD_3 ( VAR_8 . METHOD_9 ( ) ) ; org.junit.Assert.assertEquals ( VAR_9 , VAR_8 . METHOD_10 ( ) . METHOD_11 ( ) ) ; } 
public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( java.util.Map < ? extends TYPE_2 , ? extends TYPE_3 > VAR_1 ) { METHOD_2 ( ( ( size ) + ( VAR_1 . size ( ) ) ) ) ; for ( TYPE_4 < ? extends TYPE_2 , ? extends TYPE_3 > entry : VAR_1 . METHOD_3 ( ) ) { METHOD_4 ( entry ) ; } return this ; } 
public static TYPE_4 METHOD_3 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( ) ; if ( VAR_2 == null ) { TYPE_4 [ ] VAR_3 = VAR_1 . METHOD_4 ( ) ; if ( ( VAR_3 . length ) > 0 ) { VAR_2 = VAR_3 [ 0 ] ; } } return VAR_2 ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , int value ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( device , value ) ; } 
public TYPE_1 METHOD_1 ( boolean VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; } else { VAR_2 . METHOD_2 ( VAR_4 ) ; } return this ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( e ) ; } } 
boolean METHOD_1 ( long VAR_1 ) { if ( VAR_2 ) { return false ; } if ( ( VAR_3 ) <= 0 ) { return false ; } if ( ( ( VAR_4 . size ( ) ) > 0 ) && ( ( VAR_5 ) < VAR_1 ) ) { return false ; } long VAR_6 = VAR_1 - ( VAR_3 ) ; return VAR_6 <= ( METHOD_2 ( VAR_1 ) ) ; } 
protected com.android.jack.ir.ast.JMethod METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { for ( com.android.jack.ir.ast.JMethod m : VAR_1 . METHOD_2 ( ) ) { if ( ( ( m . METHOD_3 ( ) ) == VAR_2 ) && ( ( m . METHOD_4 ( ) ) == VAR_3 ) ) { return m ; } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; return ; } METHOD_4 ( 0 ) ; METHOD_5 ( VAR_2 , VAR_3 ) ; final TYPE_2 VAR_4 = METHOD_6 ( VAR_2 , VAR_3 ) ; METHOD_4 ( 1 ) ; final TYPE_2 VAR_5 = METHOD_6 ( VAR_2 , VAR_3 ) ; METHOD_7 ( VAR_4 , VAR_5 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) { VAR_4 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_5 ) ) ) == 1 ; VAR_6 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_7 ) ) ) == 1 ; VAR_8 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_9 ) ) ) == 1 ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String name , java.lang.String VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , name , TYPE_3 . on ( CHAR_1 ) . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) , VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 , int index ) { int VAR_2 = size ( ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( METHOD_3 ( i ) ) ) ; if ( ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( VAR_1 , index ) ) ) { return VAR_3 ; } } return null ; } 
public void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String msg = STRING_2 + STRING_3 ; super . METHOD_1 ( ) ; TYPE_2 . METHOD_3 ( msg , VAR_1 ) ; return ; } METHOD_4 ( new TYPE_4 ( VAR_2 , METHOD_5 ( ) ) ) ; super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; int VAR_1 = 5 ; METHOD_3 ( VAR_1 , false ) ; TYPE_1 . when ( VAR_2 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( ) ) ) . thenReturn ( false ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 = VAR_1 ; VAR_3 . METHOD_6 ( ) . METHOD_7 ( STRING_1 ) ; assertFalse ( VAR_5 . METHOD_8 ( VAR_3 ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.List < TYPE_3 > VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = VAR_3 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; int VAR_5 = VAR_1 . METHOD_4 ( VAR_3 ) ; int VAR_6 = VAR_1 . METHOD_5 ( VAR_3 ) ; if ( VAR_5 == VAR_6 ) return null ; return TYPE_6 . METHOD_6 ( VAR_4 , VAR_5 , VAR_6 ) ; } 
private int METHOD_1 ( java.lang.String VAR_2 , int VAR_3 ) throws java.lang.Exception { TYPE_1 . when ( VAR_4 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_3 ( ) ) ) . thenReturn ( VAR_3 ) ; TYPE_2 VAR_5 = VAR_6 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_2 ) . METHOD_7 ( ) , VAR_7 , new TYPE_4 ( ) ) ; return VAR_8 ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return false ; } TYPE_2 service = METHOD_2 ( ) ; if ( service != null ) { try { return service . METHOD_1 ( VAR_1 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ; } } return false ; } 
void METHOD_1 ( java.lang.String uri , java.lang.String VAR_1 , java.lang.String VAR_2 , long VAR_3 , int VAR_4 ) throws TYPE_1 { if ( ( ( VAR_5 ) ++ ) > 0 ) { super . METHOD_1 ( uri , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 callback ) { if ( callback == null ) { android.util.Log.w ( VAR_1 . TAG , STRING_1 ) ; return null ; } android.os.Message msg = VAR_2 . METHOD_2 ( VAR_3 ) ; msg.obj = callback ; VAR_2 . METHOD_3 ( msg ) ; return VAR_5 ; } 
protected void METHOD_1 ( ) { VAR_1 = null ; if ( VAR_2 ) { METHOD_2 ( ) ; VAR_2 = false ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( ) ; } if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_3 ( ) ; } if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_3 ( ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_3 . METHOD_3 ( VAR_3 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , mContext . METHOD_5 ( ) , VAR_3 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_3 ) ; ++ i ) { assertEquals ( new TYPE_2 ( i ) , VAR_1 . METHOD_3 ( ) ) ; } METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; assertNotNull ( VAR_1 ) ; int VAR_2 = 7 ; VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_3 ) , VAR_2 , false ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_5 ) , org.mockito.Matchers.eq ( VAR_2 ) , org.mockito.Matchers.eq ( false ) , org.mockito.Matchers.eq ( VAR_3 ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final short VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_2 ) ; args . METHOD_2 ( STRING_3 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( VAR_1 ) ; TYPE_4 . METHOD_6 ( VAR_4 ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . METHOD_3 ( ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( method ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 , method ) ; VAR_3 . METHOD_5 ( method ) ; VAR_2 . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 out = METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( STRING_2 ) ; out . METHOD_5 ( VAR_2 ) ; out . METHOD_6 ( ) ; try ( TYPE_4 VAR_3 = new TYPE_4 ( VAR_1 ) ) { assertEquals ( null , VAR_3 . METHOD_7 ( ) ) ; } } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_1 , VAR_4 ) ; TYPE_1 VAR_5 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertFalse ( VAR_5 . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 . size ( ) , VAR_5 . METHOD_6 ( ) . size ( ) ) ; METHOD_7 ( VAR_3 , VAR_5 , VAR_1 , true , VAR_4 ) ; } 
private void METHOD_1 ( boolean VAR_1 , TYPE_1 request ) { int VAR_2 = ( VAR_1 ) ? + 1 : - 1 ; switch ( request . type ) { case VAR_3 : VAR_5 += VAR_2 ; break ; case VAR_6 : VAR_5 += VAR_2 ; VAR_7 += VAR_2 ; break ; case VAR_4 : case VAR_8 : break ; case VAR_9 : default : android.util.Log . METHOD_2 ( VAR_10 . TAG , ( STRING_1 + ( request . type ) ) ) ; break ; } } 
public static void run ( ) { java.lang.System.out.println ( STRING_1 ) ; if ( TYPE_2 . METHOD_2 ( ) ) { java.lang.System.out.println ( STRING_2 ) ; } if ( TYPE_2 . METHOD_3 ( ) ) { java.lang.System.out.println ( STRING_3 ) ; } TYPE_2 . set ( 0 ) ; TYPE_2 . set ( 1 ) ; TYPE_2 . set ( 2 ) ; TYPE_2 . set ( 4 ) ; TYPE_2 . set ( 8 ) ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( ) ) ) ) { METHOD_3 ( ) ; try { TYPE_3 VAR_4 = VAR_3 . METHOD_4 ( ) ; if ( VAR_4 == null ) { throw new TYPE_2 ( STRING_1 , VAR_5 ) ; } VAR_2 = new TYPE_4 ( VAR_4 ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( STRING_1 , e , VAR_6 ) ; } } return VAR_2 ; } 
private void METHOD_1 ( java.lang.Object expected , java.lang.String VAR_1 ) { java.lang.String source = ( ( ( ( ( ( ( STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) + VAR_1 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_10 ) + STRING_11 ; METHOD_2 ( expected , source , STRING_12 ) ; } 
static void METHOD_1 ( ) { TYPE_1 VAR_1 ; VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; java.lang.System.out.println ( ( STRING_3 + VAR_1 ) ) ; java.lang.System.out.println ( ( STRING_4 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; VAR_1 = new TYPE_1 ( STRING_5 , STRING_6 ) ; java.lang.System.out.println ( ( STRING_3 + VAR_1 ) ) ; try { java.lang.System.out.println ( ( STRING_4 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; } catch ( TYPE_2 VAR_2 ) { java.lang.System.out.println ( STRING_7 ) ; } } 
public boolean METHOD_1 ( ) throws TYPE_1 { if ( ( TYPE_2 . METHOD_2 ( ) ) == INT_1 ) { return device . METHOD_3 ( new TYPE_3 ( ) . METHOD_4 ( ( STRING_1 + VAR_1 ) ) ) . METHOD_5 ( ) ; } else { return device . METHOD_3 ( new TYPE_3 ( ) . text ( ( STRING_1 + VAR_1 ) ) ) . METHOD_5 ( ) ; } } 
public java.lang.Class < ? > METHOD_1 ( java.lang.String name , java.util.List < java.lang.Throwable > VAR_1 ) { for ( TYPE_1 element : VAR_2 ) { java.lang.Class < ? > VAR_5 = element . METHOD_1 ( name , VAR_6 , VAR_1 ) ; if ( VAR_5 != null ) { return VAR_5 ; } } if ( ( VAR_7 ) != null ) { VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_7 ) ) ; } return null ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = VAR_4 ; if ( VAR_2 ) { if ( VAR_5 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_5 ; } else if ( VAR_6 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_6 ; } } else { if ( VAR_7 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_7 ; } else if ( VAR_8 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_8 ; } } return VAR_3 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , float [ ] VAR_3 ) { assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( VAR_4 ) ) ; float [ ] VAR_5 = ( ( float [ ] ) ( VAR_1 . METHOD_2 ( VAR_6 ) ) ) ; assertEquals ( VAR_3 . length , VAR_5 . length ) ; for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { assertEquals ( VAR_3 [ i ] , VAR_5 [ i ] , FLOAT_1 ) ; } } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( ) , VAR_2 ) ; if ( VAR_1 == null ) { errln ( STRING_2 ) ; } } catch ( TYPE_3 ex ) { METHOD_4 ( ( STRING_3 + ( ex . getMessage ( ) ) ) ) ; } } 
private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) , STRING_3 ) ) { METHOD_5 ( STRING_5 ) ; } else if ( TYPE_1 . METHOD_6 ( TYPE_2 . METHOD_3 ( STRING_6 , STRING_2 ) , STRING_7 ) ) { METHOD_5 ( STRING_8 ) ; } } 
synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = VAR_1 . METHOD_2 ( ) ; TYPE_5 VAR_6 = new TYPE_5 ( VAR_2 , new TYPE_6 ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) , VAR_1 . METHOD_7 ( ) , null , VAR_3 ) ; METHOD_1 ( VAR_1 , VAR_6 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = null ; TYPE_3 service = METHOD_2 ( ) ; if ( service != null ) { VAR_2 = service . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) { METHOD_3 ( STRING_1 ) ; } } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_2 , STRING_1 ) ) ) { throw new TYPE_2 ( STRING_2 ) ; } TYPE_3 VAR_3 ; synchronized ( VAR_4 ) { VAR_3 = METHOD_3 ( VAR_1 ) ; if ( VAR_3 == null ) { android.util.Slog.w ( TYPE_4 . TAG , ( STRING_3 + VAR_1 ) ) ; return ; } VAR_5 = true ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { VAR_3 = new java.lang.String [ 0 ] ; VAR_4 = false ; return ; } TYPE_2 [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 = new java.lang.String [ VAR_2 . length ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_3 [ i ] = VAR_2 [ i ] . getName ( ) ; } VAR_4 = METHOD_3 ( VAR_1 ) ; } 
public java.lang.String METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) { throw new TYPE_1 ( this , VAR_1 ) ; } int VAR_2 = ( length ( ) ) - VAR_1 ; if ( VAR_2 < 0 ) { throw new TYPE_1 ( this , VAR_1 ) ; } return VAR_1 == 0 ? this : METHOD_2 ( VAR_1 , VAR_2 ) ; } 
void METHOD_1 ( ) { if ( ( VAR_1 ) || ( VAR_2 ) ) { if ( ! ( VAR_3 . METHOD_2 ( ) ) ) { VAR_3 . METHOD_3 ( ) ; if ( VAR_4 . METHOD_2 ( ) ) { VAR_4 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_6 ) ; } } if ( ( VAR_7 ) == null ) { if ( VAR_8 ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , STRING_1 ) ; if ( VAR_9 ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , STRING_2 ) ; METHOD_6 ( false , true ) ; } } } 
public java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( java.lang.String packageName , java.util.Map < java.lang.String , java.lang.Object > args ) { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , packageName ) ; java.lang.String result = METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) ; return TYPE_2 . METHOD_5 ( result ) ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 msg ) { TYPE_3 VAR_1 = TYPE_3 . METHOD_2 ( msg . METHOD_3 ( 0 ) . METHOD_4 ( 0 ) ) ; java.lang.Integer VAR_2 = java.lang.Integer . METHOD_2 ( ( ( int ) ( ( VAR_1 . value ) - ( VAR_3 . value ) ) ) ) ; TYPE_1 VAR_4 = new TYPE_4 ( TYPE_5 . METHOD_5 ( msg . METHOD_6 ( ) , VAR_5 , VAR_6 ) , VAR_2 ) ; return TYPE_6 . METHOD_7 ( VAR_4 ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( obj == null ) || ( ! ( obj instanceof TYPE_1 ) ) ) { return false ; } TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; if ( ( this ) == VAR_1 ) { return true ; } return ( VAR_2 . equals ( ( ( java.lang.Object ) ( VAR_1 . METHOD_1 ( ) ) ) ) ) && ( VAR_3 . equals ( VAR_1 . METHOD_2 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( true , INT_1 ) ; assertEquals ( STRING_1 , INT_1 , VAR_1 . METHOD_5 ( ) ) ; VAR_1 . METHOD_4 ( false , 0 ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( null == ( VAR_2 ) ) || ( null == ( VAR_3 ) ) ) return true ; for ( TYPE_2 VAR_4 : VAR_3 ) { if ( VAR_4 . METHOD_2 ( VAR_5 ) ) return true ; if ( ! ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) { return false ; } } return true ; } 
public final TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } int VAR_2 = this . METHOD_2 ( ) ; int VAR_3 = this . METHOD_3 ( ) ; assert VAR_2 <= VAR_3 ; int VAR_4 = ( VAR_2 <= VAR_3 ) ? VAR_3 - VAR_2 : 0 ; int size = VAR_4 > > 2 ; return new TYPE_3 ( this , ( - 1 ) , 0 , size , size , VAR_2 , METHOD_4 ( ) ) ; } 
private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) throws java.io.IOException , TYPE_1 { final TYPE_2 res = VAR_3 ; final int VAR_4 = res . METHOD_2 ( ) . VAR_4 ; try { METHOD_3 ( res , VAR_4 , VAR_1 , VAR_2 ) ; } finally { TYPE_3 . METHOD_4 ( res , VAR_4 ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 < TYPE_4 > > VAR_1 , long key ) { synchronized ( VAR_2 ) { TYPE_3 < TYPE_4 > VAR_3 = VAR_1 . get ( key ) ; if ( VAR_3 != null ) { TYPE_4 entry = VAR_3 . get ( ) ; if ( entry != null ) { return entry . METHOD_2 ( this ) ; } else { VAR_1 . METHOD_3 ( key ) ; } } } return null ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) { public void METHOD_4 ( TYPE_2 VAR_2 , java.lang.Object arg ) { METHOD_3 ( ) ; } } ; } VAR_3 . METHOD_5 ( VAR_1 ) ; } 
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 , new TYPE_2 ( ) , VAR_4 , VAR_5 . METHOD_3 ( ) ) ; if ( ( VAR_6 ) >= ( VAR_7 ) ) { TYPE_1 . METHOD_4 ( ) ; } } 
public void METHOD_1 ( TYPE_1 res ) { int VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_3 = VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) ; VAR_4 = new TYPE_2 ( mRS ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; VAR_4 . METHOD_6 ( VAR_3 ) ; VAR_4 . METHOD_7 ( INT_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; org.junit.Assert.assertEquals ( 3 , VAR_1 . METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( VAR_1 ) ) { return ; } if ( METHOD_2 ( 2 ) ) { int VAR_2 = METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; } int VAR_3 = METHOD_5 ( VAR_4 , VAR_5 , VAR_6 ) ; METHOD_6 ( VAR_7 , VAR_8 , STRING_1 , VAR_9 ) ; METHOD_4 ( VAR_3 , VAR_5 ) ; METHOD_6 ( VAR_7 , VAR_8 , STRING_2 , VAR_9 ) ; METHOD_7 ( VAR_3 , VAR_5 ) ; METHOD_6 ( VAR_7 , VAR_8 , STRING_1 , VAR_9 ) ; } 
public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { TYPE_4 . METHOD_2 ( VAR_2 [ 0 ] , session ) ; super . METHOD_1 ( VAR_3 , s , VAR_3 , VAR_1 , fd , callback ) ; } 
public void METHOD_1 ( TYPE_1 context ) throws java.lang.Exception { super . METHOD_1 ( context ) ; METHOD_2 ( ) ; TYPE_2 . METHOD_1 ( ) ; TYPE_3 . METHOD_3 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } synchronized ( VAR_2 class ) { VAR_3 = null ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_2 ( VAR_2 ) ) . METHOD_3 ( TYPE_1 . METHOD_4 ( new TYPE_2 ( VAR_1 ) ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_3 response = VAR_4 . METHOD_6 ( ) ; org.junit.Assert.assertEquals ( VAR_5 , response . status ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_6 . packageName ) ; } 
public static void METHOD_1 ( java.io.File [ ] VAR_2 , java.io.File VAR_3 , boolean VAR_4 , boolean VAR_5 , float VAR_6 ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , ( ( TYPE_2 ) ( null ) ) , ( ( TYPE_3 [ ] ) ( null ) ) ) ; } 
public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { return ; } TYPE_1 VAR_3 = new TYPE_1 ( mContext ) ; for ( TYPE_2 test : VAR_4 ) { assertEquals ( ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) + ( test . address ) ) , VAR_6 , VAR_3 . METHOD_4 ( test . address , VAR_5 ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 device ) { try { java.lang.String VAR_1 = device . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_2 != null ) { TYPE_1 VAR_4 = new TYPE_1 ( device ) ; boolean result = VAR_4 . METHOD_3 ( VAR_1 , VAR_2 , mContext ) ; VAR_2 . METHOD_4 ( ) ; if ( result ) { return VAR_4 ; } } } catch ( java.lang.Exception e ) { android.util.Log.e ( VAR_5 . TAG , STRING_1 , e ) ; } return null ; } 
public static byte [ ] METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { byte [ ] VAR_2 = new byte [ VAR_1 . size ( ) ] ; int i = 0 ; for ( TYPE_1 b : VAR_1 ) { VAR_2 [ ( i ++ ) ] = b ; } return VAR_2 ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_4 = ( VAR_5 ) ++ ; if ( VAR_6 ) { android.util.Log.v ( VAR_7 . TAG , ( STRING_1 + ( VAR_3 . METHOD_2 ( ) ) ) ) ; } VAR_8 . METHOD_4 ( VAR_3 ) ; } for ( java.lang.String VAR_9 : VAR_2 ) { VAR_10 . METHOD_5 ( VAR_9 ) ; } } 
public void run ( ) { TYPE_1 VAR_1 = ( METHOD_1 ( ) ) ? VAR_2 . METHOD_2 ( false ) : METHOD_3 ( ) ; if ( android.util.Log . METHOD_4 ( VAR_3 , VAR_4 ) ) { TYPE_2 . log ( ( STRING_1 + VAR_5 ) ) ; TYPE_2 . log ( ( STRING_2 + VAR_1 ) ) ; } METHOD_5 ( VAR_1 ) ; this . VAR_6 . METHOD_6 ( ) ; } 
public static synchronized boolean METHOD_1 ( TYPE_1 context ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( context ) ) { return VAR_2 . METHOD_4 ( VAR_3 ) ; } else { return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , false ) ; } } 
public static java.lang.String METHOD_1 ( TYPE_1 method , TYPE_1 call ) { assert ( call instanceof TYPE_2 ) || ( call instanceof TYPE_3 ) ; TYPE_4 VAR_1 = new TYPE_4 ( null , method , call , 0 ) ; method . METHOD_2 ( VAR_1 ) ; return VAR_1 . METHOD_3 ( ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 call , TYPE_3 callback , boolean VAR_2 ) { org.mockito.Mockito.verify ( callback ) . METHOD_2 ( call ) ; org.mockito.Mockito.verify ( call . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ( VAR_2 ? 1 : 0 ) ) ) . METHOD_5 ( ) ; org.junit.Assert.assertEquals ( call . METHOD_3 ( ) , VAR_1 . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_3 , java.lang.Class < ? > VAR_4 , TYPE_3 < java.lang.String > VAR_5 , TYPE_4 VAR_6 , int VAR_7 , boolean VAR_8 ) { if ( new TYPE_5 ( VAR_4 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ) { return new TYPE_6 ( VAR_1 , VAR_4 ) ; } else { return null ; } } 
public int METHOD_1 ( ) { if ( METHOD_2 ( ) ) { int VAR_1 = METHOD_3 ( ) . METHOD_1 ( ) ; if ( ( VAR_1 & ( VAR_2 ) ) != 0 ) { VAR_1 &= ~ ( ( VAR_2 ) | ( VAR_3 ) ) ; } return ( ( VAR_4 ) | ( VAR_5 ) ) | VAR_1 ; } int VAR_6 = INT_1 ; int VAR_7 = METHOD_4 ( ( ( VAR_8 ) & VAR_6 ) ) ; return VAR_7 & VAR_6 ; } 
private static void METHOD_1 ( TYPE_1 context , java.util.List < TYPE_2 > VAR_1 , TYPE_3 VAR_2 ) { boolean VAR_3 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; boolean VAR_4 = ! ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ) ; VAR_1 . METHOD_6 ( new TYPE_5 ( context , TYPE_6 . METHOD_7 ( context , VAR_2 . METHOD_8 ( ) , TYPE_7 . METHOD_9 ( context , VAR_2 ) , VAR_3 , VAR_4 ) , VAR_5 , VAR_6 ) ) ; } 
public void METHOD_1 ( final boolean VAR_1 , final int VAR_2 , final TYPE_1 VAR_3 ) { if ( METHOD_2 ( ) ) { VAR_4 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } } ) ; return ; } VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ; java.io.File VAR_3 = java.io.File . METHOD_2 ( STRING_6 , STRING_7 ) ; TYPE_2 VAR_4 = new TYPE_3 ( new TYPE_4 ( VAR_3 ) ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( ) ; TYPE_5 VAR_5 = TYPE_1 . METHOD_5 ( new TYPE_6 ( VAR_3 ) ) ; assertNotNull ( VAR_5 ) ; VAR_3 . METHOD_6 ( ) ; } 
private synchronized boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , TYPE_1 VAR_1 ) { if ( VAR_2 ) android.util.Log.d ( TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_3 ) ) ) ; if ( ( ! ( VAR_3 ) ) && ( VAR_4 . METHOD_1 ( device , VAR_1 ) ) ) { VAR_3 = true ; return true ; } return false ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Throwable VAR_3 ) { java.lang.String VAR_4 = METHOD_2 ( VAR_2 ) ; TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) ; if ( VAR_3 != null ) { VAR_6 = true ; } METHOD_3 ( VAR_1 , VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { java.lang.String VAR_4 = VAR_1 . METHOD_2 ( ) ; while ( VAR_4 != null ) { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_4 , VAR_3 ) ; VAR_4 = VAR_1 . METHOD_2 ( ) ; } TYPE_2 . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_1 , 1 ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_2 , 2 ) ) ; TYPE_1 result = TYPE_3 . METHOD_5 ( VAR_1 , INT_3 , STRING_1 ) ; METHOD_6 ( result ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } if ( VAR_2 ) { VAR_1 . METHOD_2 ( true , true , true ) ; } else if ( VAR_3 ) { VAR_1 . METHOD_2 ( false , false , true ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ( ! ( VAR_4 ) ) ) ; } else { VAR_1 . METHOD_2 ( true , ( ! ( VAR_4 ) ) , true ) ; } } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertFalse ( VAR_4 . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 . size ( ) , VAR_4 . METHOD_6 ( ) . size ( ) ) ; METHOD_7 ( VAR_2 , VAR_4 , VAR_1 , false , VAR_3 ) ; } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_4 VAR_3 ) { TYPE_5 < TYPE_6 > VAR_4 = TYPE_5 . of ( VAR_1 , VAR_3 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_1 ; } public TYPE_5 < TYPE_6 > METHOD_3 ( ) { return VAR_4 ; } public TYPE_5 < TYPE_6 > METHOD_4 ( ) { return VAR_4 . METHOD_5 ( 1 , VAR_4 . size ( ) ) ; } } ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_2 ) ; if ( VAR_4 . METHOD_3 ( ) ) { TYPE_4 VAR_5 = new TYPE_4 ( VAR_4 ) ; VAR_5 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( TYPE_5 . METHOD_6 ( ) ) ; return VAR_5 ; } return null ; } 
public void METHOD_1 ( final boolean VAR_1 ) { if ( METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( VAR_1 ) ; } } ) ; return ; } VAR_3 . METHOD_1 ( VAR_1 ) ; } 
boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , int VAR_1 ) { if ( VAR_2 ) { android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + VAR_1 ) ) ; } return TYPE_1 . METHOD_2 ( METHOD_3 ( ) , TYPE_1 . METHOD_4 ( device . METHOD_5 ( ) ) , VAR_1 ) ; } 
public static synchronized int METHOD_1 ( TYPE_1 context ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( context ) ) { return VAR_2 . METHOD_4 ( VAR_3 , VAR_4 ) ; } else { return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , VAR_4 ) ; } } 
static java.lang.String METHOD_1 ( TYPE_1 method , TYPE_1 call , int VAR_1 ) { assert ( call instanceof TYPE_2 ) || ( call instanceof TYPE_3 ) ; TYPE_4 VAR_2 = new TYPE_4 ( null , method , call , VAR_1 ) ; method . METHOD_2 ( VAR_2 ) ; java.lang.String name = VAR_2 . METHOD_3 ( ) ; return name ; } 
static void METHOD_1 ( long VAR_1 , float x , float y , float VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_2 . Float ( ( x - VAR_2 ) , ( y - VAR_2 ) , ( VAR_2 * 2 ) , ( VAR_2 * 2 ) ) , false ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) { TYPE_1 config = new TYPE_1 ( ) ; VAR_1 = in . METHOD_2 ( ) ; VAR_2 = ( ( TYPE_3 ) ( in . METHOD_3 ( null ) ) ) ; VAR_3 = in . METHOD_4 ( ) ; config . netId = in . METHOD_4 ( ) ; return config ; } 
private TYPE_1 METHOD_1 ( java.lang.String id , java.lang.String name , TYPE_2 type ) { TYPE_1 VAR_2 = VAR_3 . get ( id ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( id , name , type ) ; VAR_3 . METHOD_2 ( id , VAR_2 ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( VAR_5 class ) , org.mockito.Matchers . METHOD_7 ( ) ) ; org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_8 ( org.mockito.Matchers . METHOD_6 ( VAR_5 class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , false ) ; } 
